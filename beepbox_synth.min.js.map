{"version":3,"sources":["../synth/SynthConfig.ts","../editor/EditorConfig.ts","../synth/FFT.ts","../synth/Deque.ts","../synth/synth.ts"],"names":["Config","centerWave","wave","sum","i","length","average","cumulative","wavePrev","push","Float64Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","getDrumWave","index","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","samples","Float32Array","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","Error","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","pow","highIndex","min","retroWave","combinedAmplitude","lerped","log","LN2","amplitude","spectrumMax","radians","PI","cos","sin","generateSineWave","sineWaveLength","generateTriWave","asin","generateSquareWave","phasewidth","generateSawWave","inverse","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","dictionary","value","name","result","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","reverbRange","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentsPerChannelMin","instrumentsPerChannelMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipWaves","volume","pitchFilterMult","isSoft","filterCutoffMaxHz","filterCutoffMinHz","filterMax","filterMaxResonance","filterCutoffRange","filterResonanceRange","transitions","isSeamless","attackSeconds","releases","releaseTicks","slides","slideTicks","vibratos","type","delayParts","vibratoTypes","periodsSeconds","period","arpSpeedScale","intervals","spread","offset","sign","effectsNames","volumeRange","volumeLogScale","panCenter","panMax","detuneMin","detuneMax","songDetuneMin","songDetuneMax","chords","harmonizes","customInterval","arpeggiates","isCustomInterval","strumParts","maxChordSize","operatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","harmonicsControlPoints","harmonicsRendered","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthRange","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","modCount","pitchOctaves","maxScrollableOctaves","maxPitch","maximumTonesPerChannel","sineWaveMask","sineWave","triWave","squareWave","sawWave","operatorWaves","drive","generateTrapezoidWave","barEditorHeight","test","navigator","userAgent","EditorConfig","[object Object]","presetValue","categoryIndex","presetIndex","presetCategories","presets","program","category","preset","generalMidi","midiProgram","presetName","factor","countBits","n","isPowerOf2","round","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","customType","settings","transition","effects","chord","filterCutoffHz","filterResonance","filterEnvelope","interval","vibrato","isNoise","algorithm","feedbackType","feedbackAmplitude","feedbackEnvelope","operators","frequency","envelope","customChipWave","harmonics","midiSubharmonicOctaves","pulseWidth","pulseEnvelope","spectrum","drums","Deque","this","_capacity","_buffer","undefined","_mask","_offset","_count","element","_expandCapacity","set","get","popFront","popBack","oldBuffer","Array","size","base64IntToCharCode","base64CharCodeToInt","BitFieldReader","source","_bits","_readIndex","charCodeAt","minValue","minBits","numBits","readLongTail","read","BitFieldWriter","_index","writeLongTail","write","other","buffer","ceil","makeNotePin","time","clamp","max","val","validateRange","Note","pitch","start","end","fadeout","pitches","pins","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestVolume","pin","newNote","concat","Pattern","notes","instrument","note","clone","Operator","waveform","reset","SpectrumWave","isNoiseChannel","_wave","_waveIsReady","isHarmonic","lowestOctave","waveLength","highestOctave","falloffRatio","pitchTweak","controlPointToOctave","point","floor","value1","value2","octave1","octave2","HarmonicsWave","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","Instrument","isModChannel","chipWave","chipNoise","filterCutoff","vibratoDepth","vibratoSpeed","vibratoDelay","vibratoType","pan","panDelay","arpeggioSpeed","fastTwoNoteArp","tieNoteTransition","clicklessTransition","detune","LFOtime","nextLFOtime","arpTime","customChipWaveIntegral","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modChannels","modStatuses","modInstruments","modSettings","mod","ModStatus","msNone","ModSetting","mstNone","spectrumWave","instrumentObject","getChord","getFilterCutoffOctaves","getFilterEnvelope","getDrumsetEnvelope","operatorArray","operator","useSlowerRhythm","indexOf","setTypeAndReset","oldTransitionNames","binary","sudden","smooth","transitionObject","findIndex","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","sustain sharp","sustain medium","sustain soft","decay sharp","legacyFilter","legacyEffectNames","drum","legacyWaveNames","triangle","square","pulse wide","pulse narrow","sawtooth","double saw","double pulse","spiky","plateau","legacyChorusNames","fifths","octaves","feedback","legacyEnvelopeNames","pluck 1","pluck 2","pluck 3","operatorObject","freq","frequencyFromPitch","drumsetIndexReferenceDelta","getCustomWave","_drumsetIndexToSpectrumOctave","Channel","octave","instruments","patterns","bars","muted","Song","string","scaleCustom","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","mstMaxVols","Map","mstSongVolume","mstTempo","mstReverb","mstNextBar","mstInsVolume","mstPan","mstFilterCut","mstFilterPeak","mstFMSlider1","mstFMSlider2","mstFMSlider3","mstFMSlider4","mstFMFeedback","mstPulseWidth","mstDetune","mstVibratoDepth","mstSongDetune","mstVibratoSpeed","mstVibratoDelay","mstArpeggioSpeed","mstPanDelay","mstResetArpeggio","mstMaxValue","mstNewNoteVols","getNewNoteVolume","isMod","modChannel","modInstrument","cap","realToModValue","tempo","getVolumeCap","getVolumeCapForSetting","modSetting","fromBase64String","initToDefault","setting","pitchChannelCount","noiseChannelCount","modChannelCount","channel","andResetChannels","scale","key","loopStart","loopLength","reverb","beatsPerBar","barCount","patternsPerChannel","rhythm","instrumentsPerChannel","title","document","channelIndex","getChannelCount","pattern","bar","bits","_variant","_latestJummBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","o","spectrumBits","encodeBase64","harmonicsBits","neededBits","shapeBits","neededInstrumentBits","getChannelIsNoise","getChannelIsMod","instrumentIndex","modStatus","msForPitch","msForNoise","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","writePartDuration","clear","writePinCount","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","splice","unshift","pop","allPitches","pitchIndex","pitchIter","writePitchInterval","stringLength","lengthBase64","digits","prototype","maxApplyArgs","slice","compressed","charIndex","fromJsonObject","JSON","parse","substring","variant","_latestBeepboxVersion","_oldestBeepboxVersion","_oldestJummBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","command","instrumentChannelIterator","instrumentIndexIterator","toSetOctaves","useSlowerArpSpeed","songNameLength","decodeURIComponent","window","localStorage","getItem","instrumentType","legacyWaves","legacyEffects","legacyEnvelopes","effect","originalValue","nextValue","channelNameLength","byteCount","markCustomWaveDirty","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","newPattern","newNotes","useOldShape","shape","pinObj","pinCount","readPinCount","initialVolume","bendCount","pitchBend","readLegacyPartDuration","readPartDuration","readPitchInterval","intervalIter","shift","isBackwards","restLength","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","toJsonObject","patternArray","noteArray","volumeCap","pointArray","useVol","tick","forMod","points","sequenceArray","l","octaveScrollBar","sequence","format","_format","customScale","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","oldScaleNames","romani :)","romani :(","enigma","scaleName","letter","charAt","toUpperCase","symbol","toLowerCase","C","D","E","F","G","A","B","#","♯","b","♭","importedPartsPerBeat","maxInstruments","maxPatterns","maxBars","channelObject","newPitchChannels","newNoiseChannels","newModChannels","patternObject","maxNoteCount","noteObject","k","startInterval","pointObject","lowestPitch","highestPitch","patternIndex","getPattern","Tone","chordSize","drumsetPitch","prevNote","nextNote","prevNotePitchIndex","nextNotePitchIndex","active","noteStart","noteEnd","noteLengthTicks","ticksSinceReleased","liveInputSamplesHeld","lastInterval","lastVolume","stereoVolume1","stereoVolume2","stereoOffset","stereoDelay","sample","phases","phaseDeltas","volumeStarts","volumeDeltas","volumeStart","volumeDelta","phaseDeltaScale","pulseWidthDelta","filter","filterScale","filterSample0","filterSample1","vibratoScale","intervalMult","intervalVolumeMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","Synth","song","samplesPerSecond","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","loopRepeatCount","wantToSkip","playheadInternal","beat","part","tickSampleCountdown","isPlayingSong","liveInputEndTime","tonePool","activeTones","tyingOver","activeModTones","releasedTones","liveInputTones","limit","stereoBufferIndex","samplesForNone","samplesForReverb","samplesForChorus","samplesForChorusReverb","chorusDelayLine","chorusDelayPos","chorusPhase","reverbDelayLine","reverbDelayPos","reverbFeedback0","reverbFeedback1","reverbFeedback2","reverbFeedback3","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","synthesize","deactivateAudio","setSong","getInstrumentSynthFunction","warmUp","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","currentPart","currentBar","instrumentIdx","getPatternInstrument","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","msForSong","setModValue","playing","playhead","remainder","samplesPerTick","getSamplesPerTick","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","modValueToReal","ended","totalSamples","foundMod","find","sort","a","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getSamplesPerBar","getTotalBars","useLoopCount","volumeEnd","nextVal","channelAdjust","forSong","isModActive","AudioContext","webkitAudioContext","sampleRate","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","activateAudio","warmUpSynthesizer","computeLatestModValues","snapToBar","freeAllTones","oldBar","outputBufferLength","playSong","channelCount","idx","bufferIndex","pause","stereoBufferLength","chorusAngle","chorusRange","chorusOffset0","chorusOffset1","chorusOffset2","chorusOffset3","chorusOffset4","chorusOffset5","useReverb","getModValue","samplesLeftInBuffer","runLength","determineCurrentActiveTones","count","tone","playTone","skipBar","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","determineLiveInputTones","getTransition","freeReleasedTone","shouldFadeOutFast","chorusTap0Index","chorusTap1Index","chorusTap2Index","chorusTap3Index","chorusTap4Index","chorusTap5Index","chorusTap0Delta","chorusTap1Delta","chorusTap2Delta","chorusTap3Delta","chorusTap4Delta","chorusTap5Delta","runEnd","bufferIndexL","bufferIndexR","sampleForNoneL","sampleForNoneR","sampleForReverbL","sampleForReverbR","sampleForChorusL","sampleForChorusR","sampleForChorusReverbL","sampleForChorusReverbR","combinedChorusL","combinedChorusR","chorusTap0Ratio","chorusTap1Ratio","chorusTap2Ratio","chorusTap3Ratio","chorusTap4Ratio","chorusTap5Ratio","chorusTap0A","chorusTap0B","chorusTap1A","chorusTap1B","chorusTap2A","chorusTap2B","chorusTap3A","chorusTap3B","chorusTap4A","chorusTap4B","chorusTap5A","chorusSampleL","chorusSampleR","reverbDelayPos1","reverbDelayPos2","reverbDelayPos3","reverbSample0","reverbSample1","reverbSample2","reverbSample3","reverbTemp0","reverbTemp1","reverbTemp2","reverbTemp3","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","Number","isInteger","atEnd","carryOver","toneCount","targetBar","nextPattern","currNote","currVolume","p","releaseTone","freeTone","remove","resetEffects","epsilon","pushBack","pushFront","toneIndex","toneList","newTone","modChannelIdx","prevNotes","nextNotes","fillCount","syncTones","peakBack","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","synthBuffer","computeTone","synthesizer","beats","customVolume","attack","lin","synth","chordVolume","computeChordVolume","intervalScale","secondsPerPart","beatsPerPart","toneWasActive","treatAsSeamless","startPan","endPan","startPanDelay","endPanDelay","useStartPan","useEndPan","maxDelayStart","maxDelayEnd","delayEnd","stereoVolumeLEnd","stereoVolumeREnd","volumeReferencePitch","baseVolume","pitchDamping","resetPhases","partsSinceStart","intervalStart","intervalEnd","transitionVolumeStart","transitionVolumeEnd","chordVolumeStart","chordVolumeEnd","decayTimeStart","decayTimeEnd","ticksSoFar","startTicksSinceReleased","endTicksSinceReleased","startTick","endTick","toneTransition","expressionToVolumeMult","heldTicksStart","heldTicksEnd","heldPartsStart","heldPartsEnd","partsPerBar","endPinIndex","startPin","endPin","noteStartTick","pinStart","pinEnd","tickTimeStart","tickTimeEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","customVolumeTickStart","customVolumeTickEnd","transitionVolumeTickStart","transitionVolumeTickEnd","chordVolumeTickStart","chordVolumeTickEnd","intervalTickStart","intervalTickEnd","decayTimeTickStart","decayTimeTickEnd","maximumSlideTicks","slideRatioStartTick","slideRatioEndTick","intervalDiff","volumeDiff","decayTimeDiff","chordSizeDiff","sampleTime","lfoEffectStart","getLFOAmplitude","lfoEffectEnd","partsStart","partsEnd","useVibratoStart","useVibratoEnd","activeVibratoDelayMods","vibratoDelayStart","vibratoDelayEnd","MAX_VALUE","instrumentVolumeMult","instrumentVolumeToVolumeMult","pickMainInterval","cutoffOctavesModStart","cutoffOctavesModEnd","filterCutModStart","filterCutModEnd","filterCutoffHzStart","filterCutoffHzEnd","filterBaseStart","filterBaseEnd","filterMin","computeEnvelope","endFilter","filterVolumeStart","filterVolumeEnd","getFilterResonance","useFilterResonanceStart","useFilterResonanceEnd","filterResonanceEnd","sineVolumeBoostStart","sineVolumeBoostEnd","totalCarrierVolumeStart","totalCarrierVolumeEnd","arpeggioInterval","detuneStart","detuneEnd","associatedCarrierIndex","freqMult","startFreq","amplitudeStart","amplitudeEnd","amplitudeCurveStart","operatorAmplitudeCurve","amplitudeCurveEnd","startVal","endVal","endPitch","pitchVolumeStart","pitchVolumeEnd","operatorEnvelope","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","volumeMult","intervalOffset","settingsVolumeMultStart","settingsVolumeMultEnd","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","replace","join","operatorLine","operatorSourceTemplate","modulators","modulatorNumber","feedbackIndices","Function","chipSynth","harmonicsSynth","pulseWidthSynth","noiseSynth","spectrumSynth","drumsetSynth","modSynth","data","volumeScale","intervalA","intervalB","intervalSign","deltaRatio","phaseDeltaA","phaseDeltaB","phaseA","phaseB","filter1","filter2","filterScale1","filterScale2","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","prevWaveIntegralA","prevWaveIntegralB","delays","stereoVolumeL","stereoVolumeR","nextWaveIntegralA","nextWaveIntegralB","waveA","waveB","output","phaseDelta","phase","sawPhaseA","sawPhaseB","pulseWave","t","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","phaseRatio","getDrumsetWave","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","slope","instrumentVolume","expression","getBeatsPerMinute","beatsPerSecond","partsPerSecond","tickPerSecond","split"],"mappings":"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,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI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","sourcesContent":["/*!\r\nCopyright (C) 2020 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\n//namespace beepbox {\r\nexport interface Dictionary<T> {\r\n\t[K: string]: T;\r\n}\r\n\r\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\r\n\tdictionary: Dictionary<T>;\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tcustom,\r\n\tsteady,\r\n\tpunch,\r\n\tflare,\r\n\ttwang,\r\n\tswell,\r\n\ttremolo,\r\n\ttremolo2,\r\n    decay,\r\n    wibble,\r\n    hard,\r\n    linear,\r\n}\r\n\r\nexport const enum InstrumentType {\r\n\tchip = 0,\r\n\tfm = 1,\r\n\tnoise = 2,\r\n\tspectrum = 3,\r\n\tdrumset = 4,\r\n\tharmonics = 5,\r\n\tpwm = 6,\r\n\tcustomChipWave = 7,\r\n\tmod = 8,\r\n\tlength,\r\n}\r\n\r\nexport interface BeepBoxOption {\r\n\treadonly index: number;\r\n\treadonly name: string;\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n\treadonly flags: ReadonlyArray<boolean>;\r\n\treadonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n\treadonly isWhiteKey: boolean;\r\n\treadonly basePitch: number;\r\n}\r\n\r\nexport interface Rhythm extends BeepBoxOption {\r\n\treadonly stepsPerBeat: number;\r\n\t//readonly ticksPerArpeggio: number;\r\n\t//readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>>;\r\n\treadonly roundUpThresholds: number[] | null;\r\n}\r\n\r\nexport interface ChipWave extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly samples: Float64Array;\r\n}\r\n\r\nexport interface OperatorWave extends BeepBoxOption {\r\n    samples: Float64Array;\r\n}\r\n\r\nexport interface ChipNoise extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly basePitch: number;\r\n\treadonly pitchFilterMult: number;\r\n\treadonly isSoft: boolean;\r\n\tsamples: Float32Array | null;\r\n}\r\n\r\nexport interface Transition extends BeepBoxOption {\r\n\treadonly isSeamless: boolean;\r\n\treadonly attackSeconds: number;\r\n\treadonly releases: boolean;\r\n\treadonly releaseTicks: number;\r\n\treadonly slides: boolean;\r\n\treadonly slideTicks: number;\r\n}\r\n\r\nexport interface Vibrato extends BeepBoxOption {\r\n\treadonly amplitude: number;\r\n\treadonly type: number;\r\n\treadonly delayParts: number;\r\n}\r\n\r\nexport interface VibratoType extends BeepBoxOption {\r\n\treadonly periodsSeconds: number[];\r\n\treadonly period: number;\r\n}\r\n\r\nexport interface Interval extends BeepBoxOption {\r\n\treadonly spread: number;\r\n\treadonly offset: number;\r\n\treadonly volume: number;\r\n\treadonly sign: number;\r\n}\r\n\r\nexport interface Chord extends BeepBoxOption {\r\n\treadonly harmonizes: boolean;\r\n\treadonly customInterval: boolean;\r\n\treadonly arpeggiates: boolean;\r\n\treadonly isCustomInterval: boolean;\r\n\treadonly strumParts: number;\r\n}\r\n\r\nexport interface Algorithm extends BeepBoxOption {\r\n\treadonly carrierCount: number;\r\n\treadonly associatedCarrier: ReadonlyArray<number>;\r\n\treadonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface OperatorFrequency extends BeepBoxOption {\r\n\treadonly mult: number;\r\n\treadonly hzOffset: number;\r\n\treadonly amplitudeSign: number;\r\n}\r\n\r\nexport interface Envelope extends BeepBoxOption {\r\n\treadonly type: EnvelopeType;\r\n\treadonly speed: number;\r\n}\r\n\r\nexport interface Feedback extends BeepBoxOption {\r\n\treadonly indices: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport class Config {\r\n\t// Params for post-processing compressor\r\n\tpublic static thresholdVal: number = -10;\r\n\tpublic static kneeVal: number = 40;\r\n\tpublic static ratioVal: number = 12;\r\n\tpublic static attackVal: number = 0;\r\n\tpublic static releaseVal: number = 0.25;\r\n\r\n\tpublic static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\r\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\r\n\t\t{ name: \"Free\", realName: \"chromatic\", flags:                       [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\r\n\t\t{ name: \"Major\", realName: \"ionian\", flags:                         [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\r\n\t\t{ name: \"Minor\", realName: \"aeolian\", flags:                        [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\r\n\t\t{ name: \"Mixolydian\", realName: \"mixolydian\", flags:                [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\r\n\t\t{ name: \"Lydian\", realName: \"lydian\", flags:                        [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\r\n\t\t{ name: \"Dorian\", realName: \"dorian\", flags:                        [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\r\n\t\t{ name: \"Phrygian\", realName: \"phrygian\", flags:                    [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\r\n\t\t{ name: \"Locrian\", realName: \"locrian\", flags:                      [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\r\n\t\t{ name: \"Lydian Dominant\", realName: \"lydian dominant\", flags:      [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\r\n\t\t{ name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags:  [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\r\n\t\t{ name: \"Harmonic Major\", realName: \"harmonic major\", flags:        [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\r\n\t\t{ name: \"Harmonic Minor\", realName: \"harmonic minor\", flags:        [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\r\n\t\t{ name: \"Melodic Minor\", realName: \"melodic minor\", flags:          [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\r\n\t\t{ name: \"Blues\", realName: \"blues\", flags:                          [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\r\n\t\t{ name: \"Altered\", realName: \"altered\", flags:                      [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\r\n\t\t{ name: \"Major Pentatonic\", realName: \"major pentatonic\", flags:    [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\r\n\t\t{ name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags:    [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\r\n\t\t{ name: \"Whole Tone\", realName: \"whole tone\", flags:                [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\r\n\t\t{ name: \"Octatonic\", realName: \"octatonic\", flags:                  [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\r\n        { name: \"Hexatonic\", realName: \"hexatonic\", flags:                  [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\r\n        { name: \"Custom\", realName: \"custom\", flags:                        [true, false, true, true, false, false, false, true, true, false, true, true] }, // Custom? considering allowing this one to be be completely configurable\r\n\t]);\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{ name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{ name: \"C♯\", isWhiteKey: false, basePitch: 13 },\r\n\t\t{ name: \"D\", isWhiteKey: true, basePitch: 14 },\r\n\t\t{ name: \"D♯\", isWhiteKey: false, basePitch: 15 },\r\n\t\t{ name: \"E\", isWhiteKey: true, basePitch: 16 },\r\n\t\t{ name: \"F\", isWhiteKey: true, basePitch: 17 },\r\n\t\t{ name: \"F♯\", isWhiteKey: false, basePitch: 18 },\r\n\t\t{ name: \"G\", isWhiteKey: true, basePitch: 19 },\r\n\t\t{ name: \"G♯\", isWhiteKey: false, basePitch: 20 },\r\n\t\t{ name: \"A\", isWhiteKey: true, basePitch: 21 },\r\n\t\t{ name: \"A♯\", isWhiteKey: false, basePitch: 22 },\r\n        { name: \"B\", isWhiteKey: true, basePitch: 23 },\r\n\t]);\r\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\r\n\tpublic static readonly tempoMin: number = 30;\r\n\tpublic static readonly tempoMax: number = 320;\r\n\tpublic static readonly reverbRange: number = 32;\r\n\tpublic static readonly beatsPerBarMin: number = 2;\r\n\tpublic static readonly beatsPerBarMax: number = 16;\r\n\tpublic static readonly barCountMin: number = 1;\r\n\tpublic static readonly barCountMax: number = 256;\r\n\tpublic static readonly instrumentsPerChannelMin: number = 1;\r\n\tpublic static readonly instrumentsPerChannelMax: number = 10;\r\n\tpublic static readonly partsPerBeat: number = 24;\r\n\tpublic static readonly ticksPerPart: number = 2;\r\n\tpublic static readonly ticksPerArpeggio: number = 3;\r\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7] ];\r\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\r\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\r\n\t\t{ name: \"÷6\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷8\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t]);\r\n\r\n\tpublic static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"custom chip\", \"mod\"];\r\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, true];\r\n\tpublic static readonly chipWaves: DictionaryArray<ChipWave> = toNameMap([\r\n\t\t{ name: \"rounded\", volume: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\r\n\t\t{ name: \"triangle\", volume: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\r\n\t\t{ name: \"square\", volume: 0.5, samples: centerWave([1.0, -1.0]) },\r\n\t\t{ name: \"1/4 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"1/8 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"sawtooth\", volume: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n\t\t{ name: \"double saw\", volume: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n\t\t{ name: \"double pulse\", volume: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"spiky\", volume: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\r\n\t\t{ name: \"sine\", volume: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\r\n\t\t{ name: \"flute\", volume: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\r\n\t\t{ name: \"harp\", volume: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\r\n\t\t{ name: \"sharp clarinet\", volume: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\r\n\t\t{ name: \"soft clarinet\", volume: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n\t\t{ name: \"alto sax\", volume: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\r\n\t\t{ name: \"bassoon\", volume: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\r\n\t\t{ name: \"trumpet\", volume: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\r\n\t\t{ name: \"electric guitar\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\r\n\t\t{ name: \"organ\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\r\n\t\t{ name: \"pan flute\", volume: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\r\n        { name: \"glitch\", volume: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n    ]); \r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\r\n\t\t{ name: \"retro\", volume: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"white\", volume: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\r\n\t\t{ name: \"clang\", volume: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"buzz\", volume: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"hollow\", volume: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\r\n\t\t{ name: \"shine\", volume: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"deep\", volume: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\r\n\t\t{ name: \"cutter\", volume: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"metallic\", volume: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"uhhh??\", volume: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t]);\r\n\tpublic static readonly filterCutoffMaxHz: number = 8000; // This is carefully calculated to correspond to no change when filtering at 48000 samples per second.\r\n\tpublic static readonly filterCutoffMinHz: number = 1;\r\n\tpublic static readonly filterMax: number = 0.95;\r\n\tpublic static readonly filterMaxResonance: number = 0.95;\r\n\tpublic static readonly filterCutoffRange: number = 11;\r\n\tpublic static readonly filterResonanceRange: number = 8;\r\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\r\n\t\t{ name: \"seamless\", isSeamless: true, attackSeconds: 0.0, releases: false, releaseTicks: 1, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard\", isSeamless: false, attackSeconds: 0.0, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft\", isSeamless: false, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"slide\", isSeamless: true, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: true, slideTicks: 3 },\r\n\t\t{ name: \"cross fade\", isSeamless: false, attackSeconds: 0.04, releases: true, releaseTicks: 6, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard fade\", isSeamless: false, attackSeconds: 0.0, releases: true, releaseTicks: 48, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"medium fade\", isSeamless: false, attackSeconds: 0.0125, releases: true, releaseTicks: 72, slides: false, slideTicks: 3 },\r\n        { name: \"soft fade\", isSeamless: false, attackSeconds: 0.06, releases: true, releaseTicks: 96, slides: false, slideTicks: 6 },\r\n        { name: \"sliding fade\", isSeamless: false, attackSeconds: 0.08, releases: true, releaseTicks: 96, slides: true, slideTicks: 6 },\r\n\t]);\r\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\r\n\t\t{ name: \"none\", amplitude: 0.0, type: 0, delayParts: 0 },\r\n\t\t{ name: \"light\", amplitude: 0.15, type: 0, delayParts: 0 },\r\n\t\t{ name: \"delayed\", amplitude: 0.3, type: 0, delayParts: 18 },\r\n\t\t{ name: \"heavy\", amplitude: 0.45, type: 0, delayParts: 0 },\r\n\t\t{ name: \"shaky\", amplitude: 0.1, type: 1, delayParts: 0 },\r\n\t]);\r\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\r\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\r\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\r\n\t]);\r\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\r\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\r\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\r\n\tpublic static readonly intervals: DictionaryArray<Interval> = toNameMap([\r\n\t\t{ name: \"union\", spread: 0.0, offset: 0.0, volume: 0.7, sign: 1.0 },\r\n\t\t{ name: \"shimmer\", spread: 0.018, offset: 0.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"hum\", spread: 0.045, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"honky tonk\", spread: 0.09, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"dissonant\", spread: 0.25, offset: 0.0, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"fifth\", spread: 3.5, offset: 3.5, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"octave\", spread: 6.0, offset: 6.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"bowed\", spread: 0.02, offset: 0.0, volume: 1.0, sign: -1.0 },\r\n        { name: \"piano\", spread: 0.01, offset: 0.0, volume: 1.0, sign: 0.7 },\r\n        { name: \"warbled\", spread: 0.25, offset: 0.05, volume: 0.9, sign: -0.8 },\r\n\t]);\r\n\tpublic static readonly effectsNames: ReadonlyArray<string> = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\r\n\tpublic static readonly volumeRange: number = 50;\r\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\r\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\r\n\tpublic static readonly volumeLogScale: number = 0.1428;\r\n\tpublic static readonly panCenter: number = 50;\r\n\tpublic static readonly panMax: number = Config.panCenter * 2;\r\n\tpublic static readonly detuneMin: number = -50;\r\n\tpublic static readonly detuneMax: number = 50;\r\n\tpublic static readonly songDetuneMin: number = -250;\r\n\tpublic static readonly songDetuneMax: number = 250;\r\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\r\n\t\t{ name: \"harmony\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"strum\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 1 },\r\n        { name: \"arpeggio\", harmonizes: false, customInterval: false, arpeggiates: true, isCustomInterval: false, strumParts: 0 },\r\n        { name: \"custom interval\", harmonizes: true, customInterval: true, arpeggiates: true, isCustomInterval: true, strumParts: 0 },\r\n\t]);\r\n\tpublic static readonly maxChordSize: number = 9; // Pandora's box...\r\n\tpublic static readonly operatorCount: number = 4;\r\n\tpublic static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\r\n\t\t{ name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\r\n\t\t{ name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\r\n\t\t{ name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\r\n\t\t{ name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\r\n\t\t{ name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\r\n\t\t{ name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\r\n\t\t{ name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\r\n\t\t{ name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\r\n        { name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] }, \r\n\t\t{ name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\r\n        { name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\r\n        { name: \"1←(2 3) 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },\r\n\t]);\r\n\tpublic static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091];\r\n\tpublic static readonly operatorAmplitudeMax: number = 15;\r\n\tpublic static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\r\n\t\t{ name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\r\n\t\t{ name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\r\n\t\t{ name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"0.5×\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"0.25×\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"3.5×\", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },\r\n\t]);\r\n\tpublic static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\r\n\t\t{ name: \"custom\", type: EnvelopeType.custom, speed: 0.0 },\r\n\t\t{ name: \"steady\", type: EnvelopeType.steady, speed: 0.0 },\r\n\t\t{ name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\r\n\t\t{ name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\r\n\t\t{ name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\r\n\t\t{ name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\r\n\t\t{ name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\r\n\t\t{ name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\r\n\t\t{ name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\r\n\t\t{ name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\r\n\t\t{ name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\r\n\t\t{ name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\r\n\t\t{ name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\r\n\t\t{ name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\r\n\t\t{ name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\r\n\t\t{ name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\r\n\t\t{ name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\r\n\t\t{ name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\r\n\t\t{ name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\r\n\t\t{ name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\r\n        { name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\r\n        { name: \"wibble 1\", type: EnvelopeType.wibble, speed: 24.0 },\r\n        { name: \"wibble 2\", type: EnvelopeType.wibble, speed: 12.0 },\r\n        { name: \"wibble 3\", type: EnvelopeType.wibble, speed: 4.0 },\r\n        { name: \"linear 1\", type: EnvelopeType.linear, speed: 32.0 },\r\n        { name: \"linear 2\", type: EnvelopeType.linear, speed: 8.0 },\r\n        { name: \"linear 3\", type: EnvelopeType.linear, speed: 2.0 },\r\n        { name: \"linear-1\", type: EnvelopeType.linear, speed: 128.0 },\r\n        { name: \"swell -1\", type: EnvelopeType.swell, speed: 128.0 },\r\n\t]);\r\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\r\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\r\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\r\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\r\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\r\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\r\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\r\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\r\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\r\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\r\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\r\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\r\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\r\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\r\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\r\n        { name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\r\n        { name: \"1↔2 3↔4\", indices: [[2], [1], [4], [3]] },\r\n        { name: \"1↔4 2↔3\", indices: [[4], [3], [2], [1]] },\r\n        { name: \"2→1→4→3→2\", indices: [[2], [3], [4], [1]] },\r\n\t]);\r\n\tpublic static readonly chipNoiseLength: number = 1 << 15; // 32768\r\n\tpublic static readonly spectrumBasePitch: number = 24;\r\n\tpublic static readonly spectrumControlPoints: number = 30;\r\n\tpublic static readonly spectrumControlPointsPerOctave: number = 7;\r\n\tpublic static readonly spectrumControlPointBits: number = 3;\r\n\tpublic static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\r\n\tpublic static readonly harmonicsControlPoints: number = 28;\r\n\tpublic static readonly harmonicsRendered: number = 64;\r\n\tpublic static readonly harmonicsControlPointBits: number = 3;\r\n\tpublic static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\r\n\tpublic static readonly harmonicsWavelength: number = 1 << 11; // 2048\r\n\tpublic static readonly pulseWidthRange: number = 50;\r\n\tpublic static readonly pitchChannelCountMin: number = 1;\r\n\tpublic static readonly pitchChannelCountMax: number = 40;\r\n\tpublic static readonly noiseChannelCountMin: number = 0;\r\n\tpublic static readonly noiseChannelCountMax: number = 8;\r\n\tpublic static readonly modChannelCountMin: number = 0;\r\n\tpublic static readonly modChannelCountMax: number = 8;\r\n\tpublic static readonly noiseInterval: number = 6;\r\n\tpublic static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\r\n\tpublic static readonly drumCount: number = 12;\r\n\tpublic static readonly modCount: number = 6;\r\n\tpublic static readonly pitchOctaves: number = 8;\r\n\tpublic static readonly maxScrollableOctaves: number = 5; // Largest number possible with any config setting\r\n\tpublic static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\r\n\tpublic static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\r\n\tpublic static readonly sineWaveLength: number = 1 << 8; // 256\r\n\tpublic static readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n\tpublic static readonly sineWave: Float64Array = generateSineWave();\r\n    public static readonly triWave: Float64Array = generateTriWave();\r\n    public static readonly squareWave: Float64Array = generateSquareWave();\r\n    public static readonly sawWave: Float64Array = generateSawWave()\r\n    public static readonly operatorWaves: DictionaryArray<OperatorWave> = toNameMap([\r\n        { name: \"sine\", samples: generateSineWave() },\r\n        { name: \"triangle\", samples: generateTriWave() },\r\n        { name: \"sawtooth\", samples: generateSawWave() },\r\n        { name: \"square\", samples: generateSquareWave() },\r\n        { name: \"25%pulse\", samples: generateSquareWave(0.5) },\r\n        { name: \"75%pulse\", samples: generateSquareWave(-0.5) },\r\n        { name: \"ramp\", samples: generateSawWave(true) },\r\n        { name: \"trapezoid\", samples: generateTrapezoidWave(2) },\r\n    ]);\r\n\r\n\t// Height of the small editor column for inserting/deleting rows, in pixels.\r\n\tpublic static readonly barEditorHeight: number = 10;\r\n\r\n}\r\n\r\nfunction centerWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = wave[i] - average;\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\nfunction centerAndNormalizeWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tlet magn: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t\tmagn += Math.abs(wave[i]);\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\tconst magnAvg: number = magn / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = (wave[i] - average) / (magnAvg);\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\n\r\n// The function arguments will be defined in FFT.ts, but I want\r\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\r\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\r\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\r\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\r\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null = null, scaleElementsByFactor: Function | null = null): Float32Array {\r\n\tlet wave: Float32Array | null = Config.chipNoises[index].samples;\r\n\tif (wave == null) {\r\n\t\twave = new Float32Array(Config.chipNoiseLength + 1);\r\n\t\tConfig.chipNoises[index].samples = wave;\r\n\r\n\t\tif (index == 0) {\r\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 1) {\r\n\t\t\t// White noise is just random values for each sample.\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t}\r\n\t\t} else if (index == 2) {\r\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 3) {\r\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 4) {\r\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\tdrawNoiseSpectrum(wave, 10, 11, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 11, 14, .6578, .6578, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 5) {\r\n\t\t\t// \"Shine\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 6) {\r\n\t\t\t// \"Deep\" drums from modbox!\r\n\t\t\tdrawNoiseSpectrum(wave, 1, 10, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 20, 14, -2, -2, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 7) {\r\n\t\t\t// \"Cutter\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1);\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 8) {\r\n\t\t\t// \"Metallic\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < 32768; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 + 0.5;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n            }\r\n        } else if (index == 9) {\r\n            // New Drum noise? New Drum Noise!\r\n            let drumBuffer: number = 1;\r\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.1;\r\n                let newBuffer: number = drumBuffer >> 1;\r\n                if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                    newBuffer += 8 ^ 2 << 16;\r\n                }\r\n                drumBuffer = newBuffer;\r\n            }\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t}\r\n\r\n\t\twave[Config.chipNoiseLength] = wave[0];\r\n\t}\r\n\r\n\treturn wave;\r\n}\r\n\r\nexport function drawNoiseSpectrum(wave: Float32Array, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\r\n\tconst referenceOctave: number = 11;\r\n\tconst referenceIndex: number = 1 << referenceOctave;\r\n\tconst lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n\tconst highIndex: number = Math.min(Config.chipNoiseLength >> 1, Math.pow(2, highOctave) | 0);\r\n\tconst retroWave: Float32Array = getDrumWave(0);\r\n\tlet combinedAmplitude: number = 0.0;\r\n\tfor (let i: number = lowIndex; i < highIndex; i++) {\r\n\r\n\t\tlet lerped: number = lowPower + (highPower - lowPower) * (Math.log(i) / Math.LN2 - lowOctave) / (highOctave - lowOctave);\r\n\t\t//let amplitude: number = Math.pow(2, lerped);\r\n\t\t//let amplitude: number = Math.pow((lerped + 5) / 7, 4);\r\n\t\tlet amplitude: number = Math.pow(2, (lerped - 1) * Config.spectrumMax + 1) * lerped;\r\n\r\n\t\tamplitude *= Math.pow(i / referenceIndex, overallSlope);\r\n\r\n\t\tcombinedAmplitude += amplitude;\r\n\r\n\t\t// Add two different sources of psuedo-randomness to the noise\r\n\t\t// (individually they aren't random enough) but in a deterministic\r\n\t\t// way so that live spectrum editing doesn't result in audible pops.\r\n\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the \r\n\t\t// LFSR retro wave (effectively random), and also rotate the phase\r\n\t\t// of each sine wave based on the golden angle to disrupt the symmetry.\r\n\t\tamplitude *= retroWave[i];\r\n\t\tconst radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\r\n\r\n\t\twave[i] = Math.cos(radians) * amplitude;\r\n\t\twave[Config.chipNoiseLength - i] = Math.sin(radians) * amplitude;\r\n\t}\r\n\r\n\treturn combinedAmplitude;\r\n}\r\n\r\nfunction generateSineWave(): Float64Array {\r\n\tconst wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n\tfor (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n\t\twave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n\t}\r\n\treturn wave;\r\n}\r\n\r\nfunction generateTriWave(): Float64Array {\r\n    const wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength))/(Math.PI/2);\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateTrapezoidWave(drive: number = 2): Float64Array {\r\n    const wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength))*drive;\r\n        wave[i] = wave[i] >= 1 ? 1 : wave[i];\r\n        wave[i] = wave[i] <= -1 ? -1 : wave[i];\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateSquareWave(phasewidth: number = 0): Float64Array {\r\n    const wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n        wave[i] = wave[i] > phasewidth ? 1.0 : -1.0;\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateSawWave(inverse: boolean = false): Float64Array {\r\n    const wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = ((i - (Config.sineWaveLength * 0.75) + Config.sineWaveLength) * 2.0 / Config.sineWaveLength) % 2 - 1;\r\n        wave[i] = inverse ? wave[i] * -1 : wave[i];\r\n    }\r\n    return wave;\r\n}\r\n\r\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\r\n\tlet arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\r\n\tif (arpeggioPattern != null) {\r\n\t\tif (pitchCount == 2 && useFastTwoNoteArp == false) {\r\n\t\t\tarpeggioPattern = [0, 0, 1, 1];\r\n\t\t}\r\n\t\treturn arpeggioPattern[arpeggio % arpeggioPattern.length];\r\n\t} else {\r\n\t\treturn arpeggio % pitchCount;\r\n\t}\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n\tconst dictionary: Dictionary<T> = {};\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tconst value: any = array[i];\r\n\t\tvalue.index = i;\r\n\t\tdictionary[value.name] = <T>value;\r\n\t}\r\n\tconst result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\r\n\tresult.dictionary = dictionary;\r\n\treturn result;\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap } from \"../synth/SynthConfig\";\r\n\r\n//namespace beepbox {\r\nexport interface PresetCategory extends BeepBoxOption {\r\n\treadonly presets: DictionaryArray<Preset>;\r\n}\r\n\r\nexport interface Preset extends BeepBoxOption {\r\n\treadonly isNoise?: boolean;\r\n\treadonly isMod?: boolean;\r\n\treadonly generalMidi?: boolean;\r\n\treadonly midiProgram?: number;\r\n\treadonly midiSubharmonicOctaves?: number;\r\n\treadonly customType?: InstrumentType;\r\n\treadonly settings?: any;\r\n}\r\n\r\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\nexport function prettyNumber(value: number): string {\r\n\treturn value.toFixed(2).replace(/\\.?0*$/, \"\");\r\n}\r\n\r\nexport class EditorConfig {\r\n\tpublic static readonly version: string = \"2.3\"; // Not using patch versions in display right now, maybe someday.\r\n\tpublic static readonly versionDisplayName: string = \"GoldBox \" + EditorConfig.version;\r\n\r\n\tpublic static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"chip wave\", customType: InstrumentType.chip },\r\n\t\t\t\t{ name: \"FM (expert)\", customType: InstrumentType.fm },\r\n\t\t\t\t{ name: \"basic noise\", customType: InstrumentType.noise },\r\n\t\t\t\t{ name: \"spectrum\", customType: InstrumentType.spectrum },\r\n\t\t\t\t{ name: \"drumset\", customType: InstrumentType.drumset },\r\n\t\t\t\t{ name: \"harmonics\", customType: InstrumentType.harmonics },\r\n\t\t\t\t{ name: \"pulse width\", customType: InstrumentType.pwm },\r\n\t\t\t\t{ name: \"custom chip\", customType: InstrumentType.customChipWave },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"triangle\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\r\n\t\t\t\t{ name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\r\n\t\t\t\t{ name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\r\n\t\t\t\t{ name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\r\n\t\t\t\t{ name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\r\n\t\t\t\t{ name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57] } },\r\n\t\t\t\t{ name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 86, 86, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"wave\": \"1/8 pulse\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"interval\": \"honky tonk\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 43, 43, 43, 43, 43, 29, 43, 43, 43, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"interval\": \"shimmer\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0] } },\r\n\t\t\t\t{ name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 14, 14, 14, 14, 14, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14] } },\r\n\t\t\t\t{ name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\r\n\t\t\t\t{ name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }, { \"frequency\": \"~2×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 2, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 1\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"pulseWidth\": 18, \"pulseEnvelope\": \"punch\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"distorted synth 2\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 3\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 4\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 50, \"pulseEnvelope\": \"swell 1\", \"vibrato\": \"delayed\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"transition\": \"slide\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t\t{ name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14] } },\r\n\t\t\t\t{ name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0] } },\r\n\t\t\t\t{ name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"flare 3\" }] } },\r\n\t\t\t\t{ name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"swell 2\" }, { \"frequency\": \"11×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 3\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"octave\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"tremolo1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 5, \"envelope\": \"twang 3\" }, { \"frequency\": \"11×\", \"amplitude\": 8, \"envelope\": \"tremolo5\" }] } },\r\n\t\t\t\t{ name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"tremolo1\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\r\n\t\t\t\t{ name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"flare 1\" }, { \"frequency\": \"3×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }] } },\r\n\t\t\t\t{ name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 3, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [0, 0, 0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0] } },\r\n\t\t\t\t{ name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 57, \"filterEnvelope\": \"swell 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\r\n\t\t\t\t{ name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"interval\": \"hum\", \"vibrato\": \"heavy\", \"harmonics\": [0, 0, 14, 100, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"tremolo1\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\r\n\t\t\t\t{ name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 4, \"pulseEnvelope\": \"tremolo6\", \"vibrato\": \"shaky\" } },\r\n\t\t\t\t{ name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\r\n\t\t\t\t{ name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\r\n\t\t\t\t{ name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"heavy\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t]);\r\n\r\n\tpublic static valueToPreset(presetValue: number): Preset | null {\r\n\t\tconst categoryIndex: number = presetValue >> 6;\r\n\t\tconst presetIndex: number = presetValue & 0x3F;\r\n\t\treturn EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\r\n\t}\r\n\tpublic static midiProgramToPresetValue(program: number): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic static nameToPresetValue(presetName: string): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\ninterface NumberArray {\r\n\tlength: number;\r\n\t[index: number]: number;\r\n}\r\n\r\n// A basic FFT operation scales the overall magnitude of elements by the\r\n// square root of the length of the array, √N. Performing a forward FFT and\r\n// then an inverse FFT results in the original array, but multiplied by N.\r\n// This helper function can be used to compensate for that. \r\nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tarray[i] *= factor;\r\n\t}\r\n}\r\n\r\nfunction isPowerOf2(n: number): boolean {\r\n\treturn !!n && !(n & (n - 1));\r\n}\r\n\r\nfunction countBits(n: number): number {\r\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\treturn Math.round(Math.log(n) / Math.log(2));\r\n}\r\n\r\n// Rearranges the elements of the array, swapping the element at an index\r\n// with an element at an index that is the bitwise reverse of the first\r\n// index in base 2. Useful for computing the FFT.\r\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\r\n\tconst bitCount: number = countBits(fullArrayLength);\r\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\tconst finalShift: number = 16 - bitCount;\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\tlet j: number;\r\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\tj = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;\r\n\t\tif (j > i) {\r\n\t\t\tlet temp: number = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Provided for educational purposes. Easier to read than\r\n// fastFourierTransform(), but computes the same result.\r\n// Takes two parallel arrays representing the real and imaginary elements,\r\n// respectively, and returns an array containing two new arrays, which\r\n// contain the complex result of the transform.\r\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\tconst realOut: number[] = [];\r\n\tconst imagOut: number[] = [];\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\trealOut[i] = 0.0;\r\n\t\timagOut[i] = 0.0;\r\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t}\r\n\t}\r\n\treturn [realOut, imagOut];\r\n}\r\n\r\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n// input real and imaginary arrays. Can be used for both forward and inverse\r\n// transforms: swap the order of the arguments for the inverse.\r\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\r\n\treverseIndexBits(realArray, fullArrayLength);\r\n\treverseIndexBits(imagArray, fullArrayLength);\r\n\r\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\tconst startIndex1: number = startIndex + 1;\r\n\t\tconst startIndex2: number = startIndex + 2;\r\n\t\tconst startIndex3: number = startIndex + 3;\r\n\t\tconst real0: number = realArray[startIndex];\r\n\t\tconst real1: number = realArray[startIndex1];\r\n\t\tconst real2: number = realArray[startIndex2];\r\n\t\tconst real3: number = realArray[startIndex3];\r\n\t\tconst imag0: number = imagArray[startIndex];\r\n\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\tconst realTemp0: number = real0 + real1;\r\n\t\tconst realTemp1: number = real0 - real1;\r\n\t\tconst realTemp2: number = real2 + real3;\r\n\t\tconst realTemp3: number = real2 - real3;\r\n\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\trealArray[startIndex] = realTemp0 + realTemp2;\r\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\timagArray[startIndex] = imagTemp0 + imagTemp2;\r\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t}\r\n\r\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\tconst halfLength: number = stride >>> 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tlet c: number = 1.0;\r\n\t\t\tlet s: number = 0.0;\r\n\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the Fourier transform from an array of real-valued time-domain\r\n// samples. The output is specially formatted for space efficieny: elements\r\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n// descending frequency. Overwrites the input array.\r\nexport function forwardRealFourierTransform(array: NumberArray): void {\r\n\tconst fullArrayLength: number = array.length;\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n\r\n\t// First and second pass.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\t// no imaginary elements yet since the input is fully real.\r\n\t\tconst tempA: number = real0 + real1;\r\n\t\tconst tempB: number = real2 + real3;\r\n\t\tarray[index] = tempA + tempB;\r\n\t\tarray[index1] = real0 - real1;\r\n\t\tarray[index2] = tempA - tempB;\r\n\t\tarray[index3] = real2 - real3;\r\n\t}\r\n\r\n\t// Third pass.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst imag3: number = array[index3];\r\n\t\tconst real4: number = array[index4];\r\n\t\tconst real5: number = array[index5];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\tarray[index] = real0 + real4;\r\n\t\tarray[index1] = real1 + tempA;\r\n\t\tarray[index3] = real1 - tempA;\r\n\t\tarray[index4] = real0 - real4;\r\n\t\tarray[index5] = tempB - imag3;\r\n\t\tarray[index7] = tempB + imag3;\r\n\t}\r\n\r\n\t// Handle remaining passes.\r\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\tarray[indexB0] = -imag0 - tempB;\r\n\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the inverse Fourier transform from a specially formatted array of\r\n// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n// the corresponding complex elements, representing cosine wave amplitudes in\r\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n// imaginary values, representing sine wave amplitudes in descending frequency.\r\n// Generates real-valued time-domain samples. Overwrites the input array.\r\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\t// Perform all but the last few passes in reverse.\r\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\tarray[midIndexA] *= 2;\r\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\tarray[midIndexB] *= 2;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// Commented out this block (and compensated with an extra pass above)\r\n\t// because it's slower in my testing so far.\r\n\t// Pass with stride 8.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index6: number = index + 6;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\tconst imag4: number = array[index4];\r\n\t\tconst imag5: number = array[index5];\r\n\t\tconst imag6: number = array[index6];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = real1 - real3;\r\n\t\tconst tempB: number = imag5 + imag7;\r\n\t\tarray[index ] = real0 + imag4;\r\n\t\tarray[index1] = real1 + real3;\r\n\t\tarray[index2] = real2 * 2;\r\n\t\tarray[index3] = imag7 - imag5;\r\n\t\tarray[index4] = real0 - imag4;\r\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\tarray[index6] = imag6 * 2;\r\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t}\r\n\t*/\r\n\t// The final passes with strides 4 and 2, combined into one loop.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1] * 2;\r\n\t\tconst imag2: number = array[index2];\r\n\t\tconst imag3: number = array[index3] * 2;\r\n\t\tconst tempA: number = real0 + imag2;\r\n\t\tconst tempB: number = real0 - imag2;\r\n\t\tarray[index] = tempA + real1;\r\n\t\tarray[index1] = tempA - real1;\r\n\t\tarray[index2] = tempB + imag3;\r\n\t\tarray[index3] = tempB - imag3;\r\n\t}\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}\r\n//}\r\n\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex } from \"./SynthConfig\";\r\nimport { EditorConfig } from \"../editor/EditorConfig\";\r\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\r\nimport { Deque } from \"./Deque\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        AudioContext: any;\r\n        webkitAudioContext: any;\r\n    }\r\n}\r\n\r\n//namespace beepbox {\r\n// For performance debugging:\r\n//let samplesAccumulated: number = 0;\r\n//let samplePerformance: number = 0;\r\n\r\nconst enum CharCode {\r\n    SPACE = 32,\r\n    HASH = 35,\r\n    PERCENT = 37,\r\n    AMPERSAND = 38,\r\n    PLUS = 43,\r\n    DASH = 45,\r\n    DOT = 46,\r\n    NUM_0 = 48,\r\n    NUM_1 = 49,\r\n    NUM_2 = 50,\r\n    NUM_3 = 51,\r\n    NUM_4 = 52,\r\n    NUM_5 = 53,\r\n    NUM_6 = 54,\r\n    NUM_7 = 55,\r\n    NUM_8 = 56,\r\n    NUM_9 = 57,\r\n    EQUALS = 61,\r\n    A = 65,\r\n    B = 66,\r\n    C = 67,\r\n    D = 68,\r\n    E = 69,\r\n    F = 70,\r\n    G = 71,\r\n    H = 72,\r\n    I = 73,\r\n    J = 74,\r\n    K = 75,\r\n    L = 76,\r\n    M = 77,\r\n    N = 78,\r\n    O = 79,\r\n    P = 80,\r\n    Q = 81,\r\n    R = 82,\r\n    S = 83,\r\n    T = 84,\r\n    U = 85,\r\n    V = 86,\r\n    W = 87,\r\n    X = 88,\r\n    Y = 89,\r\n    Z = 90,\r\n    UNDERSCORE = 95,\r\n    a = 97,\r\n    b = 98,\r\n    c = 99,\r\n    d = 100,\r\n    e = 101,\r\n    f = 102,\r\n    g = 103,\r\n    h = 104,\r\n    i = 105,\r\n    j = 106,\r\n    k = 107,\r\n    l = 108,\r\n    m = 109,\r\n    n = 110,\r\n    o = 111,\r\n    p = 112,\r\n    q = 113,\r\n    r = 114,\r\n    s = 115,\r\n    t = 116,\r\n    u = 117,\r\n    v = 118,\r\n    w = 119,\r\n    x = 120,\r\n    y = 121,\r\n    z = 122,\r\n    LEFT_CURLY_BRACE = 123,\r\n    RIGHT_CURLY_BRACE = 125,\r\n}\r\n\r\nconst enum SongTagCode {\r\n    beatCount = CharCode.a,\r\n    bars = CharCode.b,\r\n    vibrato = CharCode.c,\r\n    transition = CharCode.d,\r\n    loopEnd = CharCode.e,\r\n    filterCutoff = CharCode.f,\r\n    barCount = CharCode.g,\r\n    interval = CharCode.h,\r\n    instrumentCount = CharCode.i,\r\n    patternCount = CharCode.j,\r\n    key = CharCode.k,\r\n    loopStart = CharCode.l,\r\n    reverb = CharCode.m,\r\n    channelCount = CharCode.n,\r\n    channelOctave = CharCode.o,\r\n    patterns = CharCode.p,\r\n    effects = CharCode.q,\r\n    rhythm = CharCode.r,\r\n    scale = CharCode.s,\r\n    tempo = CharCode.t,\r\n    preset = CharCode.u,\r\n    volume = CharCode.v,\r\n    wave = CharCode.w,\r\n\r\n    filterResonance = CharCode.y,\r\n    filterEnvelope = CharCode.z,\r\n    algorithm = CharCode.A,\r\n    feedbackAmplitude = CharCode.B,\r\n    chord = CharCode.C,\r\n    detune = CharCode.D,\r\n    operatorEnvelopes = CharCode.E,\r\n    feedbackType = CharCode.F,\r\n    arpeggioSpeed = CharCode.G,\r\n    harmonics = CharCode.H,\r\n\r\n    squareDuty = CharCode.K,\r\n    panning = CharCode.L,\r\n    customChipWave = CharCode.M,\r\n    songTitle = CharCode.N,\r\n    limiterSettings = CharCode.O,\r\n    operatorAmplitudes = CharCode.P,\r\n    operatorFrequencies = CharCode.Q,\r\n    operatorWaves = CharCode.R,\r\n\r\n    spectrum = CharCode.S,\r\n    startInstrument = CharCode.T,\r\n    channelNames = CharCode.U,\r\n    feedbackEnvelope = CharCode.V,\r\n    pulseWidth = CharCode.W,\r\n}\r\n\r\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\r\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\r\nclass BitFieldReader {\r\n    private _bits: number[] = [];\r\n    private _readIndex: number = 0;\r\n\r\n    constructor(source: string, startIndex: number, stopIndex: number) {\r\n        for (let i: number = startIndex; i < stopIndex; i++) {\r\n            const value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n            this._bits.push((value >> 5) & 0x1);\r\n            this._bits.push((value >> 4) & 0x1);\r\n            this._bits.push((value >> 3) & 0x1);\r\n            this._bits.push((value >> 2) & 0x1);\r\n            this._bits.push((value >> 1) & 0x1);\r\n            this._bits.push(value & 0x1);\r\n        }\r\n    }\r\n\r\n    public read(bitCount: number): number {\r\n        let result: number = 0;\r\n        while (bitCount > 0) {\r\n            result = result << 1;\r\n            result += this._bits[this._readIndex++];\r\n            bitCount--;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readLongTail(minValue: number, minBits: number): number {\r\n        let result: number = minValue;\r\n        let numBits: number = minBits;\r\n        while (this._bits[this._readIndex++]) {\r\n            result += 1 << numBits;\r\n            numBits++;\r\n        }\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            if (this._bits[this._readIndex++]) {\r\n                result += 1 << numBits;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readPartDuration(): number {\r\n        return this.readLongTail(1, 3);\r\n    }\r\n\r\n    public readLegacyPartDuration(): number {\r\n        return this.readLongTail(1, 2);\r\n    }\r\n\r\n    public readPinCount(): number {\r\n        return this.readLongTail(1, 0);\r\n    }\r\n\r\n    public readPitchInterval(): number {\r\n        if (this.read(1)) {\r\n            return -this.readLongTail(1, 3);\r\n        } else {\r\n            return this.readLongTail(1, 3);\r\n        }\r\n    }\r\n}\r\n\r\nclass BitFieldWriter {\r\n    private _index: number = 0;\r\n    private _bits: number[] = [];\r\n\r\n    public clear() {\r\n        this._index = 0;\r\n    }\r\n\r\n    public write(bitCount: number, value: number): void {\r\n        bitCount--;\r\n        while (bitCount >= 0) {\r\n            this._bits[this._index++] = (value >>> bitCount) & 1;\r\n            bitCount--;\r\n        }\r\n    }\r\n\r\n    public writeLongTail(minValue: number, minBits: number, value: number): void {\r\n        if (value < minValue) throw new Error(\"value out of bounds\");\r\n        value -= minValue;\r\n        let numBits: number = minBits;\r\n        while (value >= (1 << numBits)) {\r\n            this._bits[this._index++] = 1;\r\n            value -= 1 << numBits;\r\n            numBits++;\r\n        }\r\n        this._bits[this._index++] = 0;\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            this._bits[this._index++] = (value >>> numBits) & 1;\r\n        }\r\n    }\r\n\r\n    public writePartDuration(value: number): void {\r\n        this.writeLongTail(1, 3, value);\r\n    }\r\n\r\n    public writePinCount(value: number): void {\r\n        this.writeLongTail(1, 0, value);\r\n    }\r\n\r\n    public writePitchInterval(value: number): void {\r\n        if (value < 0) {\r\n            this.write(1, 1); // sign\r\n            this.writeLongTail(1, 3, -value);\r\n        } else {\r\n            this.write(1, 0); // sign\r\n            this.writeLongTail(1, 3, value);\r\n        }\r\n    }\r\n\r\n    public concat(other: BitFieldWriter): void {\r\n        for (let i: number = 0; i < other._index; i++) {\r\n            this._bits[this._index++] = other._bits[i];\r\n        }\r\n    }\r\n\r\n    public encodeBase64(buffer: number[]): number[] {\r\n\r\n        for (let i: number = 0; i < this._index; i += 6) {\r\n            const value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\r\n            buffer.push(base64IntToCharCode[value]);\r\n        }\r\n        return buffer;\r\n    }\r\n\r\n    public lengthBase64(): number {\r\n        return Math.ceil(this._index / 6);\r\n    }\r\n}\r\n\r\nexport interface NotePin {\r\n    interval: number;\r\n    time: number;\r\n    volume: number;\r\n}\r\n\r\nexport function makeNotePin(interval: number, time: number, volume: number): NotePin {\r\n    return { interval: interval, time: time, volume: volume };\r\n}\r\n\r\nfunction clamp(min: number, max: number, val: number): number {\r\n    max = max - 1;\r\n    if (val <= max) {\r\n        if (val >= min) return val;\r\n        else return min;\r\n    } else {\r\n        return max;\r\n    }\r\n}\r\n\r\nfunction validateRange(min: number, max: number, val: number): number {\r\n    if (min <= val && val <= max) return val;\r\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\r\n}\r\n\r\nexport class Note {\r\n    public pitches: number[];\r\n    public pins: NotePin[];\r\n    public start: number;\r\n    public end: number;\r\n\r\n    public constructor(pitch: number, start: number, end: number, volume: number, fadeout: boolean = false) {\r\n        this.pitches = [pitch];\r\n        this.pins = [makeNotePin(0, 0, volume), makeNotePin(0, end - start, fadeout ? 0 : volume)];\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n\r\n    public pickMainInterval(): number {\r\n        let longestFlatIntervalDuration: number = 0;\r\n        let mainInterval: number = 0;\r\n        for (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\r\n            const pinA: NotePin = this.pins[pinIndex - 1];\r\n            const pinB: NotePin = this.pins[pinIndex];\r\n            if (pinA.interval == pinB.interval) {\r\n                const duration: number = pinB.time - pinA.time;\r\n                if (longestFlatIntervalDuration < duration) {\r\n                    longestFlatIntervalDuration = duration;\r\n                    mainInterval = pinA.interval;\r\n                }\r\n            }\r\n        }\r\n        if (longestFlatIntervalDuration == 0) {\r\n            let loudestVolume: number = 0;\r\n            for (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\r\n                const pin: NotePin = this.pins[pinIndex];\r\n                if (loudestVolume < pin.volume) {\r\n                    loudestVolume = pin.volume;\r\n                    mainInterval = pin.interval;\r\n                }\r\n            }\r\n        }\r\n        return mainInterval;\r\n    }\r\n\r\n    public clone(): Note {\r\n        const newNote: Note = new Note(-1, this.start, this.end, 6);\r\n        newNote.pitches = this.pitches.concat();\r\n        newNote.pins = [];\r\n        for (const pin of this.pins) {\r\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.volume));\r\n        }\r\n        return newNote;\r\n    }\r\n}\r\n\r\nexport class Pattern {\r\n    public notes: Note[] = [];\r\n    public instrument: number = 0;\r\n\r\n    public cloneNotes(): Note[] {\r\n        const result: Note[] = [];\r\n        for (const note of this.notes) {\r\n            result.push(note.clone());\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.notes.length = 0;\r\n        this.instrument = 0;\r\n    }\r\n}\r\n\r\nexport class Operator {\r\n    public frequency: number = 0;\r\n    public amplitude: number = 0;\r\n    public envelope: number = 0;\r\n    public waveform: number = 0;\r\n\r\n    constructor(index: number) {\r\n        this.reset(index);\r\n    }\r\n\r\n    public reset(index: number): void {\r\n        this.frequency = 0;\r\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n        this.envelope = (index == 0) ? 0 : 1;\r\n        this.waveform = 0;\r\n    }\r\n\r\n    public copy(other: Operator): void {\r\n        this.frequency = other.frequency;\r\n        this.amplitude = other.amplitude;\r\n        this.envelope = other.envelope;\r\n        this.waveform = other.waveform;\r\n    }\r\n}\r\n\r\nexport class SpectrumWave {\r\n    public spectrum: number[] = [];\r\n    private _wave: Float32Array | null = null;\r\n    private _waveIsReady: boolean = false;\r\n\r\n    constructor(isNoiseChannel: boolean) {\r\n        this.reset(isNoiseChannel);\r\n    }\r\n\r\n    public reset(isNoiseChannel: boolean): void {\r\n        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n            if (isNoiseChannel) {\r\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\r\n            } else {\r\n                const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\r\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\r\n            }\r\n        }\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public getCustomWave(lowestOctave: number): Float32Array {\r\n        if (!this._waveIsReady || this._wave == null) {\r\n            let waveLength: number = Config.chipNoiseLength;\r\n\r\n            if (this._wave == null || this._wave.length != waveLength + 1) {\r\n                this._wave = new Float32Array(waveLength + 1);\r\n            }\r\n            const wave: Float32Array = this._wave;\r\n\r\n            for (let i: number = 0; i < waveLength; i++) {\r\n                wave[i] = 0;\r\n            }\r\n\r\n            const highestOctave: number = 14;\r\n            const falloffRatio: number = 0.25;\r\n            // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\r\n            const pitchTweak: number[] = [0, 1 / 7, Math.log(5 / 4) / Math.LN2, 3 / 7, Math.log(3 / 2) / Math.LN2, 5 / 7, 6 / 7];\r\n            function controlPointToOctave(point: number): number {\r\n                return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\r\n            }\r\n\r\n            let combinedAmplitude: number = 1;\r\n            for (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\r\n                const value1: number = (i <= 0) ? 0 : this.spectrum[i - 1];\r\n                const value2: number = (i >= Config.spectrumControlPoints) ? this.spectrum[Config.spectrumControlPoints - 1] : this.spectrum[i];\r\n                const octave1: number = controlPointToOctave(i - 1);\r\n                let octave2: number = controlPointToOctave(i);\r\n                if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\r\n                if (value1 == 0 && value2 == 0) continue;\r\n\r\n                combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\r\n            }\r\n            if (this.spectrum[Config.spectrumControlPoints - 1] > 0) {\r\n                combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, this.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\r\n            }\r\n\r\n            inverseRealFourierTransform(wave, waveLength);\r\n            scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\r\n\r\n            // Duplicate the first sample at the end for easier wrap-around interpolation.\r\n            wave[waveLength] = wave[0];\r\n\r\n            this._waveIsReady = true;\r\n        }\r\n        return this._wave;\r\n    }\r\n}\r\n\r\nexport class HarmonicsWave {\r\n    public harmonics: number[] = [];\r\n    private _wave: Float32Array | null = null;\r\n    private _waveIsReady: boolean = false;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n            this.harmonics[i] = 0;\r\n        }\r\n        this.harmonics[0] = Config.harmonicsMax;\r\n        this.harmonics[3] = Config.harmonicsMax;\r\n        this.harmonics[6] = Config.harmonicsMax;\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public getCustomWave(): Float32Array {\r\n        if (!this._waveIsReady || this._wave == null) {\r\n            let waveLength: number = Config.harmonicsWavelength;\r\n            const retroWave: Float32Array = getDrumWave(0);\r\n\r\n            if (this._wave == null || this._wave.length != waveLength + 1) {\r\n                this._wave = new Float32Array(waveLength + 1);\r\n            }\r\n            const wave: Float32Array = this._wave;\r\n\r\n            for (let i: number = 0; i < waveLength; i++) {\r\n                wave[i] = 0;\r\n            }\r\n\r\n            const overallSlope: number = -0.25;\r\n            let combinedControlPointAmplitude: number = 1;\r\n\r\n            for (let harmonicIndex: number = 0; harmonicIndex < Config.harmonicsRendered; harmonicIndex++) {\r\n                const harmonicFreq: number = harmonicIndex + 1;\r\n                let controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? this.harmonics[harmonicIndex] : this.harmonics[Config.harmonicsControlPoints - 1];\r\n                if (harmonicIndex >= Config.harmonicsControlPoints) {\r\n                    controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (Config.harmonicsRendered - Config.harmonicsControlPoints);\r\n                }\r\n                const normalizedValue: number = controlValue / Config.harmonicsMax;\r\n                let amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\r\n                if (harmonicIndex < Config.harmonicsControlPoints) {\r\n                    combinedControlPointAmplitude += amplitude;\r\n                }\r\n                amplitude *= Math.pow(harmonicFreq, overallSlope);\r\n\r\n                // Multiple all the sine wave amplitudes by 1 or -1 based on the LFSR\r\n                // retro wave (effectively random) to avoid egregiously tall spikes.\r\n                amplitude *= retroWave[harmonicIndex + 589];\r\n\r\n                wave[waveLength - harmonicFreq] = amplitude;\r\n            }\r\n\r\n            inverseRealFourierTransform(wave, waveLength);\r\n\r\n            // Limit the maximum wave amplitude.\r\n            const mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\r\n\r\n            // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n            let cumulative: number = 0;\r\n            let wavePrev: number = 0;\r\n            for (let i: number = 0; i < wave.length; i++) {\r\n                cumulative += wavePrev;\r\n                wavePrev = wave[i] * mult;\r\n                wave[i] = cumulative;\r\n            }\r\n            // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n            wave[waveLength] = wave[0];\r\n\r\n            this._waveIsReady = true;\r\n        }\r\n        return this._wave;\r\n    }\r\n}\r\n\r\nexport class Instrument {\r\n    public type: InstrumentType = InstrumentType.chip;\r\n    public preset: number = 0;\r\n    public chipWave: number = 2;\r\n    public chipNoise: number = 1;\r\n    public filterCutoff: number = 12;\r\n    public filterResonance: number = 0;\r\n    public filterEnvelope: number = 1;\r\n    public transition: number = 1;\r\n    public vibrato: number = 0;\r\n    public vibratoDepth: number = 0;\r\n    public vibratoSpeed: number = 10;\r\n    public vibratoDelay: number = 0;\r\n    public vibratoType: number = 0;\r\n    public interval: number = 0;\r\n    public effects: number = 0;\r\n    public chord: number = 1;\r\n    public volume: number = 0;\r\n    public pan: number = Config.panCenter;\r\n    public panDelay: number = 10;\r\n    public arpeggioSpeed: number = 12;\r\n    public fastTwoNoteArp: boolean = false;\r\n    public tieNoteTransition: boolean = false;\r\n    public clicklessTransition: boolean = false;\r\n    public detune: number = 0;\r\n    public pulseWidth: number = Config.pulseWidthRange;\r\n    public pulseEnvelope: number = 1;\r\n    public algorithm: number = 0;\r\n    public feedbackType: number = 0;\r\n    public feedbackAmplitude: number = 0;\r\n    public feedbackEnvelope: number = 1;\r\n    public LFOtime: number = 0;\r\n    public nextLFOtime: number = 0;\r\n    public arpTime: number = 0;\r\n    public customChipWave: Float64Array = new Float64Array(64);\r\n    public customChipWaveIntegral: Float64Array = new Float64Array(65); // One extra element for wrap-around in chipSynth.\r\n    public readonly operators: Operator[] = [];\r\n    public readonly spectrumWave: SpectrumWave;\r\n    public readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\r\n    public readonly drumsetEnvelopes: number[] = [];\r\n    public readonly drumsetSpectrumWaves: SpectrumWave[] = [];\r\n    public modChannels: number[] = [];\r\n    public modStatuses: ModStatus[] = [];\r\n    public modInstruments: number[] = [];\r\n    public modSettings: ModSetting[] = [];\r\n\r\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\r\n\r\n        if (isModChannel) {\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                this.modChannels.push(0);\r\n                this.modStatuses.push(ModStatus.msNone);\r\n                this.modInstruments.push(0);\r\n                this.modSettings.push(ModSetting.mstNone);\r\n            }\r\n        }\r\n\r\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            this.operators[i] = new Operator(i);\r\n        }\r\n        for (let i: number = 0; i < Config.drumCount; i++) {\r\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n        }\r\n\r\n        for (let i = 0; i < 64; i++) {\r\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\r\n        }\r\n\r\n        let sum: number = 0.0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            sum += this.customChipWave[i];\r\n        }\r\n        const average: number = sum / this.customChipWave.length;\r\n\r\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n        let cumulative: number = 0;\r\n        let wavePrev: number = 0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            cumulative += wavePrev;\r\n            wavePrev = this.customChipWave[i] - average;\r\n            this.customChipWaveIntegral[i] = cumulative;\r\n        }\r\n\r\n        // 65th, last sample is for anti-aliasing\r\n        this.customChipWaveIntegral[64] = 0.0;\r\n\r\n    }\r\n\r\n    public setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n        // Mod channels are forced to one type.\r\n        if (isModChannel) type = InstrumentType.mod;\r\n        this.type = type;\r\n        this.preset = type;\r\n        this.volume = 0;\r\n        this.pan = Config.panCenter;\r\n        this.panDelay = 10;\r\n        this.arpeggioSpeed = 12;\r\n        this.detune = 0;\r\n        this.tieNoteTransition = false;\r\n        this.clicklessTransition = false;\r\n        switch (type) {\r\n            case InstrumentType.chip:\r\n                this.chipWave = 2;\r\n                this.filterCutoff = 6;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 2;\r\n                break;\r\n            case InstrumentType.customChipWave:\r\n                this.chipWave = 2;\r\n                this.filterCutoff = 6;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 2;\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n                break;\r\n            case InstrumentType.fm:\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.effects = 1;\r\n                this.chord = 3;\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = 1;\r\n                this.algorithm = 0;\r\n                this.feedbackType = 0;\r\n                this.feedbackAmplitude = 0;\r\n                this.feedbackEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                for (let i: number = 0; i < this.operators.length; i++) {\r\n                    this.operators[i].reset(i);\r\n                }\r\n                break;\r\n            case InstrumentType.noise:\r\n                this.chipNoise = 1;\r\n                this.transition = 1;\r\n                this.effects = 0;\r\n                this.chord = 2;\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                break;\r\n            case InstrumentType.spectrum:\r\n                this.transition = 1;\r\n                this.effects = 1;\r\n                this.chord = 0;\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.spectrumWave.reset(isNoiseChannel);\r\n                break;\r\n            case InstrumentType.drumset:\r\n                this.effects = 0;\r\n                for (let i: number = 0; i < Config.drumCount; i++) {\r\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\r\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n                    }\r\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\r\n                }\r\n                break;\r\n            case InstrumentType.harmonics:\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 0;\r\n                this.harmonicsWave.reset();\r\n                break;\r\n            case InstrumentType.pwm:\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 2;\r\n                this.pulseWidth = Config.pulseWidthRange;\r\n                this.pulseEnvelope = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                break;\r\n            case InstrumentType.mod:\r\n                this.transition = 0;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 0;\r\n                this.chord = 0;\r\n                this.modChannels = [];\r\n                this.modStatuses = [];\r\n                this.modInstruments = [];\r\n                this.modSettings = [];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels.push(0);\r\n                    this.modStatuses.push(ModStatus.msNone);\r\n                    this.modInstruments.push(0);\r\n                    this.modSettings.push(ModSetting.mstNone);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Unrecognized instrument type: \" + type);\r\n        }\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const instrumentObject: any = {\r\n            \"type\": Config.instrumentTypeNames[this.type],\r\n            \"volume\": this.volume,\r\n            \"pan\": (this.pan - Config.panCenter) * 100 / Config.panCenter,\r\n            \"panDelay\": this.panDelay,\r\n            \"arpeggioSpeed\": this.arpeggioSpeed,\r\n            \"fastTwoNoteArp\": this.fastTwoNoteArp,\r\n            \"tieNoteTransition\": this.tieNoteTransition,\r\n            \"clicklessTransition\": this.clicklessTransition,\r\n            \"vibrato\": this.vibrato,\r\n            \"vibratoDepth\": this.vibratoDepth,\r\n            \"vibratoDelay\": this.vibratoDelay,\r\n            \"vibratoSpeed\": this.vibratoSpeed,\r\n            \"vibratoType\": this.vibratoType,\r\n            \"detune\": this.detune,\r\n            \"effects\": Config.effectsNames[this.effects],\r\n        };\r\n\r\n        if (this.preset != this.type) {\r\n            instrumentObject[\"preset\"] = this.preset;\r\n        }\r\n\r\n        if (this.type != InstrumentType.drumset) {\r\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\r\n            instrumentObject[\"chord\"] = this.getChord().name;\r\n            instrumentObject[\"filterCutoffHz\"] = Math.round(Config.filterCutoffMaxHz * Math.pow(2.0, this.getFilterCutoffOctaves()));\r\n            instrumentObject[\"filterResonance\"] = Math.round(100 * this.filterResonance / (Config.filterResonanceRange - 1));\r\n            instrumentObject[\"filterEnvelope\"] = this.getFilterEnvelope().name;\r\n        }\r\n\r\n        if (this.type == InstrumentType.noise) {\r\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            instrumentObject[\"spectrum\"] = [];\r\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\r\n            }\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            instrumentObject[\"drums\"] = [];\r\n            for (let j: number = 0; j < Config.drumCount; j++) {\r\n                const spectrum: number[] = [];\r\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\r\n                }\r\n                instrumentObject[\"drums\"][j] = {\r\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\r\n                    \"spectrum\": spectrum,\r\n                };\r\n            }\r\n        } else if (this.type == InstrumentType.chip) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            instrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n        } else if (this.type == InstrumentType.customChipWave) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            instrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\r\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\r\n            for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\r\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\r\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\r\n            }\r\n\r\n            instrumentObject[\"customChipWaveIntegral\"][64] = 0;\r\n        } else if (this.type == InstrumentType.pwm) {\r\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n            instrumentObject[\"pulseEnvelope\"] = Config.envelopes[this.pulseEnvelope].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            instrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"harmonics\"] = [];\r\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\r\n            }\r\n        } else if (this.type == InstrumentType.fm) {\r\n            const operatorArray: Object[] = [];\r\n            for (const operator of this.operators) {\r\n                operatorArray.push({\r\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\r\n                    \"amplitude\": operator.amplitude,\r\n                    \"envelope\": Config.envelopes[operator.envelope].name,\r\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\r\n                });\r\n            }\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\r\n            instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\r\n            instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n            instrumentObject[\"feedbackEnvelope\"] = Config.envelopes[this.feedbackEnvelope].name;\r\n            instrumentObject[\"operators\"] = operatorArray;\r\n        } else if (this.type == InstrumentType.mod) {\r\n            instrumentObject[\"modChannels\"] = [];\r\n            instrumentObject[\"modInstruments\"] = [];\r\n            instrumentObject[\"modSettings\"] = [];\r\n            instrumentObject[\"modStatuses\"] = [];\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\r\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\r\n                instrumentObject[\"modSettings\"][mod] = this.modSettings[mod];\r\n                instrumentObject[\"modStatuses\"][mod] = this.modStatuses[mod];\r\n            }\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type\");\r\n        }\r\n        return instrumentObject;\r\n    }\r\n\r\n    public fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean): void {\r\n        if (instrumentObject == undefined) instrumentObject = {};\r\n\r\n        let type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\r\n        if (type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\r\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\r\n\r\n        if (instrumentObject[\"preset\"] != undefined) {\r\n            this.preset = instrumentObject[\"preset\"] >>> 0;\r\n        }\r\n\r\n        if (instrumentObject[\"volume\"] != undefined) {\r\n            this.volume = clamp(-Config.volumeRange / 2, Config.volumeRange / 2, instrumentObject[\"volume\"] | 0);\r\n        } else {\r\n            this.volume = 0;\r\n        }\r\n\r\n        if (instrumentObject[\"pan\"] != undefined) {\r\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\r\n        } else {\r\n            this.pan = Config.panCenter;\r\n        }\r\n\r\n        if (instrumentObject[\"panDelay\"] != undefined) {\r\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\r\n        } else {\r\n            this.panDelay = 10;\r\n        }\r\n\r\n        if (instrumentObject[\"detune\"] != undefined) {\r\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\r\n        }\r\n        else {\r\n            this.detune = 0;\r\n        }\r\n\r\n        const oldTransitionNames: Dictionary<number> = { \"binary\": 0, \"sudden\": 1, \"smooth\": 2 };\r\n        const transitionObject = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so try that too.\r\n        this.transition = oldTransitionNames[transitionObject] != undefined ? oldTransitionNames[transitionObject] : Config.transitions.findIndex(transition => transition.name == transitionObject);\r\n        if (this.transition == -1) this.transition = 1;\r\n\r\n        this.effects = Config.effectsNames.indexOf(instrumentObject[\"effects\"]);\r\n        if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\r\n\r\n        if (instrumentObject[\"filterCutoffHz\"] != undefined) {\r\n            this.filterCutoff = clamp(0, Config.filterCutoffRange, Math.round((Config.filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / Config.filterCutoffMaxHz) / Math.LN2));\r\n        } else {\r\n            this.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\r\n        }\r\n        if (instrumentObject[\"filterResonance\"] != undefined) {\r\n            this.filterResonance = clamp(0, Config.filterResonanceRange, Math.round((Config.filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\r\n        } else {\r\n            this.filterResonance = 0;\r\n        }\r\n        this.filterEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"filterEnvelope\"]);\r\n        if (this.filterEnvelope == -1) this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\r\n        if (instrumentObject[\"filter\"] != undefined) {\r\n            const legacyToCutoff: number[] = [20, 12, 6, 0, 16, 10, 4];\r\n            const legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n            const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n            const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\r\n            let legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\r\n            if (legacyFilter == -1) legacyFilter = 0;\r\n            this.filterCutoff = legacyToCutoff[legacyFilter];\r\n            this.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n            this.filterResonance = 0;\r\n        }\r\n\r\n        const legacyEffectNames: ReadonlyArray<string> = [\"none\", \"vibrato light\", \"vibrato delayed\", \"vibrato heavy\"];\r\n        if (this.type == InstrumentType.noise) {\r\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            if (this.chipNoise == -1) this.chipNoise = 1;\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 2;\r\n\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            if (instrumentObject[\"spectrum\"] != undefined) {\r\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                    this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\r\n                }\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 0;\r\n\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            if (instrumentObject[\"drums\"] != undefined) {\r\n                for (let j: number = 0; j < Config.drumCount; j++) {\r\n                    const drum: any = instrumentObject[\"drums\"][j];\r\n                    if (drum == undefined) continue;\r\n\r\n                    if (drum[\"filterEnvelope\"] != undefined) {\r\n                        this.drumsetEnvelopes[j] = Config.envelopes.findIndex(envelope => envelope.name == drum[\"filterEnvelope\"]);\r\n                        if (this.drumsetEnvelopes[j] == -1) this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                    }\r\n                    if (drum[\"spectrum\"] != undefined) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            if (instrumentObject[\"harmonics\"] != undefined) {\r\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                    this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\r\n                }\r\n            }\r\n\r\n            if (instrumentObject[\"interval\"] != undefined) {\r\n                this.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 0;\r\n        } else if (this.type == InstrumentType.pwm) {\r\n            if (instrumentObject[\"pulseWidth\"] != undefined) {\r\n                this.pulseWidth = clamp(0, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\r\n            } else {\r\n                this.pulseWidth = Config.pulseWidthRange;\r\n            }\r\n\r\n            if (instrumentObject[\"pulseEnvelope\"] != undefined) {\r\n                this.pulseEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"pulseEnvelope\"]);\r\n                if (this.pulseEnvelope == -1) this.pulseEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 0;\r\n        } else if (this.type == InstrumentType.chip) {\r\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\r\n            this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            if (this.chipWave == -1) this.chipWave = 1;\r\n\r\n            if (instrumentObject[\"interval\"] != undefined) {\r\n                this.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            } else if (instrumentObject[\"chorus\"] != undefined) {\r\n                const legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n                this.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            } else if (instrumentObject[\"effect\"] != undefined) {\r\n                this.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n                if (this.vibrato == -1) this.vibrato = 0;\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 2;\r\n\r\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n            if (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n                this.interval = 2;\r\n                this.chord = 3;\r\n            }\r\n        } else if (this.type == InstrumentType.fm) {\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            } else if (instrumentObject[\"effect\"] != undefined) {\r\n                this.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n                if (this.vibrato == -1) this.vibrato = 0;\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 3;\r\n\r\n            this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\r\n            if (this.algorithm == -1) this.algorithm = 0;\r\n            this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\r\n            if (this.feedbackType == -1) this.feedbackType = 0;\r\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\r\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\r\n            } else {\r\n                this.feedbackAmplitude = 0;\r\n            }\r\n\r\n            const legacyEnvelopeNames: Dictionary<number> = { \"pluck 1\": 6, \"pluck 2\": 7, \"pluck 3\": 8 };\r\n            this.feedbackEnvelope = legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] != undefined ? legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"feedbackEnvelope\"]);\r\n            if (this.feedbackEnvelope == -1) this.feedbackEnvelope = 0;\r\n\r\n            for (let j: number = 0; j < Config.operatorCount; j++) {\r\n                const operator: Operator = this.operators[j];\r\n                let operatorObject: any = undefined;\r\n                if (instrumentObject[\"operators\"]) operatorObject = instrumentObject[\"operators\"][j];\r\n                if (operatorObject == undefined) operatorObject = {};\r\n\r\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\r\n                if (operator.frequency == -1) operator.frequency = 0;\r\n                if (operatorObject[\"amplitude\"] != undefined) {\r\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\r\n                } else {\r\n                    operator.amplitude = 0;\r\n                }\r\n                if (operatorObject[\"waveform\"] != undefined) {\r\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\r\n                } else {\r\n                    operator.waveform = 0;\r\n                }\r\n                operator.envelope = legacyEnvelopeNames[operatorObject[\"envelope\"]] != undefined ? legacyEnvelopeNames[operatorObject[\"envelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == operatorObject[\"envelope\"]);\r\n                if (operator.envelope == -1) operator.envelope = 0;\r\n            }\r\n        } else if (this.type == InstrumentType.customChipWave) {\r\n            if (instrumentObject[\"interval\"] != undefined) {\r\n                this.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            } else if (instrumentObject[\"chorus\"] != undefined) {\r\n                const legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n                this.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            } else if (instrumentObject[\"effect\"] != undefined) {\r\n                this.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n                if (this.vibrato == -1) this.vibrato = 0;\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 2;\r\n\r\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n            if (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n                this.interval = 2;\r\n                this.chord = 3;\r\n            }\r\n\r\n            if (instrumentObject[\"customChipWave\"]) {\r\n\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\r\n                }\r\n\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n            }\r\n\r\n        } else if (this.type == InstrumentType.mod) {\r\n            if (instrumentObject[\"modChannels\"] != undefined) {\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\r\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\r\n                    this.modSettings[mod] = instrumentObject[\"modSettings\"][mod];\r\n                    this.modStatuses[mod] = instrumentObject[\"modStatuses\"][mod];\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type.\");\r\n        }\r\n\r\n        if (this.type != InstrumentType.mod) {\r\n            // Arpeggio speed\r\n            if (this.chord == 2 && instrumentObject[\"arpeggioSpeed\"] != undefined) {\r\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\r\n            }\r\n            else {\r\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\r\n            }\r\n\r\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\r\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\r\n            }\r\n            else {\r\n                this.fastTwoNoteArp = useFastTwoNoteArp;\r\n            }\r\n\r\n            if (instrumentObject[\"tieNoteTransition\"] != undefined) {\r\n                this.tieNoteTransition = instrumentObject[\"tieNoteTransition\"];\r\n            }\r\n            else {\r\n                this.tieNoteTransition = false;\r\n            }\r\n\r\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\r\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\r\n            }\r\n            else {\r\n                this.clicklessTransition = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static frequencyFromPitch(pitch: number): number {\r\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\r\n    }\r\n\r\n    public static drumsetIndexReferenceDelta(index: number): number {\r\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\r\n    }\r\n\r\n    private static _drumsetIndexToSpectrumOctave(index: number) {\r\n        return 15 + Math.log(Instrument.drumsetIndexReferenceDelta(index)) / Math.LN2;\r\n    }\r\n\r\n    public warmUp(): void {\r\n        this.LFOtime = 0;\r\n        this.nextLFOtime = 0;\r\n        this.arpTime = 0;\r\n        if (this.type == InstrumentType.noise) {\r\n            getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            this.harmonicsWave.getCustomWave();\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            this.spectrumWave.getCustomWave(8);\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            for (let i: number = 0; i < Config.drumCount; i++) {\r\n                this.drumsetSpectrumWaves[i].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    public getDrumWave(): Float32Array {\r\n        if (this.type == InstrumentType.noise) {\r\n            return getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            return this.spectrumWave.getCustomWave(8);\r\n        } else {\r\n            throw new Error(\"Unhandled instrument type in getDrumWave\");\r\n        }\r\n    }\r\n\r\n    public getDrumsetWave(pitch: number): Float32Array {\r\n        if (this.type == InstrumentType.drumset) {\r\n            return this.drumsetSpectrumWaves[pitch].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(pitch));\r\n        } else {\r\n            throw new Error(\"Unhandled instrument type in getDrumWave\");\r\n        }\r\n    }\r\n\r\n    public getTransition(): Transition {\r\n        return this.type == InstrumentType.drumset ? Config.transitions.dictionary[\"hard fade\"] :\r\n            this.type == InstrumentType.mod ? Config.transitions.dictionary[\"seamless\"] : Config.transitions[this.transition];\r\n    }\r\n    public getChord(): Chord {\r\n        return this.type == InstrumentType.drumset ? Config.chords.dictionary[\"harmony\"] : Config.chords[this.chord];\r\n    }\r\n    public getFilterCutoffOctaves(): number {\r\n        return this.type == InstrumentType.drumset ? 0 : (this.filterCutoff - (Config.filterCutoffRange - 1)) * 0.5;\r\n    }\r\n    public getFilterIsFirstOrder(): boolean {\r\n        return this.type == InstrumentType.drumset ? false : this.filterResonance == 0;\r\n    }\r\n    public getFilterResonance(): number {\r\n        return this.type == InstrumentType.drumset ? 1 : this.filterResonance;\r\n    }\r\n    public getFilterEnvelope(): Envelope {\r\n        if (this.type == InstrumentType.drumset) throw new Error(\"Can't getFilterEnvelope() for drumset.\");\r\n        return Config.envelopes[this.filterEnvelope];\r\n    }\r\n    public getDrumsetEnvelope(pitch: number): Envelope {\r\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\r\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\r\n    }\r\n}\r\n\r\nexport enum ModStatus {\r\n    msForPitch = 0,\r\n    msForNoise = 1,\r\n    msForSong = 2,\r\n    msNone = 3,\r\n}\r\n\r\nexport enum ModSetting {\r\n    mstNone = 0,\r\n    mstSongVolume = 1,\r\n    mstTempo = 2,\r\n    mstReverb = 3,\r\n    mstNextBar = 4,\r\n    mstInsVolume = 5,\r\n    mstPan = 6,\r\n    mstFilterCut = 7,\r\n    mstFilterPeak = 8,\r\n    mstFMSlider1 = 9,\r\n    mstFMSlider2 = 10,\r\n    mstFMSlider3 = 11,\r\n    mstFMSlider4 = 12,\r\n    mstFMFeedback = 13,\r\n    mstPulseWidth = 14,\r\n    mstDetune = 15,\r\n    mstVibratoDepth = 16,\r\n    mstSongDetune = 17,\r\n    mstVibratoSpeed = 18,\r\n    mstVibratoDelay = 19,\r\n    mstArpeggioSpeed = 20,\r\n    mstPanDelay = 21,\r\n    mstResetArpeggio = 22,\r\n    mstMaxValue = 23,\r\n}\r\n\r\nexport class Channel {\r\n    public octave: number = 0;\r\n    public readonly instruments: Instrument[] = [];\r\n    public readonly patterns: Pattern[] = [];\r\n    public readonly bars: number[] = [];\r\n    public muted: boolean = false;\r\n    public name: string = \"\";\r\n}\r\n\r\nexport class Song {\r\n    private static readonly _format: string = \"BeepBox\";\r\n    private static readonly _oldestBeepboxVersion: number = 2;\r\n    private static readonly _latestBeepboxVersion: number = 8;\r\n    private static readonly _oldestJummBoxVersion: number = 1;\r\n    private static readonly _latestJummBoxVersion: number = 4;\r\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox.\r\n    private static readonly _variant = 0x6A; //\"j\" ~ jummbox\r\n\r\n    public title: string;\r\n    public scale: number;\r\n    public scaleCustom: boolean[] = [];\r\n    public key: number;\r\n    public tempo: number;\r\n    public reverb: number;\r\n    public beatsPerBar: number;\r\n    public barCount: number;\r\n    public patternsPerChannel: number;\r\n    public rhythm: number;\r\n    public instrumentsPerChannel: number;\r\n    public loopStart: number;\r\n    public loopLength: number;\r\n    public pitchChannelCount: number;\r\n    public noiseChannelCount: number;\r\n    public modChannelCount: number;\r\n    public readonly channels: Channel[] = [];\r\n    public limitDecay: number = 4.0;\r\n    public limitRise: number = 4000.0;\r\n    public compressionThreshold: number = 1.0;\r\n    public limitThreshold: number = 1.0;\r\n    public compressionRatio: number = 1.0;\r\n    public limitRatio: number = 1.0;\r\n    public masterGain: number = 1.0;\r\n    public inVolumeCap: number = 0.0;\r\n    public outVolumeCap: number = 0.0;\r\n\r\n    // Maximum value possible for the mod (total number of possible positions)\r\n    public mstMaxVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n        [ModSetting.mstNone, 6],\r\n        [ModSetting.mstSongVolume, 100],\r\n        [ModSetting.mstTempo, Config.tempoMax - Config.tempoMin],\r\n        [ModSetting.mstReverb, Config.reverbRange - 1],\r\n        [ModSetting.mstNextBar, 1],\r\n        [ModSetting.mstInsVolume, Config.volumeRange],\r\n        [ModSetting.mstPan, Config.panMax],\r\n        [ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n        [ModSetting.mstFilterPeak, Config.filterResonanceRange - 1],\r\n        [ModSetting.mstFMSlider1, 15],\r\n        [ModSetting.mstFMSlider2, 15],\r\n        [ModSetting.mstFMSlider3, 15],\r\n        [ModSetting.mstFMSlider4, 15],\r\n        [ModSetting.mstFMFeedback, 15],\r\n        [ModSetting.mstPulseWidth, Config.pulseWidthRange],\r\n        [ModSetting.mstDetune, Config.detuneMax - Config.detuneMin],\r\n        [ModSetting.mstVibratoDepth, 50],\r\n        [ModSetting.mstSongDetune, Config.songDetuneMax - Config.songDetuneMin],\r\n        [ModSetting.mstVibratoSpeed, 30],\r\n        [ModSetting.mstVibratoDelay, 50],\r\n        [ModSetting.mstArpeggioSpeed, 50],\r\n        [ModSetting.mstPanDelay, 20],\r\n        [ModSetting.mstResetArpeggio, 1],\r\n        [ModSetting.mstMaxValue, 6],\r\n    ]\r\n    );\r\n\r\n    // When creating a new note, this is the value to set a mod note to (generally the most \"neutral\" value possible)\r\n    public mstNewNoteVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n        [ModSetting.mstNone, 6],\r\n        [ModSetting.mstSongVolume, 100],\r\n        [ModSetting.mstTempo, Math.ceil((Config.tempoMax - Config.tempoMin) / 2)],\r\n        [ModSetting.mstReverb, 0],\r\n        [ModSetting.mstNextBar, 1],\r\n        [ModSetting.mstInsVolume, Math.ceil(Config.volumeRange / 2)],\r\n        [ModSetting.mstPan, Math.ceil(Config.panMax / 2)],\r\n        [ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n        [ModSetting.mstFilterPeak, 0],\r\n        [ModSetting.mstFMSlider1, 15],\r\n        [ModSetting.mstFMSlider2, 15],\r\n        [ModSetting.mstFMSlider3, 15],\r\n        [ModSetting.mstFMSlider4, 15],\r\n        [ModSetting.mstFMFeedback, 15],\r\n        [ModSetting.mstPulseWidth, Math.ceil(Config.pulseWidthRange)],\r\n        [ModSetting.mstDetune, Math.ceil((Config.detuneMax - Config.detuneMin) / 2)],\r\n        [ModSetting.mstVibratoDepth, 0],\r\n        [ModSetting.mstSongDetune, Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2)],\r\n        [ModSetting.mstVibratoSpeed, 0],\r\n        [ModSetting.mstVibratoDelay, 0],\r\n        [ModSetting.mstArpeggioSpeed, 10],\r\n        [ModSetting.mstPanDelay, 10],\r\n        [ModSetting.mstResetArpeggio, 1],\r\n        [ModSetting.mstMaxValue, 6],\r\n    ])\r\n\r\n    constructor(string?: string) {\r\n        if (string != undefined) {\r\n            this.fromBase64String(string);\r\n        } else {\r\n            this.initToDefault(true);\r\n        }\r\n    }\r\n\r\n    public modValueToReal(value: number, setting: ModSetting): number {\r\n        switch (setting) {\r\n            case ModSetting.mstTempo:\r\n                value += Config.tempoMin;\r\n                break;\r\n            case ModSetting.mstInsVolume:\r\n                value -= Config.volumeRange / 2.0;\r\n                break;\r\n            case ModSetting.mstDetune:\r\n                value += Config.detuneMin;\r\n                break;\r\n            case ModSetting.mstSongDetune:\r\n                value += Config.songDetuneMin;\r\n                break;\r\n            case ModSetting.mstFilterCut:\r\n            case ModSetting.mstFilterPeak:\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstPan:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstNextBar:\r\n            case ModSetting.mstFMSlider1:\r\n            case ModSetting.mstFMSlider2:\r\n            case ModSetting.mstFMSlider3:\r\n            case ModSetting.mstFMSlider4:\r\n            case ModSetting.mstFMFeedback:\r\n            case ModSetting.mstPulseWidth:\r\n            case ModSetting.mstVibratoDepth:\r\n            case ModSetting.mstVibratoSpeed:\r\n            case ModSetting.mstVibratoDelay:\r\n            case ModSetting.mstArpeggioSpeed:\r\n            case ModSetting.mstPanDelay:\r\n            case ModSetting.mstResetArpeggio:\r\n            case ModSetting.mstNone:\r\n            default:\r\n                break;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public isSettingForSong(setting: ModSetting): boolean {\r\n        switch (setting) {\r\n            case ModSetting.mstTempo:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstNextBar:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    public realToModValue(value: number, setting: ModSetting): number {\r\n        switch (setting) {\r\n            case ModSetting.mstTempo:\r\n                value -= Config.tempoMin;\r\n                break;\r\n            case ModSetting.mstInsVolume:\r\n                value += Config.volumeRange / 2.0;\r\n                break;\r\n            case ModSetting.mstDetune:\r\n                value -= Config.detuneMin;\r\n                break;\r\n            case ModSetting.mstSongDetune:\r\n                value -= Config.songDetuneMin;\r\n                break;\r\n            case ModSetting.mstFilterCut:\r\n            case ModSetting.mstFilterPeak:\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstPan:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstNextBar:\r\n            case ModSetting.mstFMSlider1:\r\n            case ModSetting.mstFMSlider2:\r\n            case ModSetting.mstFMSlider3:\r\n            case ModSetting.mstFMSlider4:\r\n            case ModSetting.mstFMFeedback:\r\n            case ModSetting.mstPulseWidth:\r\n            case ModSetting.mstVibratoDepth:\r\n            case ModSetting.mstVibratoSpeed:\r\n            case ModSetting.mstVibratoDelay:\r\n            case ModSetting.mstArpeggioSpeed:\r\n            case ModSetting.mstPanDelay:\r\n            case ModSetting.mstResetArpeggio:\r\n            case ModSetting.mstNone:\r\n            default:\r\n                break;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    // Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\r\n    public getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let cap: number | undefined = this.mstNewNoteVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n            \r\n            // For tempo, actually use user defined tempo\r\n            if (this.channels[modChannel].instruments[modInstrument].modSettings[modCount] == ModSetting.mstTempo) {\r\n                cap = this.realToModValue(this.tempo, ModSetting.mstTempo);\r\n            }\r\n            \r\n            if (cap != undefined)\r\n                return cap;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n\r\n    public getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let cap: number | undefined = this.mstMaxVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n            if (cap != undefined)\r\n                return cap;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n    public getVolumeCapForSetting = (isMod: boolean, modSetting: ModSetting): number => {\r\n        if (!isMod)\r\n            return 6;\r\n        else {\r\n            let cap: number | undefined = this.mstMaxVols.get(modSetting);\r\n            if (cap != undefined)\r\n                return cap;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n    public getChannelCount(): number {\r\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\r\n    }\r\n\r\n    public getChannelIsNoise(channel: number): boolean {\r\n        return (channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public getChannelIsMod(channel: number): boolean {\r\n        return (channel >= this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public initToDefault(andResetChannels: boolean = true): void {\r\n        this.scale = 0;\r\n        this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];\r\n        this.key = 0;\r\n        this.loopStart = 0;\r\n        this.loopLength = 4;\r\n        this.tempo = 150;\r\n        this.reverb = 0;\r\n        this.beatsPerBar = 8;\r\n        this.barCount = 16;\r\n        this.patternsPerChannel = 8;\r\n        this.rhythm = 1;\r\n        this.instrumentsPerChannel = 1;\r\n\r\n        this.title = \"Unnamed\";\r\n        document.title = EditorConfig.versionDisplayName;\r\n\r\n        if (andResetChannels) {\r\n            this.pitchChannelCount = 3;\r\n            this.noiseChannelCount = 1;\r\n            this.modChannelCount = 0;\r\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                if (this.channels.length <= channelIndex) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                const channel: Channel = this.channels[channelIndex];\r\n                channel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0, 0, ...]; Descending octaves with drums at zero in last channel and onward.\r\n\r\n                for (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\r\n                    if (channel.patterns.length <= pattern) {\r\n                        channel.patterns[pattern] = new Pattern();\r\n                    } else {\r\n                        channel.patterns[pattern].reset();\r\n                    }\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n                const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n                for (let instrument = 0; instrument < this.instrumentsPerChannel; instrument++) {\r\n                    if (channel.instruments.length <= instrument) {\r\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\r\n                    }\r\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\r\n                }\r\n                channel.instruments.length = this.instrumentsPerChannel;\r\n\r\n                for (let bar = 0; bar < this.barCount; bar++) {\r\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n            }\r\n            this.channels.length = this.getChannelCount();\r\n        }\r\n    }\r\n\r\n    public toBase64String(): string {\r\n        let bits: BitFieldWriter;\r\n        let buffer: number[] = [];\r\n\r\n        buffer.push(Song._variant);\r\n        buffer.push(base64IntToCharCode[Song._latestJummBoxVersion]);\r\n\r\n        buffer.push(SongTagCode.songTitle);\r\n\r\n        // Length of the song name string\r\n        var encodedSongTitle: string = encodeURIComponent(this.title);\r\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\r\n\r\n        // Actual encoded string follows\r\n        for (let i: number = 0; i < encodedSongTitle.length; i++) {\r\n            buffer.push(encodedSongTitle.charCodeAt(i));\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\r\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\r\n            for (var i = 1; i < Config.pitchesPerOctave; i++) {\r\n                buffer.push(base64IntToCharCode[this.scaleCustom[i]?1:0]) // ineffiecent? yes, all we're going to do for now? hell yes\r\n            }\r\n        }\r\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key]);\r\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\r\n        buffer.push(SongTagCode.reverb, base64IntToCharCode[this.reverb]);\r\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[this.instrumentsPerChannel - 1]);\r\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\r\n\r\n        // Push limiter settings, but only if they aren't the default!\r\n        buffer.push(SongTagCode.limiterSettings);\r\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\r\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\r\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\r\n        }\r\n        else {\r\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelNames);\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            // Length of the channel name string\r\n            var encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\r\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\r\n\r\n            // Actual encoded string follows\r\n            for (let i: number = 0; i < encodedChannelName.length; i++) {\r\n                buffer.push(encodedChannelName.charCodeAt(i));\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelOctave);\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            buffer.push(base64IntToCharCode[this.channels[channel].octave]);\r\n        }\r\n\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                const instrument: Instrument = this.channels[channel].instruments[i];\r\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\r\n                buffer.push(SongTagCode.panning, base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\r\n                buffer.push(base64IntToCharCode[instrument.panDelay]); // Piggybacks after panning to reduce song tag code usage :P\r\n                buffer.push(SongTagCode.detune, base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3f]);\r\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\r\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects]);\r\n\r\n\r\n                if (instrument.type != InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n                    // Transition info follows transition song tag\r\n                    buffer.push(base64IntToCharCode[+instrument.tieNoteTransition]);\r\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\r\n                    buffer.push(SongTagCode.filterCutoff, base64IntToCharCode[instrument.filterCutoff]);\r\n                    buffer.push(SongTagCode.filterResonance, base64IntToCharCode[instrument.filterResonance]);\r\n                    buffer.push(SongTagCode.filterEnvelope, base64IntToCharCode[instrument.filterEnvelope]);\r\n                    buffer.push(SongTagCode.chord, base64IntToCharCode[instrument.chord]);\r\n                }\r\n\r\n                if (instrument.type == InstrumentType.chip) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.fm) {\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                    buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n                    buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n                    buffer.push(SongTagCode.feedbackEnvelope, base64IntToCharCode[instrument.feedbackEnvelope]);\r\n\r\n                    buffer.push(SongTagCode.operatorFrequencies);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorAmplitudes);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorEnvelopes);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].envelope]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorWaves);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\r\n                    }\r\n                } else if (instrument.type == InstrumentType.customChipWave) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n                    buffer.push(SongTagCode.customChipWave);\r\n                    // Push custom wave values\r\n                    for (let j: number = 0; j < 64; j++) {\r\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\r\n                    }\r\n                } else if (instrument.type == InstrumentType.noise) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.spectrum) {\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.filterEnvelope);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\r\n                    }\r\n\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\r\n                        }\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.harmonics) {\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n                    buffer.push(SongTagCode.harmonics);\r\n                    const harmonicsBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\r\n                    }\r\n                    harmonicsBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.pwm) {\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth], base64IntToCharCode[instrument.pulseEnvelope]);\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.mod) {\r\n                    // Handled down below. Could be moved, but meh.\r\n                }\r\n                else {\r\n                    throw new Error(\"Unknown instrument type.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.bars);\r\n        bits = new BitFieldWriter();\r\n        let neededBits: number = 0;\r\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) for (let i: number = 0; i < this.barCount; i++) {\r\n            bits.write(neededBits, this.channels[channel].bars[i]);\r\n        }\r\n        bits.encodeBase64(buffer);\r\n\r\n        buffer.push(SongTagCode.patterns);\r\n        bits = new BitFieldWriter();\r\n        const shapeBits: BitFieldWriter = new BitFieldWriter();\r\n        let neededInstrumentBits: number = 0;\r\n        while ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n            const isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n            // Some info about modulator settings immediately follows in mod channels.\r\n            if (isModChannel) {\r\n                for (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n                    let instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        const modStatus: ModStatus = instrument.modStatuses[mod];\r\n                        const modChannel: number = instrument.modChannels[mod];\r\n                        const modInstrument: number = instrument.modInstruments[mod];\r\n                        const modSetting: number = instrument.modSettings[mod];\r\n\r\n                        bits.write(2, modStatus);\r\n\r\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n                        if (modStatus == ModStatus.msForPitch || modStatus == ModStatus.msForNoise) {\r\n                            bits.write(8, modChannel);\r\n                            bits.write(neededInstrumentBits, modInstrument);\r\n                        }\r\n\r\n                        // Mod setting is only used if the status isn't \"none\".\r\n                        if (modStatus != ModStatus.msNone) {\r\n                            bits.write(6, modSetting);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * 12;\r\n            let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : 12) + octaveOffset;\r\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n            const recentShapes: any[] = [];\r\n\r\n            for (let i: number = 0; i < recentPitches.length; i++) {\r\n                recentPitches[i] += octaveOffset;\r\n            }\r\n            for (const pattern of this.channels[channel].patterns) {\r\n                bits.write(neededInstrumentBits, pattern.instrument);\r\n\r\n                if (pattern.notes.length > 0) {\r\n                    bits.write(1, 1);\r\n\r\n                    let curPart: number = 0;\r\n                    for (const note of pattern.notes) {\r\n\r\n                        // For mod channels, a negative offset may be necessary.\r\n                        if (note.start < curPart && isModChannel) {\r\n                            bits.write(2, 0); // rest, then...\r\n                            bits.write(1, 1); // negative offset\r\n                            bits.writePartDuration(curPart - note.start);\r\n                        }\r\n\r\n                        if (note.start > curPart) {\r\n                            bits.write(2, 0); // rest, then...\r\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\r\n                            bits.writePartDuration(note.start - curPart);\r\n                        }\r\n\r\n                        shapeBits.clear();\r\n\r\n                        // Old format was:\r\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n                        // New format is:\r\n                        //      0: 1 pitch\r\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                        if (note.pitches.length == 1) {\r\n                            shapeBits.write(1, 0);\r\n                        } else {\r\n                            shapeBits.write(1, 1);\r\n                            shapeBits.write(3, note.pitches.length - 2);\r\n                        }\r\n\r\n                        shapeBits.writePinCount(note.pins.length - 1);\r\n\r\n                        if (!isModChannel) {\r\n                            shapeBits.write(3, note.pins[0].volume); // volume\r\n                        }\r\n                        else {\r\n                            shapeBits.write(9, note.pins[0].volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n                        }\r\n\r\n                        let shapePart: number = 0;\r\n                        let startPitch: number = note.pitches[0];\r\n                        let currentPitch: number = startPitch;\r\n                        const pitchBends: number[] = [];\r\n                        for (let i: number = 1; i < note.pins.length; i++) {\r\n                            const pin: NotePin = note.pins[i];\r\n                            const nextPitch: number = startPitch + pin.interval;\r\n                            if (currentPitch != nextPitch) {\r\n                                shapeBits.write(1, 1);\r\n                                pitchBends.push(nextPitch);\r\n                                currentPitch = nextPitch;\r\n                            } else {\r\n                                shapeBits.write(1, 0);\r\n                            }\r\n                            shapeBits.writePartDuration(pin.time - shapePart);\r\n                            shapePart = pin.time;\r\n\r\n                            if (!isModChannel) {\r\n                                shapeBits.write(3, pin.volume); // volume\r\n                            }\r\n                            else {\r\n                                shapeBits.write(9, pin.volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n                            }\r\n                        }\r\n\r\n                        const shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\r\n                        const shapeIndex: number = recentShapes.indexOf(shapeString);\r\n                        if (shapeIndex == -1) {\r\n                            bits.write(2, 1); // new shape\r\n                            bits.concat(shapeBits);\r\n                        } else {\r\n                            bits.write(1, 1); // old shape\r\n                            bits.writeLongTail(0, 0, shapeIndex);\r\n                            recentShapes.splice(shapeIndex, 1);\r\n                        }\r\n                        recentShapes.unshift(shapeString);\r\n                        if (recentShapes.length > 10) recentShapes.pop();\r\n\r\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\r\n                        for (let i: number = 0; i < allPitches.length; i++) {\r\n                            const pitch: number = allPitches[i];\r\n                            const pitchIndex: number = recentPitches.indexOf(pitch);\r\n                            if (pitchIndex == -1) {\r\n                                let interval: number = 0;\r\n                                let pitchIter: number = lastPitch;\r\n                                if (pitchIter < pitch) {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter++;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n                                    }\r\n                                } else {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter--;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n                                    }\r\n                                }\r\n                                bits.write(1, 0);\r\n                                bits.writePitchInterval(interval);\r\n                            } else {\r\n                                bits.write(1, 1);\r\n                                bits.write(4, pitchIndex);\r\n                                recentPitches.splice(pitchIndex, 1);\r\n                            }\r\n                            recentPitches.unshift(pitch);\r\n                            if (recentPitches.length > 16) recentPitches.pop();\r\n\r\n                            if (i == note.pitches.length - 1) {\r\n                                lastPitch = note.pitches[0];\r\n                            } else {\r\n                                lastPitch = pitch;\r\n                            }\r\n                        }\r\n                        curPart = note.end;\r\n                    }\r\n\r\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n                        bits.write(2, 0); // rest, then...\r\n                        if (isModChannel) bits.write(1, 0); // positive offset\r\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\r\n                    }\r\n                } else {\r\n                    bits.write(1, 0);\r\n                }\r\n\r\n            }\r\n        }\r\n        let stringLength: number = bits.lengthBase64();\r\n        let digits: number[] = [];\r\n        while (stringLength > 0) {\r\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n            stringLength = stringLength >> 6;\r\n        }\r\n        buffer.push(base64IntToCharCode[digits.length]);\r\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n        bits.encodeBase64(buffer);\r\n\r\n        const maxApplyArgs: number = 64000;\r\n        if (buffer.length < maxApplyArgs) {\r\n            // Note: Function.apply may break for long argument lists.\r\n            return String.fromCharCode.apply(null, buffer);\r\n        } else {\r\n            let result: string = \"\";\r\n            for (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\r\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    public fromBase64String(compressed: string): void {\r\n        if (compressed == null || compressed == \"\") {\r\n            this.initToDefault(true);\r\n            return;\r\n        }\r\n        let charIndex: number = 0;\r\n        // skip whitespace.\r\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n        // skip hash mark.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n        // if it starts with curly brace, treat it as JSON.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\r\n            return;\r\n        }\r\n\r\n        const variantTest: number = compressed.charCodeAt(charIndex);\r\n        var variant: string = \"beepbox\";\r\n\r\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n        if (variantTest == 0x6A) { //\"j\"\r\n            variant = \"jummbox\";\r\n            charIndex++;\r\n        }\r\n\r\n        const version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n        if (variant == \"beepbox\" && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n        if (variant == \"jummbox\" && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\r\n\r\n        const beforeTwo: boolean = version < 2;\r\n        const beforeThree: boolean = version < 3;\r\n        const beforeFour: boolean = version < 4;\r\n        const beforeFive: boolean = version < 5;\r\n        const beforeSix: boolean = version < 6;\r\n        const beforeSeven: boolean = version < 7;\r\n        const beforeEight: boolean = version < 8;\r\n        this.initToDefault(variant == \"beepbox\" && beforeSix);\r\n\r\n        if (beforeThree && variant == \"beepbox\") {\r\n            // Originally, the only instrument transition was \"seamless\" and the only drum wave was \"retro\".\r\n            for (const channel of this.channels) channel.instruments[0].transition = 0;\r\n            this.channels[3].instruments[0].chipNoise = 0;\r\n        }\r\n\r\n        let instrumentChannelIterator: number = 0;\r\n        let instrumentIndexIterator: number = -1;\r\n        let toSetOctaves: number[] = [];\r\n        let command: number;\r\n        let channel: number;\r\n        let useSlowerArpSpeed: boolean = false;\r\n        let useFastTwoNoteArp: boolean = false;\r\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\r\n            case SongTagCode.songTitle: {\r\n                // Length of song name string\r\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n                charIndex += songNameLength;\r\n            } break;\r\n            case SongTagCode.channelCount: {\r\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                if (variant == \"beepbox\" || beforeTwo) {\r\n                    // No mod channel support before jummbox v2\r\n                    this.modChannelCount = 0;\r\n                }\r\n                else {\r\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\r\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\r\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\r\n\r\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                this.channels.length = this.getChannelCount();\r\n            } break;\r\n            case SongTagCode.scale: {\r\n                this.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                // All the scales were jumbled around by Jummbox. Just convert to free.\r\n                if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\r\n                    for (var i = 1; i < Config.pitchesPerOctave; i++) {\r\n                        this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1; // ineffiecent? yes, all we're going to do for now? hell yes\r\n                    }\r\n                }\r\n                if (variant == \"beepbox\") this.scale = 0;\r\n            } break;\r\n            case SongTagCode.key: {\r\n                if (beforeSeven && variant == \"beepbox\") {\r\n                    this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else {\r\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.loopStart: {\r\n                if (beforeFive && variant == \"beepbox\") {\r\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n            } break;\r\n            case SongTagCode.loopEnd: {\r\n                if (beforeFive && variant == \"beepbox\") {\r\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n            } break;\r\n            case SongTagCode.tempo: {\r\n                if (beforeFour && variant == \"beepbox\") {\r\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\r\n            } break;\r\n            case SongTagCode.reverb: {\r\n                if (variant == \"beepbox\") {\r\n                    this.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 8;\r\n                    this.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n                }\r\n                else {\r\n                    this.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n                }\r\n            } break;\r\n            case SongTagCode.beatCount: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n            } break;\r\n            case SongTagCode.barCount: {\r\n                const barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\r\n                for (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n                    for (let bar = this.channels[channel].bars.length; bar < this.barCount; bar++) {\r\n                        this.channels[channel].bars[bar] = (bar < 4) ? 1 : 0;\r\n                    }\r\n                    this.channels[channel].bars.length = this.barCount;\r\n                }\r\n            } break;\r\n            case SongTagCode.patternCount: {\r\n                if (variant == \"beepbox\" && beforeEight) {\r\n                    this.patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                } else {\r\n                    this.patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, this.patternsPerChannel);\r\n                for (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n                    for (let pattern = this.channels[channel].patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n                        this.channels[channel].patterns[pattern] = new Pattern();\r\n                    }\r\n                    this.channels[channel].patterns.length = this.patternsPerChannel;\r\n                }\r\n            } break;\r\n            case SongTagCode.instrumentCount: {\r\n                const instrumentsPerChannel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                this.instrumentsPerChannel = validateRange(Config.instrumentsPerChannelMin, Config.instrumentsPerChannelMax, instrumentsPerChannel);\r\n                for (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n                    const isNoiseChannel: boolean = channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount;\r\n                    const isModChannel: boolean = channel >= this.pitchChannelCount + this.noiseChannelCount;\r\n                    for (let instrumentIndex = this.channels[channel].instruments.length; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n                        this.channels[channel].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\r\n                    }\r\n                    this.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n                    if (beforeSix && variant == \"beepbox\") {\r\n                        for (let instrumentIndex = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n                            this.channels[channel].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\r\n                        }\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.rhythm: {\r\n                this.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                // Port all arpeggio speeds over to match what they were, before arpeggio speed was decoupled from rhythm.\r\n                if (variant == \"jummbox\" && beforeThree || variant == \"beepbox\") {\r\n                    // These are all the rhythms that had 4 ticks/arpeggio instead of 3.\r\n                    if (this.rhythm == 0 || this.rhythm == 2) {\r\n                        useSlowerArpSpeed = true;\r\n                    }\r\n                    // Use faster two note arp on these rhythms\r\n                    if (this.rhythm >= 2) {\r\n                        useFastTwoNoteArp = true;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.channelOctave: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    // Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n                    this.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    toSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n                } else {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        // Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n                        this.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        toSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.startInstrument: {\r\n                instrumentIndexIterator++;\r\n                if (instrumentIndexIterator >= this.instrumentsPerChannel) {\r\n                    instrumentChannelIterator++;\r\n                    instrumentIndexIterator = 0;\r\n                }\r\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const instrumentType: number = clamp(0, InstrumentType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\r\n                if (useSlowerArpSpeed) {\r\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\r\n                }\r\n                if (useFastTwoNoteArp) {\r\n                    instrument.fastTwoNoteArp = true;\r\n                }\r\n            } break;\r\n            case SongTagCode.preset: {\r\n                const presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\r\n            } break;\r\n            case SongTagCode.wave: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    const channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channel].instruments[0].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            if (channel >= this.pitchChannelCount) {\r\n                                this.channels[channel].instruments[i].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            } else {\r\n                                this.channels[channel].instruments[i].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                    }\r\n                } else {\r\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.filterCutoff: {\r\n                if (beforeSeven && variant == \"beepbox\") {\r\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n                    const legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\r\n                    if (beforeThree && variant == \"beepbox\") {\r\n                        channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const instrument: Instrument = this.channels[channel].instruments[0];\r\n                        const legacyFilter: number = [1, 3, 4, 5][clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        instrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n                        instrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n                        instrument.filterResonance = 0;\r\n                    } else if (beforeSix && variant == \"beepbox\") {\r\n                        for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                            for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                                const instrument: Instrument = this.channels[channel].instruments[i];\r\n                                const legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                                if (channel < this.pitchChannelCount) {\r\n                                    instrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n                                    instrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n                                    instrument.filterResonance = 0;\r\n                                } else {\r\n                                    instrument.filterCutoff = 10;\r\n                                    instrument.filterEnvelope = 1;\r\n                                    instrument.filterResonance = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        const legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n                        instrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n                        instrument.filterResonance = 0;\r\n                    }\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.filterCutoff = clamp(0, Config.filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.filterResonance: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].filterResonance = clamp(0, Config.filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.filterEnvelope: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.drumset) {\r\n                    for (let i: number = 0; i < Config.drumCount; i++) {\r\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                } else {\r\n                    instrument.filterEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.pulseWidth: {\r\n                if (variant == \"beepbox\") {\r\n                    // Convert back from beepbox's weird pulse width storage formula, rounding. The \"7\" in there is the old\r\n                    // piece of the formula \"beepbox.Config.pulseWidthRange - 1\".\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pulseWidth = Math.round(clamp(0, Config.pulseWidthRange + 1, Math.pow(0.5, (7 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 0.5) * 50));\r\n                    instrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pulseWidth = clamp(0, Config.pulseWidthRange + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.transition: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channel].instruments[0].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            this.channels[channel].instruments[i].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                } else if (beforeFour || variant == \"beepbox\") {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].tieNoteTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                }\r\n            } break;\r\n            case SongTagCode.vibrato: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    const legacyEffects: number[] = [0, 3, 2, 0];\r\n                    const legacyEnvelopes: number[] = [1, 1, 1, 13];\r\n                    const channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument: Instrument = this.channels[channel].instruments[0];\r\n                    instrument.vibrato = legacyEffects[effect];\r\n                    instrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n                        ? legacyEnvelopes[effect]\r\n                        : instrument.filterEnvelope;\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                    const legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[channel].instruments[i];\r\n                            instrument.vibrato = legacyEffects[effect];\r\n                            instrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n                                ? legacyEnvelopes[effect]\r\n                                : instrument.filterEnvelope;\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                    const legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.vibrato = legacyEffects[effect];\r\n                    instrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n                        ? legacyEnvelopes[effect]\r\n                        : instrument.filterEnvelope;\r\n                } else {\r\n                    const vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.vibrato = vibrato;\r\n                    // Custom vibrato\r\n                    if (vibrato == Config.vibratos.length) {\r\n                        instrument.vibratoDepth = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDepth)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\r\n                        instrument.vibratoSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.vibratoDelay = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDelay)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    // Enforce standard vibrato settings\r\n                    else {\r\n                        instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n                        instrument.vibratoSpeed = 10; // Normal speed\r\n                        instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayParts;\r\n                        instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n                    }\r\n                }\r\n\r\n            } break;\r\n            case SongTagCode.arpeggioSpeed: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                instrument.arpeggioSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstArpeggioSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\r\n            } break;\r\n            case SongTagCode.interval: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channel].instruments[0].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            let interval: number = clamp(0, Config.intervals.length, originalValue);\r\n                            if (originalValue == 8) {\r\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                                interval = 2;\r\n                                this.channels[channel].instruments[i].chord = 3;\r\n                            }\r\n                            this.channels[channel].instruments[i].interval = interval;\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    let interval: number = clamp(0, Config.intervals.length, originalValue);\r\n                    if (originalValue == 8) {\r\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                        interval = 2;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\r\n                    }\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = interval;\r\n                } else {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.chord: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.effects: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].effects = clamp(0, Config.effectsNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.volume: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const instrument: Instrument = this.channels[channel].instruments[0];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            const instrument: Instrument = this.channels[channel].instruments[i];\r\n                            instrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (variant == \"beepbox\") {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    // Beepbox v7's volume range is 0-7 (0 is max, 7 is mute)\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\r\n                }\r\n                else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    // Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\r\n                }\r\n            } break;\r\n            case SongTagCode.panning: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                if (variant == \"beepbox\") {\r\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n                    instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\r\n                }\r\n                else {\r\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n\r\n                // Now, pan delay follows on new versions of jummbox.\r\n                if (variant == \"jummbox\" && !beforeThree)\r\n                    instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n            } break;\r\n            case SongTagCode.detune: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) + Config.detuneMin);\r\n            } break;\r\n            case SongTagCode.customChipWave: {\r\n                let instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                // Pop custom wave values\r\n                for (let j: number = 0; j < 64; j++) {\r\n                    instrument.customChipWave[j]\r\n                        = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    sum += instrument.customChipWave[i];\r\n                }\r\n                const average: number = sum / instrument.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = instrument.customChipWave[i] - average;\r\n                    instrument.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                instrument.customChipWaveIntegral[64] = 0.0;\r\n\r\n            } break;\r\n            case SongTagCode.limiterSettings: {\r\n                let nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                // Check if limiter settings are used... if not, restore to default\r\n                if (nextValue == 0x3f) {\r\n                    // Limiter isn't used\r\n                    this.compressionRatio = 1.0;\r\n                    this.limitRatio = 1.0;\r\n                    this.limitRise = 4000.0;\r\n                    this.limitDecay = 4.0;\r\n                    this.limitThreshold = 1.0;\r\n                    this.compressionThreshold = 1.0;\r\n                    this.masterGain = 1.0;\r\n                }\r\n                else {\r\n                    // Limiter is used, grab values\r\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\r\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\r\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\r\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\r\n                }\r\n            } break;\r\n            case SongTagCode.channelNames: {\r\n                for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\r\n                    var channelNameLength;\r\n                    if (beforeFour)\r\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\r\n                    else\r\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\r\n\r\n                    charIndex += channelNameLength;\r\n                }\r\n            } break;\r\n            case SongTagCode.algorithm: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackType: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackAmplitude: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackEnvelope: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.operatorFrequencies: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorAmplitudes: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorEnvelopes: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].envelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorWaves: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.spectrum: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.spectrum) {\r\n                    const byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                    }\r\n                    instrument.spectrumWave.markCustomWaveDirty();\r\n                    charIndex += byteCount;\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    const byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                        }\r\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n                    }\r\n                    charIndex += byteCount;\r\n                } else {\r\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\r\n                }\r\n            } break;\r\n            case SongTagCode.harmonics: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\r\n                }\r\n                instrument.harmonicsWave.markCustomWaveDirty();\r\n                charIndex += byteCount;\r\n            } break;\r\n            case SongTagCode.bars: {\r\n                let subStringLength: number;\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    subStringLength = Math.ceil(barCount * 0.5);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let i: number = 0; i < barCount; i++) {\r\n                        this.channels[channel].bars[i] = bits.read(3) + 1;\r\n                    }\r\n                } else if (beforeFive && variant == \"beepbox\") {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channel].bars[i] = bits.read(neededBits) + 1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channel].bars[i] = bits.read(neededBits);\r\n                        }\r\n                    }\r\n                }\r\n                charIndex += subStringLength;\r\n            } break;\r\n            case SongTagCode.patterns: {\r\n                let bitStringLength: number = 0;\r\n                let channel: number;\r\n                let largerChords: boolean = !((beforeFour && variant == \"jummbox\") || variant == \"beepbox\");\r\n                let recentPitchBitLength: number = ( largerChords ? 4 : 3 );\r\n                let recentPitchLength: number = ( largerChords ? 16 : 8 );\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default.\r\n                    charIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    bitStringLength = bitStringLength << 6;\r\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    channel = 0;\r\n                    let bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    while (bitStringLengthLength > 0) {\r\n                        bitStringLength = bitStringLength << 6;\r\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        bitStringLengthLength--;\r\n                    }\r\n                }\r\n\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\r\n                charIndex += bitStringLength;\r\n\r\n                let neededInstrumentBits: number = 0;\r\n                while ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n                while (true) {\r\n                    const isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n                    const isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n                    // Some info about modulator settings immediately follows in mod channels.\r\n                    if (isModChannel) {\r\n                        for (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n                            let instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                instrument.modStatuses[mod] = bits.read(2);\r\n\r\n                                // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n                                if (instrument.modStatuses[mod] == ModStatus.msForPitch || instrument.modStatuses[mod] == ModStatus.msForNoise) {\r\n\r\n                                    // Clamp to pitch/noise max\r\n                                    if (instrument.modStatuses[mod] == ModStatus.msForPitch) {\r\n                                        instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + 1, bits.read(8));\r\n                                    }\r\n                                    else {\r\n                                        instrument.modChannels[mod] = clamp(0, this.noiseChannelCount + 1, bits.read(8));\r\n                                    }\r\n\r\n                                    instrument.modInstruments[mod] = clamp(0, this.instrumentsPerChannel + 1, bits.read(neededInstrumentBits));\r\n                                }\r\n\r\n                                // Mod setting is only used if the status isn't \"none\".\r\n                                if (instrument.modStatuses[mod] != ModStatus.msNone) {\r\n                                    instrument.modSettings[mod] = bits.read(6);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * 12;\r\n                    let note: Note | null = null;\r\n                    let pin: NotePin | null = null;\r\n                    let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : 12) + octaveOffset;\r\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n                    const recentShapes: any[] = [];\r\n                    for (let i: number = 0; i < recentPitches.length; i++) {\r\n                        recentPitches[i] += octaveOffset;\r\n                    }\r\n                    for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                        const newPattern: Pattern = this.channels[channel].patterns[i];\r\n                        newPattern.reset();\r\n                        newPattern.instrument = bits.read(neededInstrumentBits);\r\n\r\n                        if (!(variant == \"beepbox\" && beforeThree) && bits.read(1) == 0) continue;\r\n\r\n                        let curPart: number = 0;\r\n                        const newNotes: Note[] = newPattern.notes;\r\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\r\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\r\n                            const useOldShape: boolean = bits.read(1) == 1;\r\n                            let newNote: boolean = false;\r\n                            let shapeIndex: number = 0;\r\n                            if (useOldShape) {\r\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\r\n                            } else {\r\n                                newNote = bits.read(1) == 1;\r\n                            }\r\n\r\n                            if (!useOldShape && !newNote) {\r\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\r\n                                if (isModChannel) {\r\n                                    const isBackwards: boolean = bits.read(1) == 1;\r\n                                    const restLength: number = bits.readPartDuration();\r\n                                    if (isBackwards) {\r\n                                        curPart -= restLength;\r\n                                    }\r\n                                    else {\r\n                                        curPart += restLength;\r\n                                    }\r\n                                } else {\r\n                                    const restLength: number = (beforeSeven && variant == \"beepbox\")\r\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                        : bits.readPartDuration();\r\n                                    curPart += restLength;\r\n\r\n                                }\r\n                            } else {\r\n                                let shape: any;\r\n                                let pinObj: any;\r\n                                let pitch: number;\r\n                                if (useOldShape) {\r\n                                    shape = recentShapes[shapeIndex];\r\n                                    recentShapes.splice(shapeIndex, 1);\r\n                                } else {\r\n                                    shape = {};\r\n\r\n                                    if (!largerChords) {\r\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\r\n                                        shape.pitchCount = 1;\r\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n                                    }\r\n                                    else {\r\n                                        // New format is:\r\n                                        //      0: 1 pitch\r\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                                        if (bits.read(1) == 1) {\r\n                                            shape.pitchCount = bits.read(3) + 2;\r\n                                        }\r\n                                        else {\r\n                                            shape.pitchCount = 1;\r\n                                        }\r\n                                    }\r\n                                    shape.pinCount = bits.readPinCount();\r\n\r\n                                    if (variant == \"beepbox\") {\r\n                                        shape.initialVolume = bits.read(2) * 2;\r\n                                    } else if (!isModChannel) {\r\n                                        shape.initialVolume = bits.read(3);\r\n                                    } else {\r\n                                        shape.initialVolume = bits.read(9);\r\n                                    }\r\n\r\n                                    shape.pins = [];\r\n                                    shape.length = 0;\r\n                                    shape.bendCount = 0;\r\n                                    for (let j: number = 0; j < shape.pinCount; j++) {\r\n                                        pinObj = {};\r\n                                        pinObj.pitchBend = bits.read(1) == 1;\r\n                                        if (pinObj.pitchBend) shape.bendCount++;\r\n                                        shape.length += (beforeSeven && variant == \"beepbox\")\r\n                                            ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                            : bits.readPartDuration();\r\n                                        pinObj.time = shape.length;\r\n\r\n                                        if (variant == \"beepbox\") {\r\n                                            pinObj.volume = bits.read(2) * 2;\r\n                                        } else if (!isModChannel) {\r\n                                            pinObj.volume = bits.read(3);\r\n                                        }\r\n                                        else {\r\n                                            pinObj.volume = bits.read(9);\r\n                                        }\r\n                                        shape.pins.push(pinObj);\r\n                                    }\r\n                                }\r\n                                recentShapes.unshift(shape);\r\n                                if (recentShapes.length > 10) recentShapes.pop();\r\n\r\n                                note = new Note(0, curPart, curPart + shape.length, shape.initialVolume);\r\n                                note.pitches = [];\r\n                                note.pins.length = 1;\r\n                                const pitchBends: number[] = [];\r\n                                for (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n                                    const useOldPitch: boolean = bits.read(1) == 1;\r\n                                    if (!useOldPitch) {\r\n                                        const interval: number = bits.readPitchInterval();\r\n                                        pitch = lastPitch;\r\n                                        let intervalIter: number = interval;\r\n                                        while (intervalIter > 0) {\r\n                                            pitch++;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\r\n                                            intervalIter--;\r\n                                        }\r\n                                        while (intervalIter < 0) {\r\n                                            pitch--;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\r\n                                            intervalIter++;\r\n                                        }\r\n                                    } else {\r\n                                        const pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\r\n                                        pitch = recentPitches[pitchIndex];\r\n                                        recentPitches.splice(pitchIndex, 1);\r\n                                    }\r\n\r\n                                    recentPitches.unshift(pitch);\r\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\r\n\r\n                                    if (j < shape.pitchCount) {\r\n                                        note.pitches.push(pitch);\r\n                                    } else {\r\n                                        pitchBends.push(pitch);\r\n                                    }\r\n\r\n                                    if (j == shape.pitchCount - 1) {\r\n                                        lastPitch = note.pitches[0];\r\n                                    } else {\r\n                                        lastPitch = pitch;\r\n                                    }\r\n                                }\r\n\r\n                                pitchBends.unshift(note.pitches[0]);\r\n\r\n                                for (const pinObj of shape.pins) {\r\n                                    if (pinObj.pitchBend) pitchBends.shift();\r\n                                    pin = makeNotePin(pitchBends[0] - note.pitches[0], pinObj.time, pinObj.volume);\r\n                                    note.pins.push(pin);\r\n                                }\r\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\r\n                                newNotes.push(note);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (beforeThree && variant == \"beepbox\") {\r\n                        break;\r\n                    } else {\r\n                        channel++;\r\n                        if (channel >= this.getChannelCount()) break;\r\n                    }\r\n                } // while (true)\r\n            } break;\r\n            default: {\r\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1));\r\n            } break;\r\n        }\r\n\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            if (toSetOctaves[channel] != null) {\r\n                this.channels[channel].octave = toSetOctaves[channel];\r\n            }\r\n        }\r\n    }\r\n\r\n    public toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n        const channelArray: Object[] = [];\r\n\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            const instrumentArray: Object[] = [];\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n            const isModChannel: boolean = this.getChannelIsMod(channel);\r\n            for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                instrumentArray.push(this.channels[channel].instruments[i].toJsonObject());\r\n            }\r\n\r\n            const patternArray: Object[] = [];\r\n            for (const pattern of this.channels[channel].patterns) {\r\n                const noteArray: Object[] = [];\r\n                for (const note of pattern.notes) {\r\n                    let volumeCap: number = this.getVolumeCapForSetting(isModChannel, this.channels[channel].instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n                    const pointArray: Object[] = [];\r\n                    for (const pin of note.pins) {\r\n                        let useVol: number = isModChannel ? Math.round(pin.volume) : Math.round(pin.volume * 100 / volumeCap);\r\n                        pointArray.push({\r\n                            \"tick\": (pin.time + note.start) * Config.rhythms[this.rhythm].stepsPerBeat / Config.partsPerBeat,\r\n                            \"pitchBend\": pin.interval,\r\n                            \"volume\": useVol,\r\n                            \"forMod\": isModChannel,\r\n                        });\r\n                    }\r\n\r\n                    noteArray.push({\r\n                        \"pitches\": note.pitches,\r\n                        \"points\": pointArray,\r\n                    });\r\n                }\r\n\r\n                patternArray.push({\r\n                    \"instrument\": pattern.instrument + 1,\r\n                    \"notes\": noteArray,\r\n                });\r\n            }\r\n\r\n            const sequenceArray: number[] = [];\r\n            if (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n                sequenceArray.push(this.channels[channel].bars[i]);\r\n            }\r\n            for (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n                sequenceArray.push(this.channels[channel].bars[i]);\r\n            }\r\n            if (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n                sequenceArray.push(this.channels[channel].bars[i]);\r\n            }\r\n\r\n            channelArray.push({\r\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\r\n                \"octaveScrollBar\": this.channels[channel].octave,\r\n                \"instruments\": instrumentArray,\r\n                \"patterns\": patternArray,\r\n                \"sequence\": sequenceArray,\r\n            });\r\n        }\r\n\r\n        return {\r\n            \"name\": this.title,\r\n            \"format\": Song._format,\r\n            \"version\": Song._latestJummBoxVersion,\r\n            \"scale\": Config.scales[this.scale].name,\r\n            \"customScale\": this.scaleCustom,\r\n            \"key\": Config.keys[this.key].name,\r\n            \"introBars\": this.loopStart,\r\n            \"loopBars\": this.loopLength,\r\n            \"beatsPerBar\": this.beatsPerBar,\r\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\r\n            \"beatsPerMinute\": this.tempo,\r\n            \"reverb\": this.reverb,\r\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\r\n            //\"instrumentsPerChannel\": this.instrumentsPerChannel, //derive this from instrument arrays?\r\n            \"channels\": channelArray,\r\n        };\r\n    }\r\n\r\n    public fromJsonObject(jsonObject: any): void {\r\n        this.initToDefault(true);\r\n        if (!jsonObject) return;\r\n\r\n        //const version: number = jsonObject[\"version\"] | 0;\r\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\r\n\r\n        if (jsonObject[\"name\"] != undefined) {\r\n            this.title = jsonObject[\"name\"];\r\n        }\r\n\r\n        this.scale = 0; // default to free.\r\n        if (jsonObject[\"scale\"] != undefined) {\r\n            const oldScaleNames: Dictionary<string> = {\r\n                \"romani :)\": \"dbl harmonic :)\",\r\n                \"romani :(\": \"dbl harmonic :(\",\r\n                \"enigma\": \"strange\",\r\n            };\r\n            const scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\r\n            const scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\r\n            if (scale != -1) this.scale = scale;\r\n            if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\r\n                if (jsonObject[\"customScale\"] != undefined) {\r\n                    for (var i of jsonObject[\"customScale\"].keys()) {\r\n                        this.scaleCustom[i] = jsonObject[\"customScale\"][i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"key\"] != undefined) {\r\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\r\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\r\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\r\n                const key: string = jsonObject[\"key\"];\r\n                const letter: string = key.charAt(0).toUpperCase();\r\n                const symbol: string = key.charAt(1).toLowerCase();\r\n                const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\r\n                const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\r\n                let index: number | undefined = letterMap[letter];\r\n                const offset: number | undefined = accidentalMap[symbol];\r\n                if (index != undefined) {\r\n                    if (offset != undefined) index += offset;\r\n                    if (index < 0) index += 12;\r\n                    index = index % 12;\r\n                    this.key = index;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\r\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"reverb\"] != undefined) {\r\n            this.reverb = clamp(0, Config.reverbRange, jsonObject[\"reverb\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\r\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\r\n        }\r\n\r\n        let importedPartsPerBeat: number = 4;\r\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\r\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\r\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\r\n            if (this.rhythm == -1) {\r\n                this.rhythm = 1;\r\n            }\r\n        }\r\n\r\n        let maxInstruments: number = 1;\r\n        let maxPatterns: number = 1;\r\n        let maxBars: number = 1;\r\n        if (jsonObject[\"channels\"]) {\r\n            for (const channelObject of jsonObject[\"channels\"]) {\r\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\r\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\r\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\r\n            }\r\n        }\r\n\r\n        this.instrumentsPerChannel = Math.min(maxInstruments, Config.instrumentsPerChannelMax);\r\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\r\n        this.barCount = Math.min(maxBars, Config.barCountMax);\r\n\r\n        if (jsonObject[\"introBars\"] != undefined) {\r\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\r\n        }\r\n        if (jsonObject[\"loopBars\"] != undefined) {\r\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\r\n        }\r\n\r\n        const newPitchChannels: Channel[] = [];\r\n        const newNoiseChannels: Channel[] = [];\r\n        const newModChannels: Channel[] = [];\r\n        if (jsonObject[\"channels\"]) {\r\n            for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n                let channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n\r\n                const channel: Channel = new Channel();\r\n\r\n                let isNoiseChannel: boolean = false;\r\n                let isModChannel: boolean = false;\r\n                if (channelObject[\"type\"] != undefined) {\r\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\r\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\r\n                } else {\r\n                    // for older files, assume drums are channel 3.\r\n                    isNoiseChannel = (channelIndex >= 3);\r\n                }\r\n                if (isNoiseChannel) {\r\n                    newNoiseChannels.push(channel);\r\n                } else if (isModChannel) {\r\n                    newModChannels.push(channel);\r\n                }\r\n                else {\r\n                    newPitchChannels.push(channel);\r\n                }\r\n\r\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\r\n                    channel.octave = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, channelObject[\"octaveScrollBar\"] | 0);\r\n                }\r\n\r\n                for (let i: number = channel.instruments.length; i < this.instrumentsPerChannel; i++) {\r\n                    channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\r\n                }\r\n                channel.instruments.length = this.instrumentsPerChannel;\r\n\r\n                for (let i: number = channel.patterns.length; i < this.patternsPerChannel; i++) {\r\n                    channel.patterns[i] = new Pattern();\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                for (let i: number = 0; i < this.barCount; i++) {\r\n                    channel.bars[i] = 1;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n\r\n                for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                    const instrument: Instrument = channel.instruments[i];\r\n                    instrument.fromJsonObject(channelObject[\"instruments\"][i], isNoiseChannel, isModChannel, this.rhythm == 0 || this.rhythm == 2, this.rhythm >= 2);\r\n                }\r\n\r\n                for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                    const pattern: Pattern = channel.patterns[i];\r\n\r\n                    let patternObject: any = undefined;\r\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\r\n                    if (patternObject == undefined) continue;\r\n\r\n                    pattern.instrument = clamp(0, this.instrumentsPerChannel, (patternObject[\"instrument\"] | 0) - 1);\r\n\r\n                    if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\r\n                        const maxNoteCount: number = Math.min(this.beatsPerBar * Config.partsPerBeat, patternObject[\"notes\"].length >>> 0);\r\n\r\n                        //let tickClock: number = 0;\r\n                        for (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\r\n                            if (j >= maxNoteCount) break;\r\n\r\n                            const noteObject = patternObject[\"notes\"][j];\r\n                            if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\r\n                                continue;\r\n                            }\r\n\r\n                            const note: Note = new Note(0, 0, 0, 0);\r\n                            note.pitches = [];\r\n                            note.pins = [];\r\n\r\n                            for (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\r\n                                const pitch: number = noteObject[\"pitches\"][k] | 0;\r\n                                if (note.pitches.indexOf(pitch) != -1) continue;\r\n                                note.pitches.push(pitch);\r\n                                if (note.pitches.length >= Config.maxChordSize) break;\r\n                            }\r\n                            if (note.pitches.length < 1) continue;\r\n\r\n                            //let noteClock: number = tickClock;\r\n                            let startInterval: number = 0;\r\n                            for (let k: number = 0; k < noteObject[\"points\"].length; k++) {\r\n                                const pointObject: any = noteObject[\"points\"][k];\r\n                                if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\r\n                                const interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\r\n\r\n                                const time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\r\n\r\n                                let volumeCap: number = this.getVolumeCapForSetting(isModChannel, channel.instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\r\n                                // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\r\n                                // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\r\n                                let volume: number;\r\n                                if (pointObject[\"volume\"] == undefined) {\r\n                                    volume = volumeCap;\r\n                                } else if (pointObject[\"forMod\"] == undefined) {\r\n                                    volume = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                                }\r\n                                else {\r\n                                    volume = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                                }\r\n\r\n                                if (time > this.beatsPerBar * Config.partsPerBeat) continue;\r\n                                if (note.pins.length == 0) {\r\n                                    //if (time < noteClock) continue;\r\n                                    note.start = time;\r\n                                    startInterval = interval;\r\n                                } else {\r\n                                    //if (time <= noteClock) continue;\r\n                                }\r\n                                //noteClock = time;\r\n\r\n                                note.pins.push(makeNotePin(interval - startInterval, time - note.start, volume));\r\n                            }\r\n                            if (note.pins.length < 2) continue;\r\n\r\n                            note.end = note.pins[note.pins.length - 1].time + note.start;\r\n\r\n                            const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\r\n                            let lowestPitch: number = maxPitch;\r\n                            let highestPitch: number = 0;\r\n                            for (let k: number = 0; k < note.pitches.length; k++) {\r\n                                note.pitches[k] += startInterval;\r\n                                if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n                                    note.pitches.splice(k, 1);\r\n                                    k--;\r\n                                }\r\n                                if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n                                if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n                            }\r\n                            if (note.pitches.length < 1) continue;\r\n\r\n                            for (let k: number = 0; k < note.pins.length; k++) {\r\n                                const pin: NotePin = note.pins[k];\r\n                                if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n                                if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n                                if (k >= 2) {\r\n                                    if (pin.interval == note.pins[k - 1].interval &&\r\n                                        pin.interval == note.pins[k - 2].interval &&\r\n                                        pin.volume == note.pins[k - 1].volume &&\r\n                                        pin.volume == note.pins[k - 2].volume) {\r\n                                        note.pins.splice(k - 1, 1);\r\n                                        k--;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            pattern.notes.push(note);\r\n                            //tickClock = note.end;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (let i: number = 0; i < this.barCount; i++) {\r\n                    channel.bars[i] = channelObject[\"sequence\"] ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\r\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\r\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\r\n        this.pitchChannelCount = newPitchChannels.length;\r\n        this.noiseChannelCount = newNoiseChannels.length;\r\n        this.modChannelCount = newModChannels.length;\r\n        this.channels.length = 0;\r\n        Array.prototype.push.apply(this.channels, newPitchChannels);\r\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\r\n        Array.prototype.push.apply(this.channels, newModChannels);\r\n    }\r\n\r\n    public getPattern(channel: number, bar: number): Pattern | null {\r\n        if (bar < 0 || bar >= this.barCount) return null;\r\n        const patternIndex: number = this.channels[channel].bars[bar];\r\n        if (patternIndex == 0) return null;\r\n        return this.channels[channel].patterns[patternIndex - 1];\r\n    }\r\n\r\n    public getPatternInstrument(channel: number, bar: number): number {\r\n        const pattern: Pattern | null = this.getPattern(channel, bar);\r\n        return pattern == null ? 0 : pattern.instrument;\r\n    }\r\n\r\n    public getBeatsPerMinute(): number {\r\n        return this.tempo;\r\n    }\r\n\r\n}\r\n\r\nclass Tone {\r\n    public instrument: Instrument;\r\n    public readonly pitches: number[] = [0, 0, 0, 0];\r\n    public pitchCount: number = 0;\r\n    public chordSize: number = 0;\r\n    public drumsetPitch: number = 0;\r\n    public note: Note | null = null;\r\n    public prevNote: Note | null = null;\r\n    public nextNote: Note | null = null;\r\n    public prevNotePitchIndex: number = 0;\r\n    public nextNotePitchIndex: number = 0;\r\n    public active: boolean = false;\r\n    public noteStart: number = 0;\r\n    public noteEnd: number = 0;\r\n    public noteLengthTicks: number = 0;\r\n    public ticksSinceReleased: number = 0;\r\n    public liveInputSamplesHeld: number = 0;\r\n    public lastInterval: number = 0;\r\n    public lastVolume: number = 0;\r\n    public stereoVolume1: number = 0.0;\r\n    public stereoVolume2: number = 0.0;\r\n    public stereoOffset: number = 0.0;\r\n    public stereoDelay: number = 0.0;\r\n    public sample: number = 0.0;\r\n    public readonly phases: number[] = [];\r\n    public readonly phaseDeltas: number[] = [];\r\n    public readonly volumeStarts: number[] = [];\r\n    public readonly volumeDeltas: number[] = [];\r\n    public volumeStart: number = 0.0;\r\n    public volumeDelta: number = 0.0;\r\n    public phaseDeltaScale: number = 0.0;\r\n    public pulseWidth: number = 0.0;\r\n    public pulseWidthDelta: number = 0.0;\r\n    public filter: number = 0.0;\r\n    public filterScale: number = 0.0;\r\n    public filterSample0: number = 0.0;\r\n    public filterSample1: number = 0.0;\r\n    public vibratoScale: number = 0.0;\r\n    public intervalMult: number = 0.0;\r\n    public intervalVolumeMult: number = 1.0;\r\n    public feedbackOutputs: number[] = [];\r\n    public feedbackMult: number = 0.0;\r\n    public feedbackDelta: number = 0.0;\r\n    public stereoVolumeLStart: number = 0.0;\r\n    public stereoVolumeRStart: number = 0.0;\r\n    public stereoVolumeLDelta: number = 0.0;\r\n    public stereoVolumeRDelta: number = 0.0;\r\n    public stereoDelayStart: number = 0.0;\r\n    public stereoDelayEnd: number = 0.0;\r\n    public stereoDelayDelta: number = 0.0;\r\n    public customVolumeStart: number = 0.0;\r\n    public customVolumeEnd: number = 0.0;\r\n    public filterResonanceStart: number = 0.0;\r\n    public filterResonanceDelta: number = 0.0;\r\n    public isFirstOrder: boolean = false;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            this.phases[i] = 0.0;\r\n            this.feedbackOutputs[i] = 0.0;\r\n        }\r\n        this.sample = 0.0;\r\n        this.filterSample0 = 0.0;\r\n        this.filterSample1 = 0.0;\r\n        this.liveInputSamplesHeld = 0.0;\r\n    }\r\n\r\n}\r\n\r\nexport class Synth {\r\n\r\n    public warmUpSynthesizer(song: Song | null): void {\r\n        // Don't bother to generate the drum waves unless the song actually\r\n        // uses them, since they may require a lot of computation.\r\n        if (song != null) {\r\n            for (let channel: number = 0; channel < song.getChannelCount(); channel++) {\r\n                for (let instrument: number = 0; instrument < song.instrumentsPerChannel; instrument++) {\r\n                    Synth.getInstrumentSynthFunction(song.channels[channel].instruments[instrument]);\r\n                    song.channels[channel].instruments[instrument].warmUp();\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public computeLatestModValues(): void {\r\n\r\n        if (this.song != null && this.song.modChannelCount > 0) {\r\n\r\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\r\n            let latestModTimes: (number | null)[] = [];\r\n            let latestModInsTimes: (number | null)[][][] = [];\r\n            this.modValues = [];\r\n            this.nextModValues = [];\r\n            this.modInsValues = [];\r\n            this.nextModInsValues = [];\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                latestModInsTimes[channel] = [];\r\n                this.modInsValues[channel] = [];\r\n                this.nextModInsValues[channel] = [];\r\n                for (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n                    this.modInsValues[channel][instrument] = [];\r\n                    this.nextModInsValues[channel][instrument] = [];\r\n                    latestModInsTimes[channel][instrument] = [];\r\n                }\r\n            }\r\n\r\n            // Find out where we're at in the fraction of the current bar.\r\n            let currentPart: number = this.beat * Config.partsPerBeat + this.part;\r\n\r\n            // For mod channels, calculate last set value for each mod\r\n            for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                if (!(this.song.channels[channel].muted)) {\r\n\r\n                    let pattern: Pattern | null;\r\n\r\n                    for (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\r\n                        pattern = this.song.getPattern(channel, currentBar);\r\n\r\n                        if (pattern != null) {\r\n                            let instrumentIdx: number = this.song.getPatternInstrument(channel, currentBar);\r\n                            let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                            let latestPinParts: number[] = [];\r\n                            let latestPinValues: number[] = [];\r\n\r\n                            let partsInBar: number = (currentBar == this.bar)\r\n                                ? currentPart\r\n                                : this.findPartsInBar(currentBar);\r\n\r\n                            for (const note of pattern.notes) {\r\n                                if (note.start < partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\r\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].volume;\r\n                                    }\r\n                                    else {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            // Set modulator value, if it wasn't set in another pattern already scanned\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                if (latestPinParts[mod] != null) {\r\n                                    if (instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                                        if (latestModTimes[instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modSettings[mod]] as number)) {\r\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n                                            latestModTimes[instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                        }\r\n                                    }\r\n                                    else if (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] as number)) {\r\n                                        this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n                                        latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static operatorAmplitudeCurve(amplitude: number): number {\r\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n    }\r\n\r\n    public samplesPerSecond: number = 44100;\r\n\r\n    public song: Song | null = null;\r\n    public liveInputDuration: number = 0;\r\n    public liveInputStarted: boolean = false;\r\n    public liveInputPitches: number[] = [];\r\n    public liveInputChannel: number = 0;\r\n    public loopRepeatCount: number = -1;\r\n    public volume: number = 1.0;\r\n\r\n    private wantToSkip: boolean = false;\r\n    private playheadInternal: number = 0.0;\r\n    private bar: number = 0;\r\n    private beat: number = 0;\r\n    private part: number = 0;\r\n    private tick: number = 0;\r\n    private tickSampleCountdown: number = 0;\r\n    private modValues: (number | null)[];\r\n    private modInsValues: (number | null)[][][];\r\n    private nextModValues: (number | null)[];\r\n    private nextModInsValues: (number | null)[][][];\r\n    private isPlayingSong: boolean = false;\r\n    private liveInputEndTime: number = 0.0;\r\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\r\n    private readonly activeTones: Array<Deque<Tone>> = [];\r\n    private tyingOver: number[] = [];\r\n    private readonly activeModTones: Array<Array<Deque<Tone>>> = [];\r\n    //private readonly releasedModTones: Array<Array<Deque<Tone>>> = [];\r\n    private readonly releasedTones: Array<Deque<Tone>> = [];\r\n    private readonly liveInputTones: Deque<Tone> = new Deque<Tone>();\r\n\r\n    //private highpassInput: number = 0.0;\r\n    //private highpassOutput: number = 0.0;\r\n    private limit: number = 0.0;\r\n\r\n    private stereoBufferIndex: number = 0;\r\n    private samplesForNone: Float32Array | null = null;\r\n    private samplesForReverb: Float32Array | null = null;\r\n    private samplesForChorus: Float32Array | null = null;\r\n    private samplesForChorusReverb: Float32Array | null = null;\r\n\r\n    private chorusDelayLine: Float32Array = new Float32Array(2048);\r\n    private chorusDelayPos: number = 0;\r\n    private chorusPhase: number = 0;\r\n\r\n    private reverbDelayLine: Float32Array = new Float32Array(16384);\r\n    private reverbDelayPos: number = 0;\r\n    private reverbFeedback0: number = 0.0;\r\n    private reverbFeedback1: number = 0.0;\r\n    private reverbFeedback2: number = 0.0;\r\n    private reverbFeedback3: number = 0.0;\r\n\r\n    private audioCtx: any | null = null;\r\n    private scriptNode: any | null = null;\r\n\r\n    public get playing(): boolean {\r\n        return this.isPlayingSong;\r\n    }\r\n\r\n    public get playhead(): number {\r\n        return this.playheadInternal;\r\n    }\r\n\r\n    public set playhead(value: number) {\r\n        if (this.song != null) {\r\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n            let remainder: number = this.playheadInternal;\r\n            this.bar = Math.floor(remainder);\r\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\r\n            this.beat = Math.floor(remainder);\r\n            remainder = Config.partsPerBeat * (remainder - this.beat);\r\n            this.part = Math.floor(remainder);\r\n            remainder = Config.ticksPerPart * (remainder - this.part);\r\n            this.tick = Math.floor(remainder);\r\n            const samplesPerTick: number = this.getSamplesPerTick();\r\n            remainder = samplesPerTick * (remainder - this.tick);\r\n            this.tickSampleCountdown = samplesPerTick - remainder;\r\n        }\r\n    }\r\n\r\n    public getSamplesPerBar(): number {\r\n        if (this.song == null) throw new Error();\r\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\r\n    }\r\n\r\n    // Calculate the total number of parts that will be played in the current bar before any next bar mods trigger.\r\n    private findPartsInBar(bar: number): number {\r\n        if (this.song == null) return 0;\r\n        let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n            if (pattern != null) {\r\n                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    if (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                        for (const note of pattern.notes) {\r\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                // Find the earliest next bar note.\r\n                                if (partsInBar > note.start)\r\n                                    partsInBar = note.start;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return partsInBar;\r\n    }\r\n\r\n    // Returns the total samples in the song\r\n    public getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\r\n        if (this.song == null)\r\n            return -1;\r\n\r\n        // Compute the window to be checked (start bar to end bar)\r\n        let startBar: number = enableIntro ? 0 : this.song.loopStart;\r\n        let endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\r\n        let hasTempoMods: boolean = false;\r\n        let hasNextBarMods: boolean = false;\r\n        let prevTempo: number = this.song.tempo;\r\n\r\n        // Determine if any tempo or next bar mods happen anywhere in the window\r\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n            for (let bar: number = startBar; bar < endBar; bar++) {\r\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                if (pattern != null) {\r\n                    let instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        if (instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                            hasTempoMods = true;\r\n                        }\r\n                        if (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                            hasNextBarMods = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\r\n        if (startBar > 0) {\r\n            let latestTempoPin: number | null = null;\r\n            let latestTempoValue: number = 0;\r\n\r\n            for (let bar: number = startBar - 1; bar >= 0; bar--) {\r\n                for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                    let pattern = this.song.getPattern(channel, bar);\r\n\r\n                    if (pattern != null) {\r\n                        let instrumentIdx: number = this.song.getPatternInstrument(channel, bar);\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\r\n                        let partsInBar: number = this.findPartsInBar(bar);\r\n\r\n                        for (const note of pattern.notes) {\r\n                            if (instrument.modSettings[Config.modCount - 1 - note.pitches[0]] == ModSetting.mstTempo && instrument.modStatuses[Config.modCount - 1 - note.pitches[0]] == ModStatus.msForSong) {\r\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestTempoPin = note.end;\r\n                                        latestTempoValue = note.pins[note.pins.length - 1].volume;\r\n                                    }\r\n                                    else {\r\n                                        latestTempoPin = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                }\r\n\r\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\r\n                if (latestTempoPin != null) {\r\n                    prevTempo = this.song.modValueToReal(latestTempoValue, ModSetting.mstTempo);\r\n                    bar = -1;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasTempoMods || hasNextBarMods) {\r\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\r\n            let bar: number = startBar;\r\n            let ended: boolean = false;\r\n            let totalSamples: number = 0;\r\n\r\n            while (!ended) {\r\n                // Compute the subsection of the pattern that will play\r\n                let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n                let currentPart: number = 0;\r\n\r\n                if (hasNextBarMods) {\r\n                    partsInBar = this.findPartsInBar(bar);\r\n                }\r\n\r\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\r\n                if (hasTempoMods) {\r\n                    let foundMod: boolean = false;\r\n                    for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                        if (foundMod == false) {\r\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                            if (pattern != null) {\r\n                                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n                                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                    if (foundMod == false && instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong\r\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\r\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\r\n                                        foundMod = true;\r\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\r\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\r\n                                        for (const note of pattern.notes) {\r\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                                // Compute samples up to this note\r\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                                                if (note.start < partsInBar) {\r\n                                                    for (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\r\n                                                        // Compute samples up to this pin\r\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\r\n                                                            const tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\r\n                                                            const prevPinTempo: number = this.song.modValueToReal(note.pins[pinIdx - 1].volume, ModSetting.mstTempo);\r\n                                                            let currPinTempo: number = this.song.modValueToReal(note.pins[pinIdx].volume, ModSetting.mstTempo);\r\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\r\n                                                                currPinTempo = this.song.modValueToReal(note.pins[pinIdx - 1].volume + (note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time), ModSetting.mstTempo);\r\n                                                            }\r\n                                                            let bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\r\n\r\n                                                            if (currPinTempo != prevPinTempo) {\r\n\r\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\r\n                                                                // The starting formula is\r\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\r\n                                                                //\r\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\r\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\r\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\r\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\r\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\r\n                                                                //\r\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\r\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\r\n\r\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\r\n\r\n                                                            }\r\n                                                            else {\r\n\r\n                                                                // No tempo change between the two pins.\r\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\r\n\r\n                                                            }\r\n                                                            prevTempo = currPinTempo;\r\n                                                        }\r\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Compute samples for the rest of the bar\r\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                bar++;\r\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\r\n                    bar = this.song.loopStart;\r\n                    if (loop > 0) loop--;\r\n                }\r\n                if (bar >= endBar) {\r\n                    ended = true;\r\n                }\r\n            }\r\n\r\n            return Math.ceil(totalSamples);\r\n        }\r\n        else {\r\n            // No tempo or next bar mods... phew! Just calculate normally.\r\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\r\n        }\r\n    }\r\n\r\n    public getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\r\n        if (this.song == null) throw new Error();\r\n        let bars: number = this.song.loopLength * (useLoopCount + 1);\r\n        if (enableIntro) bars += this.song.loopStart;\r\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n        return bars;\r\n    }\r\n\r\n    constructor(song: Song | string | null = null) {\r\n        if (song != null) this.setSong(song);\r\n    }\r\n\r\n    public setSong(song: Song | string): void {\r\n        if (typeof (song) == \"string\") {\r\n            this.song = new Song(song);\r\n        } else if (song instanceof Song) {\r\n            this.song = song;\r\n        }\r\n    }\r\n\r\n    public setModValue(volumeStart: number, volumeEnd: number, mod: number, instrument: Instrument, setting: ModSetting): number {\r\n        let val: number;\r\n        let nextVal: number;\r\n        switch (setting) {\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstTempo:\r\n            case ModSetting.mstSongDetune:\r\n                val = (this.song as Song).modValueToReal(volumeStart, setting);\r\n                nextVal = (this.song as Song).modValueToReal(volumeEnd, setting);\r\n                if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\r\n                    this.modValues[setting] = val;\r\n                    this.nextModValues[setting] = nextVal;\r\n                }\r\n                break;\r\n            case ModSetting.mstInsVolume:\r\n            case ModSetting.mstPan:\r\n            case ModSetting.mstPulseWidth:\r\n            case ModSetting.mstFilterCut:\r\n            case ModSetting.mstFilterPeak:\r\n            case ModSetting.mstFMSlider1:\r\n            case ModSetting.mstFMSlider2:\r\n            case ModSetting.mstFMSlider3:\r\n            case ModSetting.mstFMSlider4:\r\n            case ModSetting.mstFMFeedback:\r\n            case ModSetting.mstVibratoDepth:\r\n            case ModSetting.mstVibratoSpeed:\r\n            case ModSetting.mstVibratoDelay:\r\n            case ModSetting.mstArpeggioSpeed:\r\n            case ModSetting.mstPanDelay:\r\n            case ModSetting.mstResetArpeggio:\r\n            case ModSetting.mstDetune:\r\n                val = this.song!.modValueToReal(volumeStart, setting);\r\n                nextVal = this.song!.modValueToReal(volumeEnd, setting);\r\n                let channelAdjust: number = instrument.modChannels[mod] + ((instrument.modStatuses[mod] == ModStatus.msForNoise) ? this.song!.pitchChannelCount : 0);\r\n\r\n                if (this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] == null\r\n                    || this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != val\r\n                    || this.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != nextVal) {\r\n                    this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = val;\r\n                    this.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = nextVal;\r\n                }\r\n                break;\r\n            case ModSetting.mstNextBar:\r\n                val = (this.song as Song).modValueToReal(volumeStart, setting);\r\n                break;\r\n            case ModSetting.mstNone:\r\n            default:\r\n                val = -1;\r\n                break;\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    public getModValue(setting: ModSetting, forSong: boolean, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\r\n        if (forSong) {\r\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\r\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\r\n            }\r\n        } else if (channel != undefined && instrument != undefined) {\r\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\r\n    public isAnyModActive(channel: number, instrument: number): boolean {\r\n        for (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n            if ((this.modValues != undefined && this.modValues[setting] != null)\r\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public unsetMod(setting: ModSetting, channel?: number, instrument?: number) {\r\n        if (this.isModActive(setting, true) || (channel != undefined && instrument != undefined && this.isModActive(setting, false, channel, instrument))) {\r\n            this.modValues[setting] = null;\r\n            this.nextModValues[setting] = null;\r\n            if (channel != undefined && instrument != undefined) {\r\n                this.modInsValues[channel][instrument][setting] = null;\r\n                this.nextModInsValues[channel][instrument][setting] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isModActive(setting: ModSetting, forSong: boolean, channel?: number, instrument?: number): boolean {\r\n        if (forSong) {\r\n            return (this.modValues != undefined && this.modValues[setting] != null);\r\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null && this.modInsValues[channel][instrument][setting] != null) {\r\n            return (this.modInsValues[channel][instrument][setting] != null);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private activateAudio(): void {\r\n        if (this.audioCtx == null || this.scriptNode == null) {\r\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)();\r\n            this.samplesPerSecond = this.audioCtx.sampleRate;\r\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(2048, 0, 2) : this.audioCtx.createJavaScriptNode(2048, 0, 2); // 2048, 0 input channels, 2 output channels\r\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n            this.scriptNode.channelCountMode = 'explicit';\r\n            this.scriptNode.channelInterpretation = 'speakers';\r\n            this.scriptNode.connect(this.audioCtx.destination);\r\n        }\r\n        this.audioCtx.resume();\r\n    }\r\n\r\n    private deactivateAudio(): void {\r\n        if (this.audioCtx != null && this.scriptNode != null) {\r\n            this.scriptNode.disconnect(this.audioCtx.destination);\r\n            this.scriptNode = null;\r\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n            this.audioCtx = null;\r\n        }\r\n    }\r\n\r\n    public maintainLiveInput(): void {\r\n        this.activateAudio();\r\n        this.liveInputEndTime = performance.now() + 10000.0;\r\n    }\r\n\r\n    public play(): void {\r\n        if (this.isPlayingSong) return;\r\n        this.isPlayingSong = true;\r\n        this.warmUpSynthesizer(this.song);\r\n        this.computeLatestModValues();\r\n        this.activateAudio();\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.isPlayingSong) return;\r\n        this.isPlayingSong = false;\r\n        if (this.song != null) {\r\n            this.song.inVolumeCap = 0.0;\r\n            this.song.outVolumeCap = 0.0;\r\n        }\r\n        this.modValues = [];\r\n        this.modInsValues = [];\r\n        this.nextModValues = [];\r\n        this.nextModInsValues = [];\r\n        this.tyingOver = [];\r\n    }\r\n\r\n    public snapToStart(): void {\r\n        this.bar = 0;\r\n        this.snapToBar();\r\n    }\r\n\r\n    public goToBar(bar: number): void {\r\n        this.bar = bar;\r\n        this.playheadInternal = this.bar;\r\n    }\r\n\r\n    public snapToBar(): void {\r\n        this.playheadInternal = this.bar;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = 0;\r\n    }\r\n\r\n    public resetEffects(): void {\r\n        this.reverbDelayPos = 0;\r\n        this.reverbFeedback0 = 0.0;\r\n        this.reverbFeedback1 = 0.0;\r\n        this.reverbFeedback2 = 0.0;\r\n        this.reverbFeedback3 = 0.0;\r\n        //this.highpassInput = 0.0;\r\n        //this.highpassOutput = 0.0;\r\n        this.freeAllTones();\r\n        for (let i: number = 0; i < this.reverbDelayLine.length; i++) this.reverbDelayLine[i] = 0.0;\r\n        for (let i: number = 0; i < this.chorusDelayLine.length; i++) this.chorusDelayLine[i] = 0.0;\r\n        if (this.samplesForNone != null) for (let i: number = 0; i < this.samplesForNone.length; i++) this.samplesForNone[i] = 0.0;\r\n        if (this.samplesForReverb != null) for (let i: number = 0; i < this.samplesForReverb.length; i++) this.samplesForReverb[i] = 0.0;\r\n        if (this.samplesForChorus != null) for (let i: number = 0; i < this.samplesForChorus.length; i++) this.samplesForChorus[i] = 0.0;\r\n        if (this.samplesForChorusReverb != null) for (let i: number = 0; i < this.samplesForChorusReverb.length; i++) this.samplesForChorusReverb[i] = 0.0;\r\n    }\r\n\r\n    public jumpIntoLoop(): void {\r\n        if (!this.song) return;\r\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\r\n            const oldBar: number = this.bar;\r\n            this.bar = this.song.loopStart;\r\n            this.playheadInternal += this.bar - oldBar;\r\n\r\n            if (this.playing)\r\n                this.computeLatestModValues();\r\n        }\r\n    }\r\n\r\n    public nextBar(): void {\r\n        if (!this.song) return;\r\n        const oldBar: number = this.bar;\r\n        this.bar++;\r\n        if (this.bar >= this.song.barCount) {\r\n            this.bar = 0;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public skipBar(): void {\r\n        if (!this.song) return;\r\n        const samplesPerTick: number = this.getSamplesPerTick();\r\n        this.bar++;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = samplesPerTick;\r\n\r\n        if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n            this.bar = this.song.loopStart;\r\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n        }\r\n\r\n    }\r\n\r\n    public firstBar(): void {\r\n        if (!this.song) return;\r\n        this.bar = 0;\r\n        this.playheadInternal = 0;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public jumpToEditingBar(bar: number): void {\r\n        if (!this.song) return;\r\n\r\n        this.bar = bar;\r\n\r\n        this.playheadInternal = bar;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public prevBar(): void {\r\n        if (!this.song) return;\r\n        const oldBar: number = this.bar;\r\n        this.bar--;\r\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\r\n            this.bar = this.song.barCount - 1;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\r\n        const outputBuffer = audioProcessingEvent.outputBuffer;\r\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n        const isPlayingLiveTones = performance.now() < this.liveInputEndTime;\r\n        if (!isPlayingLiveTones && !this.isPlayingSong) {\r\n            for (let i: number = 0; i < outputBuffer.length; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n            this.deactivateAudio();\r\n        } else {\r\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\r\n        }\r\n    }\r\n\r\n    public synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\r\n        if (this.song == null) {\r\n            for (let i: number = 0; i < outputBufferLength; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n            this.deactivateAudio();\r\n            return;\r\n        }\r\n\r\n        this.song.inVolumeCap = 0.0; // Reset volume cap for this run\r\n        this.song.outVolumeCap = 0.0;\r\n\r\n        const channelCount: number = this.song.pitchChannelCount + this.song.noiseChannelCount;\r\n\r\n        for (let i: number = this.activeTones.length; i < channelCount; i++) {\r\n            this.activeTones[i] = new Deque<Tone>();\r\n            this.releasedTones[i] = new Deque<Tone>();\r\n        }\r\n        this.activeTones.length = channelCount;\r\n        this.releasedTones.length = channelCount;\r\n        if ( channelCount != this.tyingOver.length ) {\r\n            let idx: number = this.tyingOver.length;\r\n            this.tyingOver.length = channelCount;\r\n            while ( idx < this.tyingOver.length ) {\r\n                this.tyingOver[idx++] = -1;\r\n            }\r\n        }\r\n\r\n        for (let i: number = this.activeModTones.length; i < this.song.modChannelCount; i++) {\r\n            this.activeModTones[i] = [];\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                this.activeModTones[i][mod] = new Deque<Tone>();\r\n            }\r\n            this.activeModTones[i].length = Config.modCount;\r\n        }\r\n        this.activeModTones.length = this.song.modChannelCount;\r\n\r\n        let samplesPerTick: number = this.getSamplesPerTick();\r\n        let bufferIndex: number = 0;\r\n        let ended: boolean = false;\r\n\r\n        // Check the bounds of the playhead:\r\n        while (this.tickSampleCountdown <= 0) this.tickSampleCountdown += samplesPerTick;\r\n        if (this.tickSampleCountdown > samplesPerTick) this.tickSampleCountdown = samplesPerTick;\r\n        if (playSong) {\r\n            if (this.beat >= this.song.beatsPerBar) {\r\n                this.bar++;\r\n                this.beat = 0;\r\n                this.part = 0;\r\n                this.tick = 0;\r\n                this.tickSampleCountdown = samplesPerTick;\r\n\r\n                if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n                    this.bar = this.song.loopStart;\r\n                    if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n                }\r\n            }\r\n            if (this.bar >= this.song.barCount) {\r\n                this.bar = 0;\r\n                if (this.loopRepeatCount != -1) {\r\n                    ended = true;\r\n                    this.pause();\r\n                }\r\n            }\r\n        }\r\n\r\n        //const synthStartTime: number = performance.now();\r\n\r\n        const stereoBufferLength: number = outputBufferLength * 4;\r\n        if (this.samplesForNone == null || this.samplesForNone.length != stereoBufferLength ||\r\n            this.samplesForReverb == null || this.samplesForReverb.length != stereoBufferLength ||\r\n            this.samplesForChorus == null || this.samplesForChorus.length != stereoBufferLength ||\r\n            this.samplesForChorusReverb == null || this.samplesForChorusReverb.length != stereoBufferLength) {\r\n            this.samplesForNone = new Float32Array(stereoBufferLength);\r\n            this.samplesForReverb = new Float32Array(stereoBufferLength);\r\n            this.samplesForChorus = new Float32Array(stereoBufferLength);\r\n            this.samplesForChorusReverb = new Float32Array(stereoBufferLength);\r\n            this.stereoBufferIndex = 0;\r\n        }\r\n        let stereoBufferIndex: number = this.stereoBufferIndex;\r\n        const samplesForNone: Float32Array = this.samplesForNone;\r\n        const samplesForReverb: Float32Array = this.samplesForReverb;\r\n        const samplesForChorus: Float32Array = this.samplesForChorus;\r\n        const samplesForChorusReverb: Float32Array = this.samplesForChorusReverb;\r\n\r\n        // Post processing parameters:\r\n        const volume: number = +this.volume;\r\n        const chorusDelayLine: Float32Array = this.chorusDelayLine;\r\n        const reverbDelayLine: Float32Array = this.reverbDelayLine;\r\n        const chorusDuration: number = 2.0;\r\n        const chorusAngle: number = Math.PI * 2.0 / (chorusDuration * this.samplesPerSecond);\r\n        const chorusRange: number = 150 * this.samplesPerSecond / 44100;\r\n        const chorusOffset0: number = 0x800 - 1.51 * chorusRange;\r\n        const chorusOffset1: number = 0x800 - 2.10 * chorusRange;\r\n        const chorusOffset2: number = 0x800 - 3.35 * chorusRange;\r\n        const chorusOffset3: number = 0x800 - 1.47 * chorusRange;\r\n        const chorusOffset4: number = 0x800 - 2.15 * chorusRange;\r\n        const chorusOffset5: number = 0x800 - 3.25 * chorusRange;\r\n        let chorusPhase: number = this.chorusPhase % (Math.PI * 2.0);\r\n        let chorusDelayPos: number = this.chorusDelayPos & 0x7FF;\r\n        let reverbDelayPos: number = this.reverbDelayPos & 0x3FFF;\r\n        let reverbFeedback0: number = +this.reverbFeedback0;\r\n        let reverbFeedback1: number = +this.reverbFeedback1;\r\n        let reverbFeedback2: number = +this.reverbFeedback2;\r\n        let reverbFeedback3: number = +this.reverbFeedback3;\r\n        let useReverb: number = this.song.reverb;\r\n        if (this.isModActive(ModSetting.mstReverb, true)) {\r\n            useReverb = this.getModValue(ModSetting.mstReverb, true);\r\n        }\r\n        let reverb: number = Math.pow(useReverb / Config.reverbRange, 0.667) * 0.425;\r\n        //const highpassFilter: number = Math.pow(0.5, 400 / this.samplesPerSecond);\r\n        const limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond); // Default 4.0\r\n        const limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond); // Default 4000.0;\r\n        const compressionThreshold: number = this.song.compressionThreshold; // Default 1\r\n        const limitThreshold: number = this.song.limitThreshold; // Default 1\r\n        const compressionRatio: number = this.song.compressionRatio; // Default 1\r\n        const limitRatio: number = this.song.limitRatio; // Default 1\r\n        const masterGain: number = this.song.masterGain; // Default 1\r\n        //let highpassInput: number = +this.highpassInput;\r\n        //let highpassOutput: number = +this.highpassOutput;\r\n        let limit: number = +this.limit;\r\n\r\n        while (bufferIndex < outputBufferLength && !ended) {\r\n\r\n            const samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\r\n            const runLength: number = Math.min(Math.ceil(this.tickSampleCountdown), samplesLeftInBuffer);\r\n\r\n            for (let modChannel: number = 0, channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; modChannel < this.song.modChannelCount; modChannel++, channel++) {\r\n                // Also determines mod tones.\r\n                this.determineCurrentActiveTones(this.song, channel, playSong);\r\n\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    for (let i: number = 0; i < this.activeModTones[modChannel][mod].count(); i++) {\r\n                        const tone: Tone = this.activeModTones[modChannel][mod].get(i);\r\n\r\n                        if (this.song.channels[channel].muted == false)\r\n                            this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Handle next bar mods if they were set\r\n            if ( this.wantToSkip ) {\r\n                this.wantToSkip = false;\r\n                this.skipBar();\r\n            }\r\n\r\n            if (this.isModActive(ModSetting.mstReverb, true)) {\r\n                reverb = Math.pow(this.getModValue(ModSetting.mstReverb, true) / Config.reverbRange, 0.667) * 0.425;\r\n            }\r\n\r\n            // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\r\n\r\n            const tickSampleCountdown: number = this.tickSampleCountdown;\r\n            const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n            const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n            const ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n            const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n            const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n            const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n            const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                for (let instrumentIdx: number = 0; instrumentIdx < this.song.instrumentsPerChannel; instrumentIdx++) {\r\n                    let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                    let useVibratoSpeed: number = instrument.vibratoSpeed;\r\n\r\n                    instrument.LFOtime = instrument.nextLFOtime;\r\n\r\n                    if (this.isModActive(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx)) {\r\n                        useVibratoSpeed = this.getModValue(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx, false);\r\n                    }\r\n\r\n                    if (useVibratoSpeed == 0) {\r\n                        instrument.LFOtime = 0;\r\n                        instrument.nextLFOtime = 0;\r\n                    }\r\n                    else {\r\n                        instrument.nextLFOtime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\r\n                if (channel == this.liveInputChannel) {\r\n                    this.determineLiveInputTones(this.song);\r\n\r\n                    for (let i: number = 0; i < this.liveInputTones.count(); i++) {\r\n                        const tone: Tone = this.liveInputTones.get(i);\r\n                        // Hmm. Will allow active input from a muted channel for now.\r\n                        //if (this.song.channels[channel].muted == false)\r\n                        this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n                    }\r\n                }\r\n\r\n                this.determineCurrentActiveTones(this.song, channel, playSong);\r\n                for (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n                    const tone: Tone = this.activeTones[channel].get(i);\r\n                    this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n                }\r\n\r\n                for (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n                    const tone: Tone = this.releasedTones[channel].get(i);\r\n                    if (tone.ticksSinceReleased >= tone.instrument.getTransition().releaseTicks) {\r\n                        this.freeReleasedTone(channel, i);\r\n                        i--;\r\n                        continue;\r\n                    }\r\n\r\n                    const shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\r\n                    this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, true, shouldFadeOutFast);\r\n\r\n                }\r\n            }\r\n\r\n            // Post processing:\r\n            let chorusTap0Index: number = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n            let chorusTap1Index: number = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n            let chorusTap2Index: number = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n            let chorusTap3Index: number = chorusDelayPos + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n            let chorusTap4Index: number = chorusDelayPos + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n            let chorusTap5Index: number = chorusDelayPos + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n            chorusPhase += chorusAngle * runLength;\r\n            const chorusTap0End: number = chorusDelayPos + runLength + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n            const chorusTap1End: number = chorusDelayPos + runLength + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n            const chorusTap2End: number = chorusDelayPos + runLength + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n            const chorusTap3End: number = chorusDelayPos + runLength + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n            const chorusTap4End: number = chorusDelayPos + runLength + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n            const chorusTap5End: number = chorusDelayPos + runLength + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n            const chorusTap0Delta: number = (chorusTap0End - chorusTap0Index) / runLength;\r\n            const chorusTap1Delta: number = (chorusTap1End - chorusTap1Index) / runLength;\r\n            const chorusTap2Delta: number = (chorusTap2End - chorusTap2Index) / runLength;\r\n            const chorusTap3Delta: number = (chorusTap3End - chorusTap3Index) / runLength;\r\n            const chorusTap4Delta: number = (chorusTap4End - chorusTap4Index) / runLength;\r\n            const chorusTap5Delta: number = (chorusTap5End - chorusTap5Index) / runLength;\r\n            const runEnd: number = bufferIndex + runLength;\r\n            for (let i: number = bufferIndex; i < runEnd; i++) {\r\n                const bufferIndexL: number = stereoBufferIndex;\r\n                const bufferIndexR: number = stereoBufferIndex + 1;\r\n                const sampleForNoneL: number = samplesForNone[bufferIndexL]; samplesForNone[bufferIndexL] = 0.0;\r\n                const sampleForNoneR: number = samplesForNone[bufferIndexR]; samplesForNone[bufferIndexR] = 0.0;\r\n                const sampleForReverbL: number = samplesForReverb[bufferIndexL]; samplesForReverb[bufferIndexL] = 0.0;\r\n                const sampleForReverbR: number = samplesForReverb[bufferIndexR]; samplesForReverb[bufferIndexR] = 0.0;\r\n                const sampleForChorusL: number = samplesForChorus[bufferIndexL]; samplesForChorus[bufferIndexL] = 0.0;\r\n                const sampleForChorusR: number = samplesForChorus[bufferIndexR]; samplesForChorus[bufferIndexR] = 0.0;\r\n                const sampleForChorusReverbL: number = samplesForChorusReverb[bufferIndexL]; samplesForChorusReverb[bufferIndexL] = 0.0;\r\n                const sampleForChorusReverbR: number = samplesForChorusReverb[bufferIndexR]; samplesForChorusReverb[bufferIndexR] = 0.0;\r\n                stereoBufferIndex += 2;\r\n\r\n                const combinedChorusL: number = sampleForChorusL + sampleForChorusReverbL;\r\n                const combinedChorusR: number = sampleForChorusR + sampleForChorusReverbR;\r\n\r\n                const chorusTap0Ratio: number = chorusTap0Index % 1;\r\n                const chorusTap1Ratio: number = chorusTap1Index % 1;\r\n                const chorusTap2Ratio: number = chorusTap2Index % 1;\r\n                const chorusTap3Ratio: number = chorusTap3Index % 1;\r\n                const chorusTap4Ratio: number = chorusTap4Index % 1;\r\n                const chorusTap5Ratio: number = chorusTap5Index % 1;\r\n                const chorusTap0A: number = chorusDelayLine[(chorusTap0Index) & 0x7FF];\r\n                const chorusTap0B: number = chorusDelayLine[(chorusTap0Index + 1) & 0x7FF];\r\n                const chorusTap1A: number = chorusDelayLine[(chorusTap1Index) & 0x7FF];\r\n                const chorusTap1B: number = chorusDelayLine[(chorusTap1Index + 1) & 0x7FF];\r\n                const chorusTap2A: number = chorusDelayLine[(chorusTap2Index) & 0x7FF];\r\n                const chorusTap2B: number = chorusDelayLine[(chorusTap2Index + 1) & 0x7FF];\r\n                const chorusTap3A: number = chorusDelayLine[(chorusTap3Index) & 0x7FF];\r\n                const chorusTap3B: number = chorusDelayLine[(chorusTap3Index + 1) & 0x7FF];\r\n                const chorusTap4A: number = chorusDelayLine[(chorusTap4Index) & 0x7FF];\r\n                const chorusTap4B: number = chorusDelayLine[(chorusTap4Index + 1) & 0x7FF];\r\n                const chorusTap5A: number = chorusDelayLine[(chorusTap5Index) & 0x7FF];\r\n                const chorusTap5B: number = chorusDelayLine[(chorusTap5Index + 1) & 0x7FF];\r\n                const chorusTap0: number = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n                const chorusTap1: number = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n                const chorusTap2: number = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n                const chorusTap3: number = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n                const chorusTap4: number = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n                const chorusTap5: number = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n                const chorusSampleL = 0.5 * (combinedChorusL - chorusTap0 + chorusTap1 - chorusTap2);\r\n                const chorusSampleR = 0.5 * (combinedChorusR - chorusTap3 + chorusTap4 - chorusTap5);\r\n                chorusDelayLine[chorusDelayPos] = combinedChorusL;\r\n                chorusDelayLine[(chorusDelayPos + 0x400) & 0x7FF] = combinedChorusR;\r\n                chorusDelayPos = (chorusDelayPos + 1) & 0x7FF;\r\n                chorusTap0Index += chorusTap0Delta;\r\n                chorusTap1Index += chorusTap1Delta;\r\n                chorusTap2Index += chorusTap2Delta;\r\n                chorusTap3Index += chorusTap3Delta;\r\n                chorusTap4Index += chorusTap4Delta;\r\n                chorusTap5Index += chorusTap5Delta;\r\n\r\n                // Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n                // good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n                // Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\r\n                // Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\r\n                const reverbDelayPos1: number = (reverbDelayPos + 3041) & 0x3FFF;\r\n                const reverbDelayPos2: number = (reverbDelayPos + 6426) & 0x3FFF;\r\n                const reverbDelayPos3: number = (reverbDelayPos + 10907) & 0x3FFF;\r\n                const reverbSample0: number = (reverbDelayLine[reverbDelayPos]);\r\n                const reverbSample1: number = reverbDelayLine[reverbDelayPos1];\r\n                const reverbSample2: number = reverbDelayLine[reverbDelayPos2];\r\n                const reverbSample3: number = reverbDelayLine[reverbDelayPos3];\r\n                const reverbTemp0: number = -(reverbSample0 + sampleForChorusReverbL + sampleForReverbL) + reverbSample1;\r\n                const reverbTemp1: number = -(reverbSample0 + sampleForChorusReverbR + sampleForReverbR) - reverbSample1;\r\n                const reverbTemp2: number = -reverbSample2 + reverbSample3;\r\n                const reverbTemp3: number = -reverbSample2 - reverbSample3;\r\n                reverbFeedback0 += ((reverbTemp0 + reverbTemp2) * reverb - reverbFeedback0) * 0.5;\r\n                reverbFeedback1 += ((reverbTemp1 + reverbTemp3) * reverb - reverbFeedback1) * 0.5;\r\n                reverbFeedback2 += ((reverbTemp0 - reverbTemp2) * reverb - reverbFeedback2) * 0.5;\r\n                reverbFeedback3 += ((reverbTemp1 - reverbTemp3) * reverb - reverbFeedback3) * 0.5;\r\n                reverbDelayLine[reverbDelayPos1] = reverbFeedback0;\r\n                reverbDelayLine[reverbDelayPos2] = reverbFeedback1;\r\n                reverbDelayLine[reverbDelayPos3] = reverbFeedback2;\r\n                reverbDelayLine[reverbDelayPos] = reverbFeedback3;\r\n                reverbDelayPos = (reverbDelayPos + 1) & 0x3FFF;\r\n\r\n                // Apply master pre-gain to the sound, before limiting. Master gain slider is 0-5, but it's squared for more range (0-25).\r\n                const sampleL = masterGain * masterGain * (sampleForNoneL + chorusSampleL + sampleForReverbL + reverbSample1 + reverbSample2 + reverbSample3);\r\n                const sampleR = masterGain * masterGain * (sampleForNoneR + chorusSampleR + sampleForReverbR + reverbSample0 + reverbSample2 - reverbSample3);\r\n\r\n                /*\r\n                highpassOutput = highpassOutput * highpassFilter + sample - highpassInput;\r\n                highpassInput = sample;\r\n                // use highpassOutput instead of sample below?\r\n                */\r\n\r\n                // A compressor/limiter.\r\n                const absL: number = sampleL < 0.0 ? -sampleL : sampleL;\r\n                const absR: number = sampleR < 0.0 ? -sampleR : sampleR;\r\n                const abs: number = absL > absR ? absL : absR;\r\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\r\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\r\n                const limitRange: number = (+(abs > compressionThreshold)) + (+(abs > limitThreshold));\r\n                // Determine the target amplification based on the range of the curve\r\n                const limitTarget: number =\r\n                    (+(limitRange == 0)) * (((abs + 1 - compressionThreshold) * 0.8 + 0.25) * compressionRatio + 1.05 * (1 - compressionRatio))\r\n                    + (+(limitRange == 1)) * (1.05)\r\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - limitThreshold) * limitRatio + (1 - limitThreshold)));\r\n                // Move the limit towards the target\r\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\r\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\r\n                outputDataL[i] = sampleL * limitedVolume;\r\n                outputDataR[i] = sampleR * limitedVolume;\r\n\r\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\r\n            }\r\n\r\n            bufferIndex += runLength;\r\n\r\n            this.tickSampleCountdown -= runLength;\r\n            if (this.tickSampleCountdown <= 0) {\r\n\r\n                // Track how long tones have been released, and free them if there are too many.\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n                        const tone: Tone = this.releasedTones[channel].get(i);\r\n                        tone.ticksSinceReleased++;\r\n\r\n                        const shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n                        if (shouldFadeOutFast) {\r\n                            this.freeReleasedTone(channel, i);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Update arpeggio time, which is used to calculate arpeggio position\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                        let useArpeggioSpeed: number = instrument.arpeggioSpeed;\r\n                        if (this.isModActive(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx)) {\r\n                            useArpeggioSpeed = this.getModValue(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx, false);\r\n                            if (Number.isInteger(useArpeggioSpeed)) {\r\n                                instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                            } else {\r\n                                // Linear interpolate arpeggio values\r\n                                instrument.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\r\n                            }\r\n                        }\r\n                        else {\r\n                            instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.tick++;\r\n                this.tickSampleCountdown += samplesPerTick;\r\n                if (this.tick == Config.ticksPerPart) {\r\n                    this.tick = 0;\r\n                    this.part++;\r\n                    this.liveInputDuration--;\r\n                    var atEnd = this.part + this.beat * Config.partsPerBeat >= this.findPartsInBar(this.bar) - 1;\r\n                    // Check if any active tones should be released.\r\n                    for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                        // Check if we're at the end of the bar and have a tie-over transition. If so, do not free tone\r\n                        var carryOver = false;\r\n                        var toneCount = this.activeTones[channel].count();\r\n                        var pattern = this.song.getPattern(channel, this.bar);\r\n                        if ( pattern != null && atEnd ) {\r\n                            var instrument = pattern.instrument;\r\n                            if ( this.song.channels[channel].instruments[instrument].tieNoteTransition && toneCount > 0 ) {\r\n                                // Verify that all tie conditions are met\r\n                                // 1. Check for a note in this channel at the start of the next bar\r\n                                // 2. Check that the note's volume start matches the current volume\r\n                                // 3. Check that the shape (pitches, chord size) is a match\r\n                                // 4. Check that the instruments are the same\r\n                                var targetBar = this.bar + 1;\r\n                                if ( targetBar >= this.song.barCount || (targetBar >= this.song.loopStart + this.song.loopLength && this.loopRepeatCount != 0)) {\r\n                                    targetBar = this.song.loopStart;\r\n                                }\r\n                                var nextPattern = this.song.getPattern(channel, targetBar);\r\n                                var currNote = this.activeTones[channel].get(0).note;\r\n                                if ( currNote != null ) {\r\n                                    var pin = 0;\r\n                                    while ( currNote.pins[pin].time + currNote.start < this.part + this.beat * Config.partsPerBeat && pin < currNote.pins.length-1 )\r\n                                        pin++;\r\n                                    var currVolume = currNote.pins[pin].volume;\r\n                                    var lastInterval = currNote.pins[pin].interval;\r\n\r\n                                    if ( nextPattern != null && nextPattern.instrument == instrument ) {\r\n                                        for( let i: number = 0; i < nextPattern.notes.length; i++ ) {\r\n                                            if ( nextPattern.notes[i].start == 0\r\n                                                && nextPattern.notes[i].pins[0].volume == currVolume\r\n                                                && nextPattern.notes[i].pitches.length == currNote.pitches.length ) {\r\n                                                \r\n                                                carryOver = true;\r\n                                                for ( let j: number = 0; j < currNote.pitches.length; j++ ) {\r\n                                                    // Allow any pitch order\r\n                                                    if ( nextPattern.notes[i].pitches.findIndex( (p) => p == currNote!.pitches[j] + lastInterval ) == -1 ) {\r\n                                                        carryOver = false;\r\n                                                        j = currNote.pitches.length;\r\n                                                    }\r\n                                                }\r\n                                                i = nextPattern.notes.length;\r\n                                                \r\n                                                if ( carryOver ) {\r\n                                                    // Prior to an actual tie, all releasing for hard transitions also needs to be\r\n                                                    // cancelled. So, this check is ran a few parts before the end of a bar too.\r\n                                                    // In those cases, just set tyingOver to 0 for that duration to cancel release\r\n                                                    // handling, but not affect note start time calculations.\r\n                                                    if ( this.part + this.beat * Config.partsPerBeat < this.findPartsInBar(this.bar) ) {\r\n                                                        // Only does this if it is needed, so if we're long tying (next else-if below) then don't ruin the math.\r\n                                                        if ( this.tyingOver[channel] < 0 ) {\r\n                                                            this.tyingOver[channel] = 0;\r\n                                                        }\r\n                                                    }\r\n                                                    // Special case: tying over a whole bar, just add the length.\r\n                                                    else if ( currNote.start == 0 && this.tyingOver[channel] >= 0 ) {\r\n                                                        this.tyingOver[channel] += this.part + this.beat * Config.partsPerBeat;\r\n                                                    }\r\n                                                    else {\r\n                                                        // Set tyingOver to a number >= 0 representing how many parts back the tie note started.\r\n                                                        this.tyingOver[channel] = this.part + this.beat * Config.partsPerBeat - currNote.start;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        for (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n                            const tone: Tone = this.activeTones[channel].get(i);\r\n                            const transition: Transition = tone.instrument.getTransition();\r\n                            \r\n                            if (tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n                                // Free tone if the transition allows\r\n                                if (!(transition.isSeamless || tone.instrument.clicklessTransition || this.tyingOver[channel] >= 0)) {\r\n                                    if (transition.releases) {\r\n                                        this.releaseTone(channel, tone);\r\n                                    } else {\r\n                                        this.freeTone(tone);\r\n                                    }\r\n                                    this.activeTones[channel].remove(i);\r\n                                    i--;\r\n                                }\r\n\r\n                                // End of note: if not actively trying to carry over, kill note tie\r\n                                if ( !carryOver ) {\r\n                                    this.tyingOver[channel] = -1;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let channel: number = 0; channel < this.song.modChannelCount; channel++) {\r\n                        for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                            for (let i: number = 0; i < this.activeModTones[channel][mod].count(); i++) {\r\n                                const tone: Tone = this.activeModTones[channel][mod].get(i);\r\n                                const transition: Transition = tone.instrument.getTransition();\r\n                                if (!transition.isSeamless && tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n                                    this.freeTone(tone);\r\n                                    this.activeModTones[channel][mod].remove(i);\r\n                                    i--;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.part == Config.partsPerBeat) {\r\n                        this.part = 0;\r\n\r\n                        if (playSong) {\r\n                            this.beat++;\r\n                            if (this.beat == this.song.beatsPerBar) {\r\n                                // bar changed, reset for next bar:\r\n                                this.beat = 0;\r\n                                this.bar++;\r\n                                if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n                                    this.bar = this.song.loopStart;\r\n                                    if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n                                }\r\n                                if (this.bar >= this.song.barCount) {\r\n                                    this.bar = 0;\r\n                                    if (this.loopRepeatCount != -1) {\r\n                                        ended = true;\r\n                                        this.resetEffects();\r\n                                        this.pause();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Update mod values so that next values copy to current values\r\n            for (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\r\n                    this.modValues[setting] = this.nextModValues[setting];\r\n            }\r\n\r\n            // Set samples per tick if song tempo mods changed it\r\n            if (this.isModActive(ModSetting.mstTempo, true)) {\r\n                samplesPerTick = this.getSamplesPerTick();\r\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\r\n            }\r\n\r\n            // Bound LFO times to be within their period (to keep values from getting large)\r\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount; channel++) {\r\n                for (let instrument of this.song.channels[channel].instruments) {\r\n                    instrument.nextLFOtime = (instrument.nextLFOtime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\r\n                    instrument.arpTime = (instrument.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\r\n                }\r\n            }\r\n\r\n            for (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n                for (let channel: number = 0; channel < channelCount; channel++) {\r\n                    for (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // Optimization: Avoid persistent reverb values in the float denormal range.\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < reverbFeedback0 && reverbFeedback0 < epsilon) reverbFeedback0 = 0.0;\r\n        if (-epsilon < reverbFeedback1 && reverbFeedback1 < epsilon) reverbFeedback1 = 0.0;\r\n        if (-epsilon < reverbFeedback2 && reverbFeedback2 < epsilon) reverbFeedback2 = 0.0;\r\n        if (-epsilon < reverbFeedback3 && reverbFeedback3 < epsilon) reverbFeedback3 = 0.0;\r\n        //if (-epsilon < highpassInput && highpassInput < epsilon) highpassInput = 0.0;\r\n        //if (-epsilon < highpassOutput && highpassOutput < epsilon) highpassOutput = 0.0;\r\n        if (-epsilon < limit && limit < epsilon) limit = 0.0;\r\n\r\n        this.stereoBufferIndex = (this.stereoBufferIndex + outputBufferLength * 2) % stereoBufferLength;\r\n        this.chorusPhase = chorusPhase;\r\n        this.chorusDelayPos = chorusDelayPos;\r\n        this.reverbDelayPos = reverbDelayPos;\r\n        this.reverbFeedback0 = reverbFeedback0;\r\n        this.reverbFeedback1 = reverbFeedback1;\r\n        this.reverbFeedback2 = reverbFeedback2;\r\n        this.reverbFeedback3 = reverbFeedback3;\r\n        //this.highpassInput = highpassInput;\r\n        //this.highpassOutput = highpassOutput;\r\n        this.limit = limit;\r\n\r\n        if (playSong) {\r\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / this.song.beatsPerBar + this.bar;\r\n        }\r\n\r\n        /*\r\n        const synthDuration: number = performance.now() - synthStartTime;\r\n        // Performance measurements:\r\n        samplesAccumulated += outputBufferLength;\r\n        samplePerformance += synthDuration;\r\n    \t\r\n        if (samplesAccumulated >= 44100 * 4) {\r\n        const secondsGenerated = samplesAccumulated / 44100;\r\n        const secondsRequired = samplePerformance / 1000;\r\n        const ratio = secondsRequired / secondsGenerated;\r\n        console.log(ratio);\r\n        samplePerformance = 0;\r\n        samplesAccumulated = 0;\r\n        }\r\n        */\r\n    }\r\n\r\n    private freeTone(tone: Tone): void {\r\n        this.tonePool.pushBack(tone);\r\n    }\r\n\r\n    private newTone(): Tone {\r\n        if (this.tonePool.count() > 0) {\r\n            const tone: Tone = this.tonePool.popBack();\r\n            tone.reset();\r\n            tone.active = false;\r\n            return tone;\r\n        }\r\n        return new Tone();\r\n    }\r\n\r\n    private releaseTone(channel: number, tone: Tone): void {\r\n        if (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n            this.releasedTones[channel].pushFront(tone);\r\n        }\r\n        else {\r\n            /*\r\n            for (let mod = 0; mod < Config.modCount; mod++) {\r\n            this.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].pushFront(tone);\r\n            }\r\n            */\r\n        }\r\n    }\r\n\r\n    private freeReleasedTone(channel: number, toneIndex: number): void {\r\n        if (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n            this.freeTone(this.releasedTones[channel].get(toneIndex));\r\n            this.releasedTones[channel].remove(toneIndex);\r\n        } else {\r\n            /*\r\n            for (let mod = 0; mod < Config.modCount; mod++) {\r\n            this.freeTone(this.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].get(toneIndex));\r\n            this.releasedModTones[channel][mod].remove(toneIndex);\r\n            }\r\n            */\r\n        }\r\n    }\r\n\r\n    public freeAllTones(): void {\r\n        while (this.liveInputTones.count() > 0) {\r\n            this.freeTone(this.liveInputTones.popBack());\r\n        }\r\n        for (let i: number = 0; i < this.activeTones.length; i++) {\r\n            while (this.activeTones[i].count() > 0) {\r\n                this.freeTone(this.activeTones[i].popBack());\r\n            }\r\n        }\r\n        for (let i: number = 0; i < this.releasedTones.length; i++) {\r\n            while (this.releasedTones[i].count() > 0) {\r\n                this.freeTone(this.releasedTones[i].popBack());\r\n            }\r\n        }\r\n        for (let i = 0; i < this.activeModTones.length; i++) {\r\n            for (let mod = 0; mod < this.activeModTones[i].length; mod++) {\r\n                while (this.activeModTones[i][mod].count() > 0) {\r\n                    this.freeTone(this.activeModTones[i][mod].popBack());\r\n                }\r\n            }\r\n        }\r\n        /*\r\n        for (let i = 0; i < this.releasedModTones.length; i++) {\r\n        for (let mod = 0; mod < this.releasedModTones[i].length; mod++) {\r\n        while (this.releasedModTones[i][mod].count() > 0) {\r\n        this.freeTone(this.releasedModTones[i][mod].popBack());\r\n        }\r\n        }\r\n        }\r\n        */\r\n    }\r\n\r\n    private determineLiveInputTones(song: Song): void {\r\n        const toneList: Deque<Tone> = this.liveInputTones;\r\n        const pitches: number[] = this.liveInputPitches;\r\n        let toneCount: number = 0;\r\n        if (this.liveInputDuration > 0) {\r\n            const instrument: Instrument = song.channels[this.liveInputChannel].instruments[song.getPatternInstrument(this.liveInputChannel, this.bar)];\r\n\r\n            if (instrument.getChord().arpeggiates) {\r\n                let tone: Tone;\r\n                if (toneList.count() == 0) {\r\n                    tone = this.newTone();\r\n                    toneList.pushBack(tone);\r\n                } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                    this.releaseTone(this.liveInputChannel, toneList.popFront());\r\n                    tone = this.newTone();\r\n                    toneList.pushBack(tone);\r\n                } else {\r\n                    tone = toneList.get(0);\r\n                }\r\n                toneCount = 1;\r\n\r\n                for (let i: number = 0; i < pitches.length; i++) {\r\n                    tone.pitches[i] = pitches[i];\r\n                }\r\n                tone.pitchCount = pitches.length;\r\n                tone.chordSize = 1;\r\n                tone.instrument = instrument;\r\n                tone.note = tone.prevNote = tone.nextNote = null;\r\n            } else {\r\n                //const transition: Transition = instrument.getTransition();\r\n                for (let i: number = 0; i < pitches.length; i++) {\r\n                    //const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= i) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                        this.releaseTone(this.liveInputChannel, toneList.get(i));\r\n                        tone = this.newTone();\r\n                        toneList.set(i, tone);\r\n                    } else {\r\n                        tone = toneList.get(i);\r\n                    }\r\n                    toneCount++;\r\n\r\n                    tone.pitches[0] = pitches[i];\r\n                    tone.pitchCount = 1;\r\n                    tone.chordSize = pitches.length;\r\n                    tone.instrument = instrument;\r\n                    tone.note = tone.prevNote = tone.nextNote = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        while (toneList.count() > toneCount) {\r\n            this.releaseTone(this.liveInputChannel, toneList.popBack());\r\n        }\r\n\r\n        this.liveInputStarted = false;\r\n    }\r\n\r\n    private determineCurrentActiveTones(song: Song, channel: number, playSong: boolean): void {\r\n        const instrument: Instrument = song.channels[channel].instruments[song.getPatternInstrument(channel, this.bar)];\r\n        const pattern: Pattern | null = song.getPattern(channel, this.bar);\r\n        const time: number = this.part + this.beat * Config.partsPerBeat;\r\n\r\n        if (playSong && song.getChannelIsMod(channel) && !song.channels[channel].muted) {\r\n            // Offset channel (first mod channel is 0 index in mod tone array)\r\n            let modChannelIdx = channel - (song.pitchChannelCount + song.noiseChannelCount);\r\n\r\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\r\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\r\n            let notes: (Note | null)[] = [];\r\n            let prevNotes: (Note | null)[] = [];\r\n            let nextNotes: (Note | null)[] = [];\r\n            let fillCount: number = Config.modCount;\r\n            while (fillCount--) {\r\n                notes.push(null);\r\n                prevNotes.push(null);\r\n                nextNotes.push(null);\r\n            }\r\n\r\n            if (pattern != null) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= time) {\r\n                        // Actually need to check which note starts closer to the start of this note.\r\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                    else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                    }\r\n                    else if (pattern.notes[i].start > time) {\r\n                        // Actually need to check which note starts closer to the end of this note.\r\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                const toneList: Deque<Tone> = this.activeModTones[modChannelIdx][mod];\r\n                if (notes[mod] != null) {\r\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\r\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\r\n                    this.syncTones(channel, toneList, instrument, (notes[mod] as Note).pitches, (notes[mod] as Note), (prevNotes[mod] as Note), (nextNotes[mod] as Note), time);\r\n                } else {\r\n                    while (toneList.count() > 0) {\r\n                        this.freeTone(toneList.popBack());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (!song.getChannelIsMod(channel)) {\r\n\r\n            let note: Note | null = null;\r\n            let prevNote: Note | null = null;\r\n            let nextNote: Note | null = null;\r\n\r\n            if (playSong && pattern != null && !song.channels[channel].muted) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= time) {\r\n                        prevNote = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n                        note = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start > time) {\r\n                        nextNote = pattern.notes[i];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const toneList: Deque<Tone> = this.activeTones[channel];\r\n            if (note != null) {\r\n                if (prevNote != null && prevNote.end != note.start) prevNote = null;\r\n                if (nextNote != null && nextNote.start != note.end) nextNote = null;\r\n                this.syncTones(channel, toneList, instrument, note.pitches, note, prevNote, nextNote, time);\r\n            } else {\r\n                while (toneList.count() > 0) {\r\n                    // Automatically free or release seamless tones if there's no new note to take over.\r\n                    if (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n                        this.releaseTone(channel, toneList.popBack());\r\n                    } else {\r\n                        this.freeTone(toneList.popBack());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private syncTones(channel: number, toneList: Deque<Tone>, instrument: Instrument, pitches: number[], note: Note, prevNote: Note | null, nextNote: Note | null, currentPart: number): void {\r\n        let toneCount: number = 0;\r\n        if (instrument.getChord().arpeggiates) {\r\n            let tone: Tone;\r\n            if (toneList.count() == 0) {\r\n                tone = this.newTone();\r\n                toneList.pushBack(tone);\r\n            } else {\r\n                tone = toneList.get(0);\r\n            }\r\n            toneCount = 1;\r\n\r\n            for (let i: number = 0; i < pitches.length; i++) {\r\n                tone.pitches[i] = pitches[i];\r\n            }\r\n            tone.pitchCount = pitches.length;\r\n            tone.chordSize = 1;\r\n            tone.instrument = instrument;\r\n            tone.note = note;\r\n            tone.noteStart = note.start - Math.max(0, this.tyingOver[channel]);\r\n            tone.noteEnd = note.end;\r\n            tone.prevNote = prevNote;\r\n            tone.nextNote = nextNote;\r\n            tone.prevNotePitchIndex = 0;\r\n            tone.nextNotePitchIndex = 0;\r\n        } else {\r\n            const transition: Transition = instrument.getTransition();\r\n            for (let i: number = 0; i < pitches.length; i++) {\r\n\r\n                const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n                let prevNoteForThisTone: Note | null = (prevNote && prevNote.pitches.length > i) ? prevNote : null;\r\n                let noteForThisTone: Note = note;\r\n                let nextNoteForThisTone: Note | null = (nextNote && nextNote.pitches.length > i) ? nextNote : null;\r\n                let noteStart: number = noteForThisTone.start + strumOffsetParts - Math.max(0, this.tyingOver[channel]);\r\n\r\n                if (noteStart > currentPart) {\r\n                    if (toneList.count() > i && (transition.isSeamless || this.tyingOver[channel] >= 0 ) && prevNoteForThisTone != null) {\r\n                        nextNoteForThisTone = noteForThisTone;\r\n                        noteForThisTone = prevNoteForThisTone;\r\n                        prevNoteForThisTone = null;\r\n                        noteStart = noteForThisTone.start + strumOffsetParts - Math.max(0, this.tyingOver[channel]) ;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                let noteEnd: number = noteForThisTone.end;\r\n                if ((transition.isSeamless || this.tyingOver[channel] >= 0 ) && nextNoteForThisTone != null) {\r\n                    noteEnd = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEnd + strumOffsetParts);\r\n                }\r\n\r\n\r\n                let tone: Tone;\r\n                if (toneList.count() <= i) {\r\n                    tone = this.newTone();\r\n                    toneList.pushBack(tone);\r\n                } else {\r\n                    tone = toneList.get(i);\r\n                }\r\n                toneCount++;\r\n\r\n                tone.pitches[0] = noteForThisTone.pitches[i];\r\n                tone.pitchCount = 1;\r\n                tone.chordSize = noteForThisTone.pitches.length;\r\n                tone.instrument = instrument;\r\n                tone.note = noteForThisTone;\r\n                tone.noteStart = noteStart;\r\n                tone.noteEnd = noteEnd;\r\n                tone.prevNote = prevNoteForThisTone;\r\n                tone.nextNote = nextNoteForThisTone;\r\n                tone.prevNotePitchIndex = i;\r\n                tone.nextNotePitchIndex = i;\r\n\r\n            }\r\n        }\r\n\r\n        while (toneList.count() > toneCount) {\r\n            // Automatically free or release seamless tones if there's no new note to take over.\r\n            if (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n                this.releaseTone(channel, toneList.popBack());\r\n            } else {\r\n                this.freeTone(toneList.popBack());\r\n            }\r\n        }\r\n    }\r\n\r\n    private playTone(song: Song, stereoBufferIndex: number, stereoBufferLength: number, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        Synth.computeTone(this, song, channel, samplesPerTick, runLength, tone, released, shouldFadeOutFast);\r\n        let synthBuffer: Float32Array;\r\n        switch (tone.instrument.effects) {\r\n            case 0: synthBuffer = this.samplesForNone!; break;\r\n            case 1: synthBuffer = this.samplesForReverb!; break;\r\n            case 2: synthBuffer = this.samplesForChorus!; break;\r\n            case 3: synthBuffer = this.samplesForChorusReverb!; break;\r\n            default: throw new Error();\r\n        }\r\n        const synthesizer: Function = Synth.getInstrumentSynthFunction(tone.instrument);\r\n        synthesizer(this, synthBuffer, stereoBufferIndex, stereoBufferLength, runLength * 2, tone, tone.instrument);\r\n    }\r\n\r\n    private static computeEnvelope(envelope: Envelope, time: number, beats: number, customVolume: number): number {\r\n        switch (envelope.type) {\r\n            case EnvelopeType.custom: return customVolume;\r\n            case EnvelopeType.steady: return 1.0;\r\n            case EnvelopeType.twang:\r\n                return 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.swell:\r\n                return 1.0 - 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.tremolo:\r\n                return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\r\n            case EnvelopeType.tremolo2:\r\n                return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\r\n            case EnvelopeType.punch:\r\n                return Math.max(1.0, 2.0 - time * 10.0);\r\n            case EnvelopeType.flare:\r\n                const speed: number = envelope.speed;\r\n                const attack: number = 0.25 / Math.sqrt(speed);\r\n                return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * speed);\r\n            case EnvelopeType.decay:\r\n                return Math.pow(2, -envelope.speed * time);\r\n            case EnvelopeType.wibble:\r\n                let temp = 0.5 - Math.cos(beats * envelope.speed) * 0.5;\r\n                temp = 1.0 / (1.0 + time * (envelope.speed - (temp / (1.5 / envelope.speed))));\r\n                temp = temp > 0.0 ? temp : 0.0;\r\n                return temp;\r\n            case EnvelopeType.hard:\r\n                return time < 8 / envelope.speed ? 1.0 : 0.0;\r\n            case EnvelopeType.linear:\r\n                let lin = (1.0 - (time / (16 / envelope.speed)));\r\n                lin = lin > 0.0 ? lin : 0.0;\r\n                return lin;\r\n            default: throw new Error(\"Unrecognized operator envelope type.\");\r\n        }\r\n    }\r\n\r\n    private static computeChordVolume(chordSize: number): number {\r\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\r\n    }\r\n\r\n    private static computeTone(synth: Synth, song: Song, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        const instrument: Instrument = tone.instrument;\r\n        const transition: Transition = instrument.getTransition();\r\n        const chord: Chord = instrument.getChord();\r\n        const chordVolume: number = chord.arpeggiates ? 1 : Synth.computeChordVolume(tone.chordSize);\r\n        const isNoiseChannel: boolean = song.getChannelIsNoise(channel);\r\n        const intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\r\n        const secondsPerPart: number = Config.ticksPerPart * samplesPerTick / synth.samplesPerSecond;\r\n        const beatsPerPart: number = 1.0 / Config.partsPerBeat;\r\n        const toneWasActive: boolean = tone.active;\r\n        const tickSampleCountdown: number = synth.tickSampleCountdown;\r\n        const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n        const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n        const ticksIntoBar: number = (synth.beat * Config.partsPerBeat + synth.part) * Config.ticksPerPart + synth.tick;\r\n        const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n        const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n        const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n        const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n        const instrumentIdx: number = (synth.song as Song).channels[channel].instruments.findIndex(i => i == instrument);\r\n        const treatAsSeamless: boolean = transition.isSeamless || synth.tyingOver[channel] >= 0;\r\n            \r\n        tone.phaseDeltaScale = 0.0;\r\n        tone.filter = 1.0;\r\n        tone.filterScale = 1.0;\r\n        tone.vibratoScale = 0.0;\r\n        tone.intervalMult = 1.0;\r\n        tone.intervalVolumeMult = 1.0;\r\n        tone.active = false;\r\n\r\n        let startPan: number = instrument.pan;\r\n        let endPan: number = instrument.pan;\r\n        if (synth.isModActive(ModSetting.mstPan, false, channel, instrumentIdx)) {\r\n            startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\r\n            endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\r\n        }\r\n\r\n        let startPanDelay: number = instrument.panDelay;\r\n        let endPanDelay: number = instrument.panDelay;\r\n        if (synth.isModActive(ModSetting.mstPanDelay, false, channel, instrumentIdx)) {\r\n            startPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, false);\r\n            endPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, true);\r\n        }\r\n\r\n        const useStartPan: number = (startPan - Config.panCenter) / Config.panCenter;\r\n        const useEndPan: number = (endPan - Config.panCenter) / Config.panCenter;\r\n        // 10 pan delay is the same amount as vanilla beepbox.\r\n        const maxDelayStart: number = startPanDelay * 0.00013 * synth.samplesPerSecond;\r\n        const maxDelayEnd: number = endPanDelay * 0.00013 * synth.samplesPerSecond;\r\n        tone.stereoDelayStart = -useStartPan * maxDelayStart;\r\n        const delayEnd: number = -useEndPan * maxDelayEnd;\r\n        tone.stereoDelayDelta = (delayEnd - tone.stereoDelayStart) / runLength;\r\n        tone.stereoVolumeLStart = Math.cos((1 + useStartPan) * Math.PI * 0.25) * 1.414;\r\n        tone.stereoVolumeRStart = Math.cos((1 - useStartPan) * Math.PI * 0.25) * 1.414;\r\n        const stereoVolumeLEnd: number = Math.cos((1 + useEndPan) * Math.PI * 0.25) * 1.414;\r\n        const stereoVolumeREnd: number = Math.cos((1 - useEndPan) * Math.PI * 0.25) * 1.414;\r\n        tone.stereoVolumeLDelta = (stereoVolumeLEnd - tone.stereoVolumeLStart) / runLength;\r\n        tone.stereoVolumeRDelta = (stereoVolumeREnd - tone.stereoVolumeRStart) / runLength;\r\n\r\n        let resetPhases: boolean = true;\r\n        let partsSinceStart: number = 0.0;\r\n        let intervalStart: number = 0.0;\r\n        let intervalEnd: number = 0.0;\r\n        let transitionVolumeStart: number = 1.0;\r\n        let transitionVolumeEnd: number = 1.0;\r\n        let chordVolumeStart: number = chordVolume;\r\n        let chordVolumeEnd: number = chordVolume;\r\n        let customVolumeStart: number = 0.0;\r\n        let customVolumeEnd: number = 0.0;\r\n        let decayTimeStart: number = 0.0;\r\n        let decayTimeEnd: number = 0.0;\r\n\r\n        let volumeReferencePitch: number;\r\n        let basePitch: number;\r\n        let baseVolume: number;\r\n        let pitchDamping: number;\r\n        if (instrument.type == InstrumentType.spectrum) {\r\n            if (isNoiseChannel) {\r\n                basePitch = Config.spectrumBasePitch;\r\n                baseVolume = 0.6; // Note: spectrum is louder for drum channels than pitch channels!\r\n            } else {\r\n                basePitch = Config.keys[song.key].basePitch;\r\n                baseVolume = 0.3;\r\n            }\r\n            volumeReferencePitch = Config.spectrumBasePitch;\r\n            pitchDamping = 28;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            basePitch = Config.spectrumBasePitch;\r\n            baseVolume = 0.45;\r\n            volumeReferencePitch = basePitch;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            basePitch = Config.chipNoises[instrument.chipNoise].basePitch;\r\n            baseVolume = 0.19;\r\n            volumeReferencePitch = basePitch;\r\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\r\n        } else if (instrument.type == InstrumentType.fm) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.03;\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.03375; // looks low compared to drums, but it's doubled for chorus and drums tend to be loud anyway.\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.025;\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.04725;\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            baseVolume = 1.0;\r\n            volumeReferencePitch = 0;\r\n            pitchDamping = 1.0;\r\n            basePitch = 0;\r\n        } else {\r\n            throw new Error(\"Unknown instrument type in computeTone.\");\r\n        }\r\n\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            tone.phaseDeltas[i] = 0.0;\r\n            tone.volumeStarts[i] = 0.0;\r\n            tone.volumeDeltas[i] = 0.0;\r\n        }\r\n\r\n        if (released) {\r\n            const ticksSoFar: number = tone.noteLengthTicks + tone.ticksSinceReleased;\r\n            const startTicksSinceReleased: number = tone.ticksSinceReleased + startRatio;\r\n            const endTicksSinceReleased: number = tone.ticksSinceReleased + endRatio;\r\n            const startTick: number = tone.noteLengthTicks + startTicksSinceReleased;\r\n            const endTick: number = tone.noteLengthTicks + endTicksSinceReleased;\r\n            const toneTransition: Transition = tone.instrument.getTransition();\r\n            resetPhases = false;\r\n            partsSinceStart = Math.floor(ticksSoFar / Config.ticksPerPart);\r\n            intervalStart = intervalEnd = tone.lastInterval;\r\n            customVolumeStart = customVolumeEnd = Synth.expressionToVolumeMult(tone.lastVolume);\r\n            transitionVolumeStart = Synth.expressionToVolumeMult((1.0 - startTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n            transitionVolumeEnd = Synth.expressionToVolumeMult((1.0 - endTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n            decayTimeStart = startTick / Config.ticksPerPart;\r\n            decayTimeEnd = endTick / Config.ticksPerPart;\r\n\r\n            if (shouldFadeOutFast) {\r\n                transitionVolumeStart *= 1.0 - startRatio;\r\n                transitionVolumeEnd *= 1.0 - endRatio;\r\n            }\r\n        } else if (tone.note == null) {\r\n            transitionVolumeStart = transitionVolumeEnd = 1;\r\n            customVolumeStart = customVolumeEnd = 1;\r\n            tone.lastInterval = 0;\r\n            tone.lastVolume = 6;\r\n            tone.ticksSinceReleased = 0;\r\n            resetPhases = false;\r\n\r\n            const heldTicksStart: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n            tone.liveInputSamplesHeld += runLength;\r\n            const heldTicksEnd: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n            tone.noteLengthTicks = heldTicksEnd;\r\n            const heldPartsStart: number = heldTicksStart / Config.ticksPerPart;\r\n            const heldPartsEnd: number = heldTicksEnd / Config.ticksPerPart;\r\n            partsSinceStart = Math.floor(heldPartsStart);\r\n            decayTimeStart = heldPartsStart;\r\n            decayTimeEnd = heldPartsEnd;\r\n        } else {\r\n            const note: Note = tone.note;\r\n            const prevNote: Note | null = tone.prevNote;\r\n            const nextNote: Note | null = tone.nextNote;\r\n\r\n            const time: number = synth.part + synth.beat * Config.partsPerBeat;\r\n            const partsPerBar: number = Config.partsPerBeat * song.beatsPerBar;\r\n            const noteStart: number = tone.noteStart;// - Math.max(0, synth.tyingOver[channel] || 0);\r\n            const noteEnd: number = tone.noteEnd;\r\n\r\n            partsSinceStart = time - noteStart;\r\n\r\n            let endPinIndex: number;\r\n            for (endPinIndex = 1; endPinIndex < note.pins.length - 1; endPinIndex++) {\r\n                if (note.pins[endPinIndex].time + note.start > time) break;\r\n            }\r\n            const startPin: NotePin = note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = note.pins[endPinIndex];\r\n            const noteStartTick: number = noteStart * Config.ticksPerPart;\r\n            const noteEndTick: number = noteEnd * Config.ticksPerPart;\r\n            const noteLengthTicks: number = noteEndTick - noteStartTick;\r\n            const pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\r\n            const pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\r\n\r\n            tone.lastInterval = note.pins[note.pins.length - 1].interval;\r\n            tone.lastVolume = note.pins[note.pins.length - 1].volume;\r\n            tone.ticksSinceReleased = 0;\r\n            tone.noteLengthTicks = noteLengthTicks;\r\n\r\n            const tickTimeStart: number = time * Config.ticksPerPart + synth.tick;\r\n            const tickTimeEnd: number = time * Config.ticksPerPart + synth.tick + 1;\r\n            const noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\r\n            const noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\r\n            const pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\r\n            const pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\r\n            let customVolumeTickStart: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioStart;\r\n            let customVolumeTickEnd: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioEnd;\r\n            let transitionVolumeTickStart: number = 1.0;\r\n            let transitionVolumeTickEnd: number = 1.0;\r\n            let chordVolumeTickStart: number = chordVolume;\r\n            let chordVolumeTickEnd: number = chordVolume;\r\n            let intervalTickStart: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n            let intervalTickEnd: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n            let decayTimeTickStart: number = partTimeTickStart - noteStart;\r\n            let decayTimeTickEnd: number = partTimeTickEnd - noteStart;\r\n            resetPhases = (tickTimeStart + startRatio - noteStartTick == 0.0) || !toneWasActive;\r\n\r\n            // if seamless, don't reset phases at start. (it's probably not necessary to constantly reset phases if there are no notes? Just do it once when note starts? But make sure that reset phases doesn't also reset stuff that this function did to set up the tone. Remember when the first run length was lost!\r\n            // if slide, average the interval, decayTime, and custom volume at the endpoints and interpolate between over slide duration.\r\n            // note that currently seamless and slide make different assumptions about whether a note at the end of a bar will connect with the next bar!\r\n            const maximumSlideTicks: number = noteLengthTicks * 0.5;\r\n            if (treatAsSeamless && !transition.slides && note.start == 0) {\r\n                // Special case for seamless, no-slide transition: assume the previous bar ends with another seamless note, don't reset tone history.\r\n                resetPhases = !toneWasActive;\r\n            } else if (treatAsSeamless && prevNote != null) {\r\n                resetPhases = !toneWasActive;\r\n                if (transition.slides) {\r\n                    const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n                    const slideRatioStartTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickStart / slideTicks);\r\n                    const slideRatioEndTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickEnd / slideTicks);\r\n                    const intervalDiff: number = ((prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval) - tone.pitches[0]) * 0.5;\r\n                    const volumeDiff: number = (prevNote.pins[prevNote.pins.length - 1].volume - note.pins[0].volume) * 0.5;\r\n                    const decayTimeDiff: number = (prevNote.end - prevNote.start) * 0.5;\r\n                    intervalTickStart += slideRatioStartTick * intervalDiff;\r\n                    intervalTickEnd += slideRatioEndTick * intervalDiff;\r\n                    customVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n                    customVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n                    decayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n                    decayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n                    if (!chord.arpeggiates) {\r\n                        const chordSizeDiff: number = (prevNote.pitches.length - tone.chordSize) * 0.5;\r\n                        chordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n                        chordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n                    }\r\n                }\r\n            }\r\n            if (treatAsSeamless && !transition.slides && note.end == partsPerBar) {\r\n                // Special case for seamless, no-slide transition: assume the next bar starts with another seamless note, don't fade out.\r\n            } else if (treatAsSeamless && nextNote != null) {\r\n                if (transition.slides) {\r\n                    const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n                    const slideRatioStartTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickStart) / slideTicks);\r\n                    const slideRatioEndTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickEnd) / slideTicks);\r\n                    const intervalDiff: number = (nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + note.pins[note.pins.length - 1].interval)) * 0.5;\r\n                    const volumeDiff: number = (nextNote.pins[0].volume - note.pins[note.pins.length - 1].volume) * 0.5;\r\n                    const decayTimeDiff: number = -(noteEnd - noteStart) * 0.5;\r\n                    intervalTickStart += slideRatioStartTick * intervalDiff;\r\n                    intervalTickEnd += slideRatioEndTick * intervalDiff;\r\n                    customVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n                    customVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n                    decayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n                    decayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n                    if (!chord.arpeggiates) {\r\n                        const chordSizeDiff: number = (nextNote.pitches.length - tone.chordSize) * 0.5;\r\n                        chordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n                        chordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n                    }\r\n                }\r\n            } else if (!(transition.releases && synth.tyingOver[channel] < 0 )) {\r\n                const releaseTicks: number = transition.releaseTicks;\r\n                if (releaseTicks > 0.0) {\r\n                    transitionVolumeTickStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / releaseTicks);\r\n                    transitionVolumeTickEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / releaseTicks);\r\n                }\r\n            }\r\n\r\n            intervalStart = intervalTickStart + (intervalTickEnd - intervalTickStart) * startRatio;\r\n            intervalEnd = intervalTickStart + (intervalTickEnd - intervalTickStart) * endRatio;\r\n            if (instrument.type != InstrumentType.mod) {\r\n                customVolumeStart = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * startRatio);\r\n                customVolumeEnd = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * endRatio);\r\n            } else {\r\n                customVolumeStart = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.max(0.0, startRatio);\r\n                customVolumeEnd = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.min(1.0, endRatio);\r\n                tone.customVolumeStart = customVolumeStart;\r\n                tone.customVolumeEnd = customVolumeEnd;\r\n            }\r\n            transitionVolumeStart = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * startRatio;\r\n            transitionVolumeEnd = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * endRatio;\r\n            chordVolumeStart = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * startRatio;\r\n            chordVolumeEnd = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * endRatio;\r\n            decayTimeStart = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * startRatio;\r\n            decayTimeEnd = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * endRatio;\r\n        }\r\n\r\n        const sampleTime: number = 1.0 / synth.samplesPerSecond;\r\n        tone.active = true;\r\n\r\n        if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.fm || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.spectrum) {\r\n\r\n            const lfoEffectStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.LFOtime);\r\n            const lfoEffectEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.nextLFOtime);\r\n\r\n            let useVibratoStart: number = instrument.vibratoDepth;\r\n            let useVibratoEnd: number = instrument.vibratoDepth;\r\n\r\n            if (synth.isModActive(ModSetting.mstVibratoDepth, false, channel, instrumentIdx)) {\r\n                useVibratoStart = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, false) / 25;\r\n                useVibratoEnd = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, true) / 25;\r\n            }\r\n\r\n            // Only use vibrato properties if the instrument's vibrato is custom or mods are applied to it\r\n            let partsStart: number;\r\n            let partsEnd: number;\r\n            const activeVibratoDelayMods: boolean = synth.isModActive(ModSetting.mstVibratoDelay, false, channel, instrumentIdx);\r\n            if (instrument.vibrato != Config.vibratos.length && !activeVibratoDelayMods) {\r\n                partsStart = Config.vibratos[instrument.vibrato].delayParts;\r\n                partsEnd = Config.vibratos[instrument.vibrato].delayParts;\r\n            }\r\n            else {\r\n                let vibratoDelayStart: number = instrument.vibratoDelay;\r\n                let vibratoDelayEnd: number = instrument.vibratoDelay;\r\n\r\n                if (activeVibratoDelayMods) {\r\n                    vibratoDelayStart = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, false);\r\n                    vibratoDelayEnd = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, true);\r\n\r\n                    // Special case - max vibrato delay means neeeeeever vibrato.\r\n                    if (vibratoDelayStart == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n                        vibratoDelayStart = Number.MAX_VALUE;\r\n                    }\r\n                    if (vibratoDelayEnd == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n                        vibratoDelayEnd = Number.MAX_VALUE;\r\n                    }\r\n                }\r\n\r\n                partsStart = vibratoDelayStart;\r\n                partsEnd = vibratoDelayEnd;\r\n\r\n            }\r\n\r\n            const vibratoScaleStart: number = (partsSinceStart < partsStart) ? 0.0 : useVibratoStart;\r\n            const vibratoScaleEnd: number = (partsSinceStart < partsEnd) ? 0.0 : useVibratoEnd;\r\n\r\n            const vibratoStart: number = vibratoScaleStart * lfoEffectStart;\r\n            const vibratoEnd: number = vibratoScaleEnd * lfoEffectEnd;\r\n            intervalStart += vibratoStart;\r\n            intervalEnd += vibratoEnd;\r\n        }\r\n\r\n        if (!treatAsSeamless || (!(!transition.slides && tone.note != null && tone.note.start == 0) && !(tone.prevNote != null))) {\r\n            const attackSeconds: number = transition.attackSeconds;\r\n            if (attackSeconds > 0.0) {\r\n                transitionVolumeStart *= Math.min(1.0, secondsPerPart * decayTimeStart / attackSeconds);\r\n                transitionVolumeEnd *= Math.min(1.0, secondsPerPart * decayTimeEnd / attackSeconds);\r\n            }\r\n        }\r\n\r\n        const instrumentVolumeMult: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\r\n\r\n        if (instrument.type == InstrumentType.drumset) {\r\n            // It's possible that the note will change while the user is editing it,\r\n            // but the tone's pitches don't get updated because the tone has already\r\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\r\n            tone.drumsetPitch = tone.pitches[0];\r\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\r\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\r\n        }\r\n\r\n        let filterCutModStart: number = instrument.filterCutoff;\r\n        let filterCutModEnd: number = instrument.filterCutoff;\r\n        if (synth.isModActive(ModSetting.mstFilterCut, false, channel, instrumentIdx)) {\r\n            filterCutModStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, false), ModSetting.mstFilterCut);\r\n            filterCutModEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, true), ModSetting.mstFilterCut);\r\n        }\r\n\r\n        let cutoffOctavesModStart: number;\r\n        let cutoffOctavesModEnd: number;\r\n        if (instrument.type == InstrumentType.drumset) {\r\n            cutoffOctavesModStart = 0;\r\n            cutoffOctavesModEnd = 0;\r\n        }\r\n        else {\r\n            cutoffOctavesModStart = (filterCutModStart - (Config.filterCutoffRange - 1)) * 0.5;\r\n            cutoffOctavesModEnd = (filterCutModEnd - (Config.filterCutoffRange - 1)) * 0.5;\r\n        }\r\n\r\n        const filterEnvelope: Envelope = (instrument.type == InstrumentType.drumset) ? instrument.getDrumsetEnvelope(tone.drumsetPitch) : instrument.getFilterEnvelope();\r\n        const filterCutoffHzStart: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModStart);\r\n        const filterCutoffHzEnd: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModEnd);\r\n        const filterBaseStart: number = 2.0 * Math.sin(Math.PI * filterCutoffHzStart / synth.samplesPerSecond);\r\n        const filterBaseEnd: number = 2.0 * Math.sin(Math.PI * filterCutoffHzEnd / synth.samplesPerSecond);\r\n        const filterMin: number = 2.0 * Math.sin(Math.PI * Config.filterCutoffMinHz / synth.samplesPerSecond);\r\n        tone.filter = filterBaseStart * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n        let endFilter: number = filterBaseEnd * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n        tone.filter = Math.min(Config.filterMax, Math.max(filterMin, tone.filter));\r\n        endFilter = Math.min(Config.filterMax, Math.max(filterMin, endFilter));\r\n        tone.filterScale = Math.pow(endFilter / tone.filter, 1.0 / runLength);\r\n\r\n        let filterVolumeStart: number = Math.pow(0.5, cutoffOctavesModStart * 0.35);\r\n        let filterVolumeEnd: number = Math.pow(0.5, cutoffOctavesModEnd * 0.35);\r\n\r\n        tone.filterResonanceStart = instrument.getFilterResonance();\r\n        tone.filterResonanceDelta = 0.0;\r\n\r\n        let useFilterResonanceStart: number = instrument.filterResonance;\r\n        let useFilterResonanceEnd: number = instrument.filterResonance;\r\n\r\n        tone.isFirstOrder = (instrument.type == InstrumentType.drumset) ? false : (useFilterResonanceStart == 0);\r\n\r\n        if (synth.isModActive(ModSetting.mstFilterPeak, false, channel, instrumentIdx)) {\r\n            // This flag is used to avoid the special casing when filter resonance == 0 without mods. So, it will sound a bit different,\r\n            // but the effect and ability to smoothly modulate will be preserved.\r\n            tone.isFirstOrder = false;\r\n\r\n            useFilterResonanceStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, false), ModSetting.mstFilterPeak);\r\n            useFilterResonanceEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, true), ModSetting.mstFilterPeak);\r\n\r\n            // Also set cut in the tone.\r\n            tone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n            const filterResonanceEnd: number = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceEnd - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\r\n            // Just a linear delta. Could get messy since it's not an amazing approximation of sqrt?\r\n            tone.filterResonanceDelta = (filterResonanceEnd - tone.filterResonanceStart) / runLength;\r\n        }\r\n        else {\r\n            // Still need to compute this, mods or no. This calc is delegated to the tone level instead of the synth level, a notable difference from beepbox.\r\n            // No functional difference though.\r\n            tone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n        }\r\n\r\n        if (tone.isFirstOrder == false) {\r\n            filterVolumeStart = Math.pow(filterVolumeStart, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceStart - 1));\r\n            filterVolumeEnd = Math.pow(filterVolumeEnd, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceEnd - 1));\r\n        }\r\n        if (filterEnvelope.type == EnvelopeType.decay) {\r\n            filterVolumeStart *= (1.25 + .025 * filterEnvelope.speed);\r\n            filterVolumeEnd *= (1.25 + .025 * filterEnvelope.speed);\r\n        } else if (filterEnvelope.type == EnvelopeType.twang) {\r\n            filterVolumeStart *= (1 + .02 * filterEnvelope.speed);\r\n            filterVolumeEnd *= (1 + .02 * filterEnvelope.speed);\r\n        }\r\n\r\n        if (resetPhases) {\r\n            tone.reset();\r\n        }\r\n\r\n        if (instrument.type == InstrumentType.fm) {\r\n            // phase modulation!\r\n\r\n            let sineVolumeBoostStart: number = 1.0;\r\n            let sineVolumeBoostEnd: number = 1.0;\r\n            let totalCarrierVolumeStart: number = 0.0;\r\n            let totalCarrierVolumeEnd: number = 0.0;\r\n\r\n            let arpeggioInterval: number = 0;\r\n            if (tone.pitchCount > 1 && !chord.harmonizes) {\r\n                const arpeggio: number = Math.floor((instrument.arpTime) / Config.ticksPerArpeggio);\r\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n            }\r\n\r\n            let detuneStart: number = instrument.detune / 25;\r\n            let detuneEnd: number = instrument.detune / 25;\r\n            if (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n                detuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n                detuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n            }\r\n\r\n            if (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n                detuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n                detuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n            }\r\n\r\n            const carrierCount: number = Config.algorithms[instrument.algorithm].carrierCount;\r\n            for (let i: number = 0; i < Config.operatorCount; i++) {\r\n\r\n                const associatedCarrierIndex: number = Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1;\r\n                const pitch: number = tone.pitches[!chord.harmonizes ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\r\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\r\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\r\n                const startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale + interval;\r\n                const startFreq: number = freqMult * (Instrument.frequencyFromPitch(startPitch)) + Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n\r\n                tone.phaseDeltas[i] = startFreq * sampleTime * Config.sineWaveLength;\r\n\r\n                let amplitudeStart: number = instrument.operators[i].amplitude;\r\n                let amplitudeEnd: number = instrument.operators[i].amplitude;\r\n                if (synth.isModActive(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx)) {\r\n                    amplitudeStart *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, false) / 15.0;\r\n                    amplitudeEnd *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, true) / 15.0;\r\n                }\r\n\r\n                const amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\r\n                const amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\r\n                const amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n                const amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n                let volumeStart: number = amplitudeMultStart;\r\n                let volumeEnd: number = amplitudeMultEnd;\r\n\r\n                // Check for mod-related volume delta\r\n                if (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                    const startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n                    const endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n                    volumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n                    volumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n                }\r\n\r\n                // Check for SONG mod-related volume delta\r\n                if (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n                    volumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n                    volumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n                }\r\n\r\n                if (i < carrierCount) {\r\n                    // carrier\r\n                    const endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale + interval;\r\n                    const pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n                    const pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n                    volumeStart *= pitchVolumeStart;\r\n                    volumeEnd *= pitchVolumeEnd;\r\n\r\n                    totalCarrierVolumeStart += amplitudeCurveStart;\r\n                    totalCarrierVolumeEnd += amplitudeCurveEnd;\r\n                } else {\r\n                    // modulator\r\n                    volumeStart *= Config.sineWaveLength * 1.5;\r\n                    volumeEnd *= Config.sineWaveLength * 1.5;\r\n\r\n                    sineVolumeBoostStart *= 1.0 - Math.min(1.0, amplitudeStart / 15);\r\n                    sineVolumeBoostEnd *= 1.0 - Math.min(1.0, amplitudeEnd / 15);\r\n                }\r\n                const operatorEnvelope: Envelope = Config.envelopes[instrument.operators[i].envelope];\r\n\r\n                volumeStart *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n                volumeEnd *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n                tone.volumeStarts[i] = volumeStart;\r\n                tone.volumeDeltas[i] = (volumeEnd - volumeStart) / runLength;\r\n            }\r\n\r\n            let useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\r\n            let useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\r\n            if (synth.isModActive(ModSetting.mstFMFeedback, false, channel, instrumentIdx)) {\r\n                useFeedbackAmplitudeStart *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, false) / 15.0;\r\n                useFeedbackAmplitudeEnd *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, true) / 15.0;\r\n            }\r\n\r\n            const feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\r\n            const feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\r\n            const feedbackEnvelope: Envelope = Config.envelopes[instrument.feedbackEnvelope];\r\n            let feedbackStart: number = feedbackAmplitudeStart * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n            let feedbackEnd: number = feedbackAmplitudeEnd * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n            tone.feedbackMult = feedbackStart;\r\n            tone.feedbackDelta = (feedbackEnd - tone.feedbackMult) / runLength;\r\n\r\n            const volumeMult: number = baseVolume * instrumentVolumeMult;\r\n            tone.volumeStart = filterVolumeStart * volumeMult * transitionVolumeStart * chordVolumeStart;\r\n            const volumeEnd: number = filterVolumeEnd * volumeMult * transitionVolumeEnd * chordVolumeEnd;\r\n            tone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n            sineVolumeBoostStart *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeStart / 15.0)) - 1.0) / 3.0;\r\n            sineVolumeBoostEnd *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeEnd / 15.0)) - 1.0) / 3.0;\r\n            sineVolumeBoostStart *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeStart - 1) / 2.0);\r\n            sineVolumeBoostEnd *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeEnd - 1) / 2.0);\r\n            tone.volumeStart *= 1.0 + sineVolumeBoostStart * 3.0;\r\n            tone.volumeDelta *= 1.0 + (sineVolumeBoostStart + sineVolumeBoostEnd) * 1.5; // Volume boosts are averaged such that delta brings you to next target start boost.\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            // Modulator value is used for data, so don't actually compute audio nonsense for it.\r\n            tone.volumeStart = transitionVolumeStart;\r\n            let volumeEnd: number = transitionVolumeEnd;\r\n\r\n            tone.volumeStart *= customVolumeStart;\r\n            volumeEnd *= customVolumeEnd;\r\n\r\n            tone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n        } else {\r\n            let detuneStart: number = instrument.detune / 25;\r\n            let detuneEnd: number = instrument.detune / 25;\r\n            if (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n                detuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n                detuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n            }\r\n\r\n            if (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n                detuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n                detuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n            }\r\n\r\n            let pitch: number = tone.pitches[0];\r\n\r\n            if (tone.pitchCount > 1) {\r\n                const arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\r\n                if (chord.harmonizes) {\r\n                    const intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n                    tone.intervalMult = Math.pow(2.0, intervalOffset / 12.0);\r\n                    tone.intervalVolumeMult = Math.pow(2.0, -intervalOffset / pitchDamping);\r\n                } else {\r\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\r\n                }\r\n            }\r\n\r\n            const startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale;\r\n            const endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale;\r\n            const startFreq: number = Instrument.frequencyFromPitch(startPitch);\r\n            const pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n            const pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n            let settingsVolumeMultStart: number = baseVolume * filterVolumeStart;\r\n            let settingsVolumeMultEnd: number = baseVolume * filterVolumeEnd;\r\n            if (instrument.type == InstrumentType.noise) {\r\n                settingsVolumeMultStart *= Config.chipNoises[instrument.chipNoise].volume;\r\n                settingsVolumeMultEnd *= Config.chipNoises[instrument.chipNoise].volume;\r\n            }\r\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n                settingsVolumeMultStart *= Config.chipWaves[instrument.chipWave].volume;\r\n                settingsVolumeMultEnd *= Config.chipWaves[instrument.chipWave].volume;\r\n            }\r\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.customChipWave) {\r\n                settingsVolumeMultStart *= Config.intervals[instrument.interval].volume;\r\n                settingsVolumeMultEnd *= Config.intervals[instrument.interval].volume;\r\n            }\r\n            if (instrument.type == InstrumentType.pwm) {\r\n\r\n                // Check for PWM mods to this instrument\r\n                let pulseWidthModStart: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n                let pulseWidthModEnd: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n                if (synth.isModActive(ModSetting.mstPulseWidth, false, channel, instrumentIdx)) {\r\n                    pulseWidthModStart = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, false)) / (Config.pulseWidthRange * 2);\r\n                    pulseWidthModEnd = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, true)) / (Config.pulseWidthRange * 2);\r\n                }\r\n\r\n                const pulseEnvelope: Envelope = Config.envelopes[instrument.pulseEnvelope];\r\n                const pulseWidthStart: number = pulseWidthModStart * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n                const pulseWidthEnd: number = pulseWidthModEnd * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n                tone.pulseWidth = pulseWidthStart;\r\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / runLength;\r\n            }\r\n\r\n            tone.phaseDeltas[0] = startFreq * sampleTime;\r\n\r\n            tone.volumeStart = transitionVolumeStart * chordVolumeStart * pitchVolumeStart * settingsVolumeMultStart * instrumentVolumeMult;\r\n            let volumeEnd: number = transitionVolumeEnd * chordVolumeEnd * pitchVolumeEnd * settingsVolumeMultEnd * instrumentVolumeMult;\r\n\r\n            if (filterEnvelope.type != EnvelopeType.custom && (instrument.type != InstrumentType.pwm || Config.envelopes[instrument.pulseEnvelope].type != EnvelopeType.custom)) {\r\n                tone.volumeStart *= customVolumeStart;\r\n                volumeEnd *= customVolumeEnd;\r\n            }\r\n\r\n            // Check for mod-related volume delta\r\n            if (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                const startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n                const endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n                tone.volumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n                volumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n            }\r\n            // Check for SONG mod-related volume delta\r\n            if (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n                tone.volumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n                volumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n            }\r\n\r\n            tone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n        }\r\n\r\n        tone.phaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / 12.0) / runLength);\r\n    }\r\n\r\n    public static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\r\n        let effect: number = 0;\r\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\r\n            effect += Math.sin(Math.PI * 2 * secondsIntoBar / vibratoPeriodSeconds);\r\n        }\r\n        return effect;\r\n    }\r\n\r\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\r\n\r\n    private static getInstrumentSynthFunction(instrument: Instrument): Function {\r\n        if (instrument.type == InstrumentType.fm) {\r\n            const fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\r\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\r\n                const synthSource: string[] = [];\r\n\r\n                for (const line of Synth.fmSourceTemplate) {\r\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n                        const outputs: string[] = [];\r\n                        for (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\r\n                            outputs.push(\"operator\" + j + \"Scaled\");\r\n                        }\r\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n                        for (let j: number = Config.operatorCount - 1; j >= 0; j--) {\r\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\r\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n                                    let modulators = \"\";\r\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\r\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n                                    }\r\n\r\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\r\n                                    if (feedbackIndices.length > 0) {\r\n                                        modulators += \" + feedbackMult * (\";\r\n                                        const feedbacks: string[] = [];\r\n                                        for (const modulatorNumber of feedbackIndices) {\r\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n                                        }\r\n                                        modulators += feedbacks.join(\" + \") + \")\";\r\n                                    }\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n                                } else {\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (line.indexOf(\"#\") != -1) {\r\n                        for (let j = 0; j < Config.operatorCount; j++) {\r\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\r\n                        }\r\n                    } else {\r\n                        synthSource.push(line);\r\n                    }\r\n                }\r\n\r\n                //console.log(synthSource.join(\"\\n\"));\r\n\r\n                Synth.fmSynthFunctionCache[fingerprint] = new Function(\"synth\", \"data\", \"stereoBufferIndex\", \"stereoBufferLength\", \"runLength\", \"tone\", \"instrument\", synthSource.join(\"\\n\"));\r\n            }\r\n            return Synth.fmSynthFunctionCache[fingerprint];\r\n        } else if (instrument.type == InstrumentType.chip) {\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.customChipWave) {\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            return Synth.harmonicsSynth;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            return Synth.pulseWidthSynth;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            return Synth.noiseSynth;\r\n        } else if (instrument.type == InstrumentType.spectrum) {\r\n            return Synth.spectrumSynth;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            return Synth.drumsetSynth;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            return Synth.modSynth;\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\r\n        }\r\n    }\r\n\r\n    private static chipSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        var wave: Float64Array;\r\n        var volumeScale: number;\r\n\r\n        const isCustomWave: boolean = (instrument.type == InstrumentType.customChipWave);\r\n\r\n        if (!isCustomWave) {\r\n            wave = Config.chipWaves[instrument.chipWave].samples;\r\n            volumeScale = 1.0;\r\n        }\r\n        else {\r\n            wave = instrument.customChipWaveIntegral;\r\n            // Integrals for custom chip wave can get rather big. This \"zero point\" can be config'ed later.\r\n            volumeScale = 0.1;\r\n        }\r\n\r\n        const waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n        const intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / 12.0);\r\n        const intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / 12.0) * tone.intervalMult;\r\n        const intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n        if (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n        const deltaRatio: number = intervalB / intervalA;\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n        let phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const phaseAInt: number = phaseA | 0;\r\n        const phaseBInt: number = phaseB | 0;\r\n        const indexA: number = phaseAInt % waveLength;\r\n        const indexB: number = phaseBInt % waveLength;\r\n        const phaseRatioA: number = phaseA - phaseAInt;\r\n        const phaseRatioB: number = phaseB - phaseBInt;\r\n        let prevWaveIntegralA: number = wave[indexA];\r\n        let prevWaveIntegralB: number = wave[indexB];\r\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n\r\n        //console.log(\"S: \" + stereoBufferIndex + \" P: \" + stopIndex);\r\n\r\n        while (stereoBufferIndex < stopIndex) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            let nextWaveIntegralA: number = wave[indexA];\r\n            let nextWaveIntegralB: number = wave[indexB];\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n            let waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n            let waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n            prevWaveIntegralA = nextWaveIntegralA;\r\n            prevWaveIntegralB = nextWaveIntegralB;\r\n\r\n            const combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDeltaA *= phaseDeltaScale;\r\n            phaseDeltaB *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume * volumeScale;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        //debugString += \",\" + data.subarray(stereoBufferIndex - runLength, stereoBufferIndex).toString();\r\n        //console.log(stereoBufferIndex);\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n\r\n    }\r\n\r\n\r\n    private static harmonicsSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        const wave: Float32Array = instrument.harmonicsWave.getCustomWave();\r\n        const waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n        const intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / 12.0);\r\n        const intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / 12.0) * tone.intervalMult;\r\n        const intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n        if (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n        const deltaRatio: number = intervalB / intervalA;\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n        let phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const phaseAInt: number = phaseA | 0;\r\n        const phaseBInt: number = phaseB | 0;\r\n        const indexA: number = phaseAInt % waveLength;\r\n        const indexB: number = phaseBInt % waveLength;\r\n        const phaseRatioA: number = phaseA - phaseAInt;\r\n        const phaseRatioB: number = phaseB - phaseBInt;\r\n        let prevWaveIntegralA: number = wave[indexA];\r\n        let prevWaveIntegralB: number = wave[indexB];\r\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n        while (stereoBufferIndex < stopIndex) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            let nextWaveIntegralA: number = wave[indexA];\r\n            let nextWaveIntegralB: number = wave[indexB];\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n            let waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n            let waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\r\n            prevWaveIntegralA = nextWaveIntegralA;\r\n            prevWaveIntegralB = nextWaveIntegralB;\r\n\r\n            const combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDeltaA *= phaseDeltaScale;\r\n            phaseDeltaB *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static pulseWidthSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let phaseDelta: number = tone.phaseDeltas[0];\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phase: number = (tone.phases[0] % 1);\r\n\r\n        let pulseWidth: number = tone.pulseWidth;\r\n        const pulseWidthDelta: number = tone.pulseWidthDelta;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n\r\n        while (stereoBufferIndex < stopIndex) {\r\n\r\n            const sawPhaseA: number = phase % 1;\r\n            const sawPhaseB: number = (phase + pulseWidth) % 1;\r\n\r\n            let pulseWave: number = sawPhaseB - sawPhaseA;\r\n\r\n            // This a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing.\r\n            if (sawPhaseA < phaseDelta) {\r\n                var t = sawPhaseA / phaseDelta;\r\n                pulseWave += (t + t - t * t - 1) * 0.5;\r\n            } else if (sawPhaseA > 1.0 - phaseDelta) {\r\n                var t = (sawPhaseA - 1.0) / phaseDelta;\r\n                pulseWave += (t + t + t * t + 1) * 0.5;\r\n            }\r\n            if (sawPhaseB < phaseDelta) {\r\n                var t = sawPhaseB / phaseDelta;\r\n                pulseWave -= (t + t - t * t - 1) * 0.5;\r\n            } else if (sawPhaseB > 1.0 - phaseDelta) {\r\n                var t = (sawPhaseB - 1.0) / phaseDelta;\r\n                pulseWave -= (t + t + t * t + 1) * 0.5;\r\n            }\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (pulseWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n            pulseWidth += pulseWidthDelta;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phase;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static fmSourceTemplate: string[] = (`\r\nlet phaseDeltaScale = +tone.phaseDeltaScale;\r\n// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\nlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\r\nlet operator#PhaseDelta  = +tone.phaseDeltas[#];\r\nlet operator#OutputMult  = +tone.volumeStarts[#];\r\nconst operator#OutputDelta = +tone.volumeDeltas[#];\r\nlet operator#Output      = +tone.feedbackOutputs[#];\r\nlet feedbackMult         = +tone.feedbackMult;\r\nconst feedbackDelta        = +tone.feedbackDelta;\r\nlet volume = +tone.volumeStart;\r\nconst volumeDelta = +tone.volumeDelta;\r\n\r\nconst isFirstOrder = tone.isFirstOrder;\r\nlet filter1 = +tone.filter;\r\nlet filter2 = isFirstOrder ? 1.0 : filter1;\r\nconst filterScale1 = +tone.filterScale;\r\nconst filterScale2 = isFirstOrder ? 1.0 : filterScale1;\r\nlet filterResonance = tone.filterResonanceStart;\r\nlet filterResonanceDelta = tone.filterResonanceDelta;\r\nlet filterSample0 = +tone.filterSample0;\r\nlet filterSample1 = +tone.filterSample1;\r\n\r\nconst stopIndex = stereoBufferIndex + runLength;\r\nstereoBufferIndex += tone.stereoOffset;\r\nlet stereoVolumeL = tone.stereoVolumeLStart;\r\nlet stereoVolumeLDelta = tone.stereoVolumeLDelta;\r\nlet stereoVolumeR = tone.stereoVolumeRStart;\r\nlet stereoVolumeRDelta = tone.stereoVolumeRDelta;\r\nlet stereoDelay = tone.stereoDelayStart;\r\nlet stereoDelayDelta = tone.stereoDelayDelta;\r\nlet delays = [];\r\nwhile (stereoBufferIndex < stopIndex) {\r\n// INSERT OPERATOR COMPUTATION HERE\r\nconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\r\nconst feedback = filterResonance + filterResonance / (1.0 - filter1);\r\nfilterSample0 += filter1 * (fmOutput - filterSample0 + feedback * (filterSample0 - filterSample1));\r\nfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\nfeedbackMult += feedbackDelta;\r\noperator#OutputMult += operator#OutputDelta;\r\noperator#Phase += operator#PhaseDelta;\r\noperator#PhaseDelta *= phaseDeltaScale;\r\nfilter1 *= filterScale1;\r\nfilter2 *= filterScale2;\r\nfilterResonance += filterResonanceDelta;\r\n\r\nconst output = filterSample1 * volume;\r\nvolume += volumeDelta;\r\n\r\n//const absStereoDelay: number = Math.abs(stereoDelay);\r\n//const fracStereoDelay: number = absStereoDelay % 1;\r\n//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\ndelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\ndata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\ndata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\ndata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\ndata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\nstereoVolumeL += stereoVolumeLDelta;\r\nstereoVolumeR += stereoVolumeRDelta;\r\nstereoDelay += stereoDelayDelta;\r\n\r\nstereoBufferIndex += 2;\r\n}\r\n\r\ntone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\ntone.feedbackOutputs[#] = operator#Output;\r\n\r\nconst epsilon = (1.0e-24);\r\nif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\nif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\ntone.filterSample0 = filterSample0;\r\ntone.filterSample1 = filterSample1;\r\n`).split(\"\\n\");\r\n\r\n    private static operatorSourceTemplate: string[] = (`\r\nvar operator#Wave     = beepbox.Config.operatorWaves[instrument.operators[#].waveform].samples;\r\nconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\nconst operator#PhaseInt = operator#PhaseMix|0;\r\nconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\r\nconst operator#Sample   = operator#Wave[operator#Index];\r\noperator#Output       = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\nconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n`).split(\"\\n\");\r\n\r\n    private static noiseSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let wave: Float32Array = instrument.getDrumWave();\r\n        let phaseDelta: number = +tone.phaseDeltas[0];\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        if (tone.phases[0] == 0) {\r\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n            phase = Math.random() * Config.chipNoiseLength;\r\n        }\r\n        let sample: number = +tone.sample;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const pitchRelativefilter: number = Math.min(1.0, tone.phaseDeltas[0] * Config.chipNoises[instrument.chipNoise].pitchFilterMult);\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n        while (stereoBufferIndex < stopIndex) {\r\n            const waveSample: number = wave[phase & 0x7fff];\r\n\r\n            sample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            phase += phaseDelta;\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDelta *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.sample = sample;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static spectrumSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let wave: Float32Array = instrument.getDrumWave();\r\n        let phaseDelta: number = tone.phaseDeltas[0] * (1 << 7);\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let sample: number = +tone.sample;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta);\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n\r\n        while (stereoBufferIndex < stopIndex) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & 0x7fff;\r\n            let waveSample: number = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            waveSample += (wave[index + 1] - waveSample) * phaseRatio;\r\n\r\n            sample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            phase += phaseDelta;\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDelta *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.sample = sample;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static drumsetSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let wave: Float32Array = instrument.getDrumsetWave(tone.drumsetPitch);\r\n        let phaseDelta: number = tone.phaseDeltas[0] / Instrument.drumsetIndexReferenceDelta(tone.drumsetPitch);;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let sample: number = +tone.sample;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n        while (stereoBufferIndex < stopIndex) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & 0x7fff;\r\n            sample = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            sample += (wave[index + 1] - sample) * phaseRatio;\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            phase += phaseDelta;\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDelta *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.sample = sample;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static modSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        // Note: present modulator value is tone.volumeStart.\r\n\r\n        if (!synth.song) return;\r\n\r\n        let mod: number = Config.modCount - 1 - tone.pitches[0];\r\n        let setting: ModSetting = instrument.modSettings[mod];\r\n\r\n        synth.setModValue(tone.customVolumeStart, tone.customVolumeEnd, mod, instrument, setting);\r\n\r\n        // Reset arps, but only at the start of the note\r\n        if (setting == ModSetting.mstResetArpeggio && synth.tick == 0 && tone.noteStart == synth.beat * Config.partsPerBeat + synth.part) {\r\n            synth.song.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].arpTime = 0;\r\n        }\r\n        else if (setting == ModSetting.mstNextBar) {\r\n            synth.wantToSkip = true;\r\n        }\r\n    }\r\n\r\n    private static findRandomZeroCrossing(wave: Float32Array): number {\r\n        let phase: number = Math.random() * Config.chipNoiseLength;\r\n\r\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\r\n        // otherwise they pop. Try to find a zero crossing.\r\n        let indexPrev: number = phase & 0x7fff;\r\n        let wavePrev: number = wave[indexPrev];\r\n        const stride: number = 16;\r\n        for (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\r\n            const indexNext: number = (indexPrev + stride) & 0x7fff;\r\n            const waveNext: number = wave[indexNext];\r\n            if (wavePrev * waveNext <= 0.0) {\r\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\r\n                for (let i: number = 0; i < 16; i++) {\r\n                    const innerIndexNext: number = (indexPrev + 1) & 0x7fff;\r\n                    const innerWaveNext: number = wave[innerIndexNext];\r\n                    if (wavePrev * innerWaveNext <= 0.0) {\r\n                        // Found the zero crossing again! Now let's find the exact intersection.\r\n                        const slope: number = innerWaveNext - wavePrev;\r\n                        phase = indexPrev;\r\n                        if (Math.abs(slope) > 0.00000001) {\r\n                            phase += -wavePrev / slope;\r\n                        }\r\n                        phase = Math.max(0, phase) % Config.chipNoiseLength;\r\n                        break;\r\n                    } else {\r\n                        indexPrev = innerIndexNext;\r\n                        wavePrev = innerWaveNext;\r\n                    }\r\n                }\r\n                break;\r\n            } else {\r\n                indexPrev = indexNext;\r\n                wavePrev = waveNext;\r\n            }\r\n        }\r\n\r\n        return phase;\r\n    }\r\n\r\n    public static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\r\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\r\n    }\r\n    public static volumeMultToInstrumentVolume(volumeMult: number): number {\r\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\r\n    }\r\n    public static expressionToVolumeMult(expression: number): number {\r\n        return Math.pow(Math.max(0.0, expression) / 6.0, 1.5);\r\n    }\r\n    public static volumeMultToExpression(volumeMult: number): number {\r\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * 6.0;\r\n    }\r\n\r\n    private getSamplesPerTick(): number {\r\n        if (this.song == null) return 0;\r\n        let beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n        if (this.isModActive(ModSetting.mstTempo, true)) {\r\n            beatsPerMinute = this.getModValue(ModSetting.mstTempo, true);\r\n        }\r\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\r\n    }\r\n\r\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\r\n        const beatsPerSecond: number = beatsPerMinute / 60.0;\r\n        const partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\r\n        const tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\r\n        return this.samplesPerSecond / tickPerSecond;\r\n    }\r\n}\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\r\n//}\r\n"]}