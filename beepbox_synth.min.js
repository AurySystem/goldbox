var beepbox=function(t){"use strict";
/*!
    Copyright (C) 2021 John Nesky

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */const e=["chip wave","FM","basic noise","spectrum","drumset","harmonics","pulse width","picked string","custom chip","mod","advanced FM"];class n{}function i(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];const n=e/t.length;for(let e=0;e<t.length;e++)t[e]-=n;return a(t),t.push(0),new Float64Array(t)}function s(t){let e=0;i(t);for(let n=0;n<t.length-1;n++)e+=Math.abs(t[n]);const n=e/(t.length-1);for(let e=0;e<t.length-1;e++)t[e]=t[e]/n;return new Float64Array(t)}function a(t){let e=0,n=new Float64Array(t.length);for(let i=0;i<t.length;i++)n[i]=e,e+=t[i];return n}function r(t,e,i){let s=n.chipNoises[t].samples;if(null==s){if(s=new Float32Array(n.chipNoiseLength+1),n.chipNoises[t].samples=s,0==t){let t=1;for(let e=0;e<n.chipNoiseLength;e++){s[e]=2*(1&t)-1;let n=t>>1;1==(t+n&1)&&(n+=16384),t=n}}else if(1==t)for(let t=0;t<n.chipNoiseLength;t++)s[t]=2*Math.random()-1;else if(2==t){let t=1;for(let e=0;e<n.chipNoiseLength;e++){s[e]=2*(1&t)-1;let n=t>>1;1==(t+n&1)&&(n+=32768),t=n}}else if(3==t){let t=1;for(let e=0;e<n.chipNoiseLength;e++){s[e]=2*(1&t)-1;let n=t>>1;1==(t+n&1)&&(n+=40),t=n}}else if(4==t)o(s,n.chipNoiseLength,10,11,1,1,0),o(s,n.chipNoiseLength,11,14,.6578,.6578,0),e(s,n.chipNoiseLength),i(s,1/Math.sqrt(n.chipNoiseLength));else if(5==t)for(var a=1,r=0;r<n.chipNoiseLength;r++){s[r]=2*(1&a)-1,1==(a+(l=a>>1)&1)&&(l+=40),a=l}else if(6==t)o(s,n.chipNoiseLength,1,10,1,1,0),o(s,n.chipNoiseLength,20,14,-2,-2,0),e(s,n.chipNoiseLength),i(s,1/Math.sqrt(n.chipNoiseLength));else if(7==t)for(a=1,r=0;r<n.chipNoiseLength;r++){s[r]=4*(1&a)*(14*Math.random()+1),1==(a+(l=a>>1)&1)&&(l+=60),a=l}else if(8==t)for(a=1,r=0;r<32768;r++){var l;s[r]=(1&a)/2+.5,1==(a+(l=a>>1)&1)&&(l-=40),a=l}else{if(9!=t)throw new Error("Unrecognized drum index: "+t);{let t=1;for(let e=0;e<n.chipNoiseLength;e++){s[e]=2*(1&t)-1.1;let n=t>>1;1==(t+n&1)&&(n+=131080),t=n}}}s[n.chipNoiseLength]=s[0]}return s}function o(t,e,n,i,s,a,o){const l=0|Math.pow(2,n),h=Math.min(e>>1,0|Math.pow(2,i)),c=r(0,null,null);let u=0;for(let r=l;r<h;r++){let l=s+(a-s)*(Math.log2(r)-n)/(i-n),h=Math.pow(2,7*(l-1)+1)*l;h*=Math.pow(r/2048,o),u+=h,h*=c[r];const f=.61803398875*r*r*Math.PI*2;t[r]=Math.cos(f)*h,t[e-r]=Math.sin(f)*h}return u}function l(t=0){const e=new Float64Array(n.sineWaveLength+1),i=n.sineWaveLength/4;for(let s=0;s<n.sineWaveLength+1;s++)e[s]=2*+(Math.abs(s-i)<t*n.sineWaveLength/2||Math.abs(s-n.sineWaveLength-i)<t*n.sineWaveLength/2)-1;return e}function h(t=!1){const e=new Float64Array(n.sineWaveLength+1);for(let i=0;i<n.sineWaveLength+1;i++)e[i]=2*(i+n.sineWaveLength/4)/n.sineWaveLength%2-1,e[i]=t?-e[i]:e[i];return e}function c(t,e,i){let s=n.arpeggioPatterns[t-1];return null!=s?(2==t&&0==e&&(s=[0,0,1,1]),s[i%s.length]):i%t}function u(t){const e={};for(let n=0;n<t.length;n++){const i=t[n];i.index=n,e[i.name]=i}const n=t;return n.dictionary=e,n}function f(t){return 0!=(1024&t)}function p(t){return 0!=(2048&t)}function d(t){return 0!=(128&t)}function m(t){return 0!=(256&t)}function y(t){return 0!=(512&t)}function g(t){return 0!=(32&t)}function v(t){return 0!=(8&t)}function b(t){return 0!=(16&t)}function M(t){return 0!=(4&t)}function S(t){return 0!=(2&t)}function w(t){return 0!=(64&t)}function k(t){return 0!=(1&t)}n.thresholdVal=-10,n.kneeVal=40,n.ratioVal=12,n.attackVal=0,n.releaseVal=.25,n.scales=u([{name:"Free",realName:"chromatic",flags:[!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0]},{name:"Major",realName:"ionian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0]},{name:"Minor",realName:"aeolian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Mixolydian",realName:"mixolydian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!0,!1]},{name:"Lydian",realName:"lydian",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0]},{name:"Dorian",realName:"dorian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!0,!1]},{name:"Phrygian",realName:"phrygian",flags:[!0,!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Locrian",realName:"locrian",flags:[!0,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1]},{name:"Lydian Dominant",realName:"lydian dominant",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!0,!1]},{name:"Phrygian Dominant",realName:"phrygian dominant",flags:[!0,!0,!1,!1,!0,!0,!1,!0,!0,!1,!0,!1]},{name:"Harmonic Major",realName:"harmonic major",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!0,!1,!1,!0]},{name:"Harmonic Minor",realName:"harmonic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!1,!0]},{name:"Melodic Minor",realName:"melodic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1,!0]},{name:"Blues",realName:"blues",flags:[!0,!1,!1,!0,!1,!0,!0,!0,!1,!1,!0,!1]},{name:"Altered",realName:"altered",flags:[!0,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Major Pentatonic",realName:"major pentatonic",flags:[!0,!1,!0,!1,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"Minor Pentatonic",realName:"minor pentatonic",flags:[!0,!1,!1,!0,!1,!0,!1,!0,!1,!1,!0,!1]},{name:"Whole Tone",realName:"whole tone",flags:[!0,!1,!0,!1,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Octatonic",realName:"octatonic",flags:[!0,!1,!0,!0,!1,!0,!0,!1,!0,!0,!1,!0]},{name:"Hexatonic",realName:"hexatonic",flags:[!0,!1,!1,!0,!0,!1,!1,!0,!0,!1,!1,!0]},{name:"Custom",realName:"custom",flags:[!0,!1,!0,!0,!1,!1,!1,!0,!0,!1,!0,!0]}]),n.keys=u([{name:"C",isWhiteKey:!0,basePitch:12},{name:"C♯",isWhiteKey:!1,basePitch:13},{name:"D",isWhiteKey:!0,basePitch:14},{name:"D♯",isWhiteKey:!1,basePitch:15},{name:"E",isWhiteKey:!0,basePitch:16},{name:"F",isWhiteKey:!0,basePitch:17},{name:"F♯",isWhiteKey:!1,basePitch:18},{name:"G",isWhiteKey:!0,basePitch:19},{name:"G♯",isWhiteKey:!1,basePitch:20},{name:"A",isWhiteKey:!0,basePitch:21},{name:"A♯",isWhiteKey:!1,basePitch:22},{name:"B",isWhiteKey:!0,basePitch:23}]),n.blackKeyNameParents=[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1],n.tempoMin=30,n.tempoMax=320,n.echoDelayRange=24,n.echoDelayStepTicks=4,n.echoSustainRange=8,n.echoShelfHz=4e3,n.echoShelfGain=Math.pow(2,-.5),n.reverbShelfHz=8e3,n.reverbShelfGain=Math.pow(2,-1.5),n.reverbRange=32,n.reverbDelayBufferSize=16384,n.reverbDelayBufferMask=n.reverbDelayBufferSize-1,n.beatsPerBarMin=2,n.beatsPerBarMax=16,n.barCountMin=1,n.barCountMax=256,n.instrumentCountMin=1,n.layeredInstrumentCountMax=4,n.patternInstrumentCountMax=10,n.partsPerBeat=24,n.ticksPerPart=2,n.ticksPerArpeggio=3,n.arpeggioPatterns=[[0],[0,1],[0,1,2,1],[0,1,2,3],[0,1,2,3,4],[0,1,2,3,4,5],[0,1,2,3,4,5,6],[0,1,2,3,4,5,6,7]],n.rhythms=u([{name:"÷3 (triplets)",stepsPerBeat:3,roundUpThresholds:[5,12,18]},{name:"÷4 (standard)",stepsPerBeat:4,roundUpThresholds:[3,9,17,21]},{name:"÷6",stepsPerBeat:6,roundUpThresholds:null},{name:"÷8",stepsPerBeat:8,roundUpThresholds:null},{name:"freehand",stepsPerBeat:24,roundUpThresholds:null}]),n.instrumentTypeNames=["chip","FM","noise","spectrum","drumset","harmonics","PWM","Picked String","custom chip","mod","FM6op"],n.instrumentTypeHasSpecialInterval=[!0,!0,!1,!1,!1,!0,!1,!1,!1,!1],n.chipBaseExpression=.03375,n.fmBaseExpression=.03,n.noiseBaseExpression=.19,n.spectrumBaseExpression=.3,n.drumsetBaseExpression=.45,n.harmonicsBaseExpression=.025,n.pwmBaseExpression=.04725,n.pickedStringBaseExpression=.025,n.distortionBaseVolume=.011,n.bitcrusherBaseVolume=.01,n.rawChipWaves=u([{name:"rounded",expression:.94,samples:i([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2])},{name:"triangle",expression:1,samples:i([1/15,.2,5/15,7/15,.6,11/15,13/15,1,1,13/15,11/15,.6,7/15,5/15,.2,1/15,-1/15,-.2,-5/15,-7/15,-.6,-11/15,-13/15,-1,-1,-13/15,-11/15,-.6,-7/15,-5/15,-.2,-1/15])},{name:"square",expression:.5,samples:i([1,-1])},{name:"1/4 pulse",expression:.5,samples:i([1,-1,-1,-1])},{name:"1/8 pulse",expression:.5,samples:i([1,-1,-1,-1,-1,-1,-1,-1])},{name:"sawtooth",expression:.65,samples:i([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,1,-1,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31])},{name:"double saw",expression:.5,samples:i([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2])},{name:"double pulse",expression:.4,samples:i([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1])},{name:"spiky",expression:.4,samples:i([1,-1,1,-1,1,0])},{name:"sine",expression:.88,samples:s([8,9,11,12,13,14,15,15,15,15,14,14,13,11,10,9,7,6,4,3,2,1,0,0,0,0,1,1,2,4,5,6])},{name:"flute",expression:.8,samples:s([3,4,6,8,10,11,13,14,15,15,14,13,11,8,5,3])},{name:"harp",expression:.8,samples:s([0,3,3,3,4,5,5,6,7,8,9,11,11,13,13,15,15,14,12,11,10,9,8,7,7,5,4,3,2,1,0,0])},{name:"sharp clarinet",expression:.38,samples:s([0,0,0,1,1,8,8,9,9,9,8,8,8,8,8,9,9,7,9,9,10,4,0,0,0,0,0,0,0,0,0,0])},{name:"soft clarinet",expression:.45,samples:s([0,1,5,8,9,9,9,9,9,9,9,11,11,12,13,12,10,9,7,6,4,3,3,3,1,1,1,1,1,1,1,1])},{name:"alto sax",expression:.3,samples:s([5,5,6,4,3,6,8,7,2,1,5,6,5,4,5,7,9,11,13,14,14,14,14,13,10,8,7,7,4,3,4,2])},{name:"bassoon",expression:.35,samples:s([9,9,7,6,5,4,4,4,4,5,7,8,9,10,11,13,13,11,10,9,7,6,4,2,1,1,1,2,2,5,11,14])},{name:"trumpet",expression:.22,samples:s([10,11,8,6,5,5,5,6,7,7,7,7,6,6,7,7,7,7,7,6,6,6,6,6,6,6,6,7,8,9,11,14])},{name:"electric guitar",expression:.2,samples:s([11,12,12,10,6,6,8,0,2,4,8,10,9,10,1,7,11,3,6,6,8,13,14,2,0,12,8,4,13,11,10,13])},{name:"organ",expression:.2,samples:s([11,10,12,11,14,7,5,5,12,10,10,9,12,6,4,5,13,12,12,10,12,5,2,2,8,6,6,5,8,3,2,1])},{name:"pan flute",expression:.35,samples:s([1,4,7,6,7,9,7,7,11,12,13,15,13,11,11,12,13,10,7,5,3,6,10,7,3,3,1,0,1,0,1,0])},{name:"glitch",expression:.5,samples:i},{name:"trapezoid",expression:1,samples:i([1/15,.4,10/15,14/15,1,1,1,1,1,1,1,1,14/15,10/15,.4,1/15,-1/15,-.4,-10/15,-14/15,-1,-1,-1,-1,-1,-1,-1,-1,-14/15,-10/15,-.4,-1/15])}]),n.chipWaves=function(t){const e=new Array(t.length),n={};for(let i=0;i<e.length;i++){e[i]=Object.assign([],t[i]);const s=e[i];s.index=i,n[s.name]=s}for(let t in n)n[t].samples=a(n[t].samples);const i=e;return i.dictionary=n,i}(n.rawChipWaves),n.chipNoises=u([{name:"retro",expression:.25,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"white",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"clang",expression:.4,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"buzz",expression:.3,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"hollow",expression:1.5,basePitch:96,pitchFilterMult:1,isSoft:!0,samples:null},{name:"shine",expression:1,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"deep",expression:1.5,basePitch:120,pitchFilterMult:1024,isSoft:!0,samples:null},{name:"cutter",expression:.005,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"metallic",expression:1,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"static",expression:1,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null}]),n.filterFreqStep=1/4,n.filterFreqRange=34,n.filterFreqReferenceSetting=28,n.filterFreqReferenceHz=8e3,n.filterFreqMaxHz=n.filterFreqReferenceHz*Math.pow(2,n.filterFreqStep*(n.filterFreqRange-1-n.filterFreqReferenceSetting)),n.filterFreqMinHz=8,n.filterGainRange=15,n.filterGainCenter=7,n.filterGainStep=.5,n.filterMaxPoints=8,n.filterTypeNames=["low-pass","high-pass","peak"],n.filterMorphCount=10,n.filterSimpleCutRange=11,n.filterSimplePeakRange=8,n.fadeInRange=10,n.fadeOutTicks=[-24,-12,-6,-3,-1,6,12,24,48,72,96],n.fadeOutNeutral=4,n.drumsetFadeOutTicks=48,n.transitions=u([{name:"normal",isSeamless:!1,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!1},{name:"interrupt",isSeamless:!0,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"continue",isSeamless:!0,continues:!0,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide in pattern",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!1}]),n.vibratos=u([{name:"none",amplitude:0,type:0,delayTicks:0},{name:"light",amplitude:.15,type:0,delayTicks:0},{name:"delayed",amplitude:.3,type:0,delayTicks:37},{name:"heavy",amplitude:.45,type:0,delayTicks:0},{name:"shaky",amplitude:.1,type:1,delayTicks:0}]),n.vibratoTypes=u([{name:"normal",periodsSeconds:[.14],period:.14},{name:"shaky",periodsSeconds:[.11,.17798,.33],period:266.97}]),n.arpSpeedScale=[0,.0625,.125,.2,.25,1/3,.4,.5,2/3,.75,.8,.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.15,4.3,4.5,4.8,5,5.5,6,8],n.unisons=u([{name:"none",voices:1,spread:0,offset:0,expression:1.4,sign:1},{name:"shimmer",voices:2,spread:.018,offset:0,expression:.8,sign:1},{name:"hum",voices:2,spread:.045,offset:0,expression:1,sign:1},{name:"honky tonk",voices:2,spread:.09,offset:0,expression:1,sign:1},{name:"dissonant",voices:2,spread:.25,offset:0,expression:.9,sign:1},{name:"fifth",voices:2,spread:3.5,offset:3.5,expression:.9,sign:1},{name:"octave",voices:2,spread:6,offset:6,expression:.8,sign:1},{name:"bowed",voices:2,spread:.02,offset:0,expression:1,sign:-1},{name:"piano",voices:2,spread:.01,offset:0,expression:1,sign:.7},{name:"warbled",voices:2,spread:.25,offset:.05,expression:.9,sign:-.8},{name:"hecking gosh",voices:2,spread:6.25,offset:-6,expression:.8,sign:-.7}]),n.effectNames=["reverb","chorus","panning","distortion","bitcrusher","note filter","echo","pitch shift","detune","vibrato","transition type","chord type"],n.effectOrder=[2,10,11,7,8,9,5,3,4,1,6,0],n.noteSizeMax=6,n.volumeRange=50,n.volumeLogScale=.1428,n.panCenter=50,n.panMax=2*n.panCenter,n.panDelaySecondsMax=.001,n.chorusRange=8,n.chorusPeriodSeconds=2,n.chorusDelayRange=.0034,n.chorusDelayOffsets=[[1.51,2.1,3.35],[1.47,2.15,3.25]],n.chorusPhaseOffsets=[[0,2.1,4.2],[3.2,5.3,1]],n.chorusMaxDelay=n.chorusDelayRange*(1+n.chorusDelayOffsets[0].concat(n.chorusDelayOffsets[1]).reduce(((t,e)=>Math.max(t,e)))),n.chords=u([{name:"simultaneous",customInterval:!1,arpeggiates:!1,strumParts:0,singleTone:!1},{name:"strum",customInterval:!1,arpeggiates:!1,strumParts:1,singleTone:!1},{name:"arpeggio",customInterval:!1,arpeggiates:!0,strumParts:0,singleTone:!0},{name:"custom interval",customInterval:!0,arpeggiates:!1,strumParts:0,singleTone:!0}]),n.maxChordSize=9,n.operatorCount=4,n.algorithms=u([{name:"1←(2 3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3,4],[],[],[]]},{name:"1←(2 3←4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[],[4],[]]},{name:"1←2←(3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3,4],[],[]]},{name:"1←(2 3)←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[4],[4],[]]},{name:"1←2←3←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3],[4],[]]},{name:"1←3 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[3],[4],[],[]]},{name:"1 2←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3,4],[],[]]},{name:"1 2←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3],[4],[]]},{name:"(1 2)←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3],[3],[4],[]]},{name:"(1 2)←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3,4],[3,4],[],[]]},{name:"1 2 3←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[],[],[4],[]]},{name:"(1 2 3)←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[4],[4],[4],[]]},{name:"1 2 3 4",carrierCount:4,associatedCarrier:[1,2,3,4],modulatedBy:[[],[],[],[]]},{name:"1←(2 3) 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[2,3],[4],[],[]]},{name:"1←(2 (3 (4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[2,3,4],[3,4],[4],[]]}]),n.algorithms6Op=u([{name:"Custom",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4,5,6],[],[],[],[],[]]},{name:"1←2←3←4←5←6",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2],[3],[4],[5],[6],[]]},{name:"1←3 2←4←5←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4],[],[5],[6],[]]},{name:"1←3←4 2←5←6",carrierCount:2,associatedCarrier:[1,1,1,2,2,2],modulatedBy:[[3],[5],[4],[],[6],[]]},{name:"1←4 2←5 3←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4],[5],[6],[],[],[]]},{name:"1←3 2←(4 5←6)",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4,5],[],[],[6],[]]},{name:"1←(3 4) 2←5←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3,4],[5],[],[],[6],[]]},{name:"1←3 2←(4 5 6)",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4,5,6],[],[],[],[]]},{name:"1←3 2←(4 5)←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4,5],[],[6],[6],[]]},{name:"1←3 2←4←(5 6)",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4],[],[5,6],[],[]]},{name:"1←(2 3 4 5 6)",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4,5,6],[],[],[],[],[]]},{name:"1←(2 3←5 4←6)",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4],[],[5],[6],[],[]]},{name:"1←(2 3 4←5←6)",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4],[],[],[5],[6],[]]},{name:"1←4←5 (2 3)←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4],[6],[6],[5],[],[]]},{name:"1←(3 4)←5 2←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3,4],[6],[5],[5],[],[]]},{name:"(1 2)←4 3←(5 6)",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4],[4],[5,6],[],[],[]]},{name:"(1 2)←5 (3 4)←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[5],[5],[6],[6],[],[]]},{name:"(1 2 3)←(4 5 6)",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4,5,6],[4,5,6],[4,5,6],[],[],[]]},{name:"1←5 (2 3 4)←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[5],[6],[6],[6],[],[]]},{name:"1 2←5 (3 4)←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[5],[6],[6],[],[]]},{name:"1 2 (3 4 5)←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[],[],[6],[6],[6],[]]},{name:"1 2 3 (4 5)←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[],[],[],[6],[6],[]]},{name:"1 2←4 3←(5 6)",carrierCount:3,associatedCarrier:[1,2,3,3,3,3],modulatedBy:[[],[4],[5,6],[],[],[]]},{name:"1←4 2←(5 6) 3",carrierCount:3,associatedCarrier:[1,2,3,3,3,3],modulatedBy:[[4],[5,6],[],[],[],[]]},{name:"1 2 3←5 4←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[],[5],[6],[],[]]},{name:"1 (2 3)←5←6 4",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[5],[5],[],[6],[]]},{name:"1 2 3←5←6 4",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[],[5,6],[],[],[]]},{name:"(1 2 3 4 5)←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[6],[6],[6],[6],[6],[]]},{name:"1 2 3 4 5←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[],[],[],[],[6],[]]},{name:"1 2 3 4 5 6",carrierCount:6,associatedCarrier:[1,2,3,4,5,6],modulatedBy:[[],[],[],[],[],[]]},{name:"1←(2 (3 (4 (5 (6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[2,3,4,5,6],[3,4,5,6],[4,5,6],[5,6],[6],[]]},{name:"1←(2(3(4(5(6",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4,5,6],[3,4,5,6],[4,5,6],[5,6],[6],[]]},{name:"1←4(2←5(3←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[2,3,4],[3,5],[6],[],[],[]]},{name:"1←4(2←5 3←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[2,3,4],[5],[6],[],[],[]]}]),n.operatorCarrierInterval=[0,.04,-.073,.091,.061,.024],n.operatorAmplitudeMax=15,n.operatorFrequencies=u([{name:"0.12×",mult:.125,hzOffset:0,amplitudeSign:1},{name:"0.25×",mult:.25,hzOffset:0,amplitudeSign:1},{name:"0.5×",mult:.5,hzOffset:0,amplitudeSign:1},{name:"0.75×",mult:.75,hzOffset:0,amplitudeSign:1},{name:"1×",mult:1,hzOffset:0,amplitudeSign:1},{name:"~1×",mult:1,hzOffset:1.5,amplitudeSign:-1},{name:"2×",mult:2,hzOffset:0,amplitudeSign:1},{name:"~2×",mult:2,hzOffset:-1.3,amplitudeSign:-1},{name:"3×",mult:3,hzOffset:0,amplitudeSign:1},{name:"3.5×",mult:3.5,hzOffset:-.05,amplitudeSign:1},{name:"4×",mult:4,hzOffset:0,amplitudeSign:1},{name:"~4×",mult:4,hzOffset:-2.4,amplitudeSign:-1},{name:"5×",mult:5,hzOffset:0,amplitudeSign:1},{name:"6×",mult:6,hzOffset:0,amplitudeSign:1},{name:"7×",mult:7,hzOffset:0,amplitudeSign:1},{name:"8×",mult:8,hzOffset:0,amplitudeSign:1},{name:"9×",mult:9,hzOffset:0,amplitudeSign:1},{name:"10×",mult:10,hzOffset:0,amplitudeSign:1},{name:"11×",mult:11,hzOffset:0,amplitudeSign:1},{name:"12×",mult:12,hzOffset:0,amplitudeSign:1},{name:"13×",mult:13,hzOffset:0,amplitudeSign:1},{name:"14×",mult:14,hzOffset:0,amplitudeSign:1},{name:"16×",mult:16,hzOffset:0,amplitudeSign:1},{name:"18×",mult:18,hzOffset:0,amplitudeSign:1},{name:"20×",mult:20,hzOffset:0,amplitudeSign:1}]),n.envelopes=u([{name:"none",type:1,speed:0},{name:"note size",type:0,speed:0},{name:"punch",type:2,speed:0},{name:"flare -1",type:3,speed:128},{name:"flare 1",type:3,speed:32},{name:"flare 2",type:3,speed:8},{name:"flare 3",type:3,speed:2},{name:"twang -1",type:4,speed:128},{name:"twang 1",type:4,speed:32},{name:"twang 2",type:4,speed:8},{name:"twang 3",type:4,speed:2},{name:"swell -1",type:5,speed:128},{name:"swell 1",type:5,speed:32},{name:"swell 2",type:5,speed:8},{name:"swell 3",type:5,speed:2},{name:"tremolo0",type:6,speed:8},{name:"tremolo1",type:6,speed:4},{name:"tremolo2",type:6,speed:2},{name:"tremolo3",type:6,speed:1},{name:"tremolo4",type:7,speed:4},{name:"tremolo5",type:7,speed:2},{name:"tremolo6",type:7,speed:1},{name:"decay -1",type:8,speed:40},{name:"decay 1",type:8,speed:10},{name:"decay 2",type:8,speed:7},{name:"decay 3",type:8,speed:4},{name:"wibble-1",type:9,speed:96},{name:"wibble 1",type:9,speed:24},{name:"wibble 2",type:9,speed:12},{name:"wibble 3",type:9,speed:4},{name:"linear-2",type:11,speed:256},{name:"linear-1",type:11,speed:128},{name:"linear 1",type:11,speed:32},{name:"linear 2",type:11,speed:8},{name:"linear 3",type:11,speed:2},{name:"rise -2",type:12,speed:256},{name:"rise -1",type:12,speed:128},{name:"rise 1",type:12,speed:32},{name:"rise 2",type:12,speed:8},{name:"rise 3",type:12,speed:2}]),n.feedbacks=u([{name:"1⟲",indices:[[1],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[]]},{name:"3⟲",indices:[[],[],[3],[]]},{name:"4⟲",indices:[[],[],[],[4]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4]]},{name:"1→2",indices:[[],[1],[],[]]},{name:"1→3",indices:[[],[],[1],[]]},{name:"1→4",indices:[[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[]]},{name:"2→4",indices:[[],[],[],[2]]},{name:"3→4",indices:[[],[],[],[3]]},{name:"1→3 2→4",indices:[[],[],[1],[2]]},{name:"1→4 2→3",indices:[[],[],[2],[1]]},{name:"1→2→3→4",indices:[[],[1],[2],[3]]},{name:"1↔2 3↔4",indices:[[2],[1],[4],[3]]},{name:"1↔4 2↔3",indices:[[4],[3],[2],[1]]},{name:"2→1→4→3→2",indices:[[2],[3],[4],[1]]},{name:"1→2→3→4→1",indices:[[4],[1],[2],[3]]},{name:"(1 2 3)→4",indices:[[],[],[],[1,2,3]]},{name:"ALL",indices:[[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]}]),n.feedbacks6Op=u([{name:"Custom",indices:[[2,3,4,5,6],[],[],[],[],[]]},{name:"1⟲",indices:[[1],[],[],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[],[],[]]},{name:"3⟲",indices:[[],[],[3],[],[],[]]},{name:"4⟲",indices:[[],[],[],[4],[],[]]},{name:"4⟲",indices:[[],[],[],[],[5],[]]},{name:"4⟲",indices:[[],[],[],[],[],[6]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4],[],[]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[],[],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4],[],[]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4],[],[]]},{name:"1⟲ 2⟲ 3⟲ 4⟲ 5⟲",indices:[[1],[2],[3],[4],[5],[]]},{name:"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲",indices:[[1],[2],[3],[4],[5],[6]]},{name:"1→2",indices:[[],[1],[],[],[],[]]},{name:"1→3",indices:[[],[],[1],[],[],[]]},{name:"1→4",indices:[[],[],[],[1],[],[]]},{name:"1→5",indices:[[],[],[],[],[1],[]]},{name:"1→6",indices:[[],[],[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[],[],[]]},{name:"2→4",indices:[[],[],[],[2],[],[]]},{name:"3→4",indices:[[],[],[],[3],[],[]]},{name:"4→5",indices:[[],[],[],[],[4],[]]},{name:"1→4 2→5 3→6",indices:[[],[],[],[1],[2],[3]]},{name:"1→5 2→6 3→4",indices:[[],[],[],[3],[1],[2]]},{name:"1→2→3→4→5→6",indices:[[],[1],[2],[3],[4],[5]]},{name:"2→1→6→5→4→3→2",indices:[[2],[3],[4],[5],[6],[1]]},{name:"1→2→3→4→5→6→1",indices:[[6],[1],[2],[3],[4],[5]]},{name:"1↔2 3↔4 5↔6",indices:[[2],[1],[4],[3],[6],[5]]},{name:"1↔4 2↔5 3↔6",indices:[[4],[5],[6],[1],[2],[3]]},{name:"(1,2,3,4,5)→6",indices:[[],[],[],[],[],[1,2,3,4,5]]},{name:"ALL",indices:[[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]]}]),n.chipNoiseLength=32768,n.spectrumNoiseLength=32768,n.spectrumBasePitch=24,n.spectrumControlPoints=30,n.spectrumControlPointsPerOctave=7,n.spectrumControlPointBits=3,n.spectrumMax=(1<<n.spectrumControlPointBits)-1,n.harmonicsControlPoints=28,n.harmonicsRendered=64,n.harmonicsRenderedForPickedString=256,n.harmonicsControlPointBits=3,n.harmonicsMax=(1<<n.harmonicsControlPointBits)-1,n.harmonicsWavelength=2048,n.pulseWidthRange=50,n.pulseWidthStepPower=.5,n.pitchChannelCountMin=1,n.pitchChannelCountMax=40,n.noiseChannelCountMin=0,n.noiseChannelCountMax=16,n.modChannelCountMin=0,n.modChannelCountMax=12,n.noiseInterval=6,n.pitchesPerOctave=12,n.drumCount=12,n.pitchOctaves=8,n.modCount=6,n.maxPitch=n.pitchOctaves*n.pitchesPerOctave,n.maximumTonesPerChannel=2*n.maxChordSize,n.justIntonationSemitones=[.5,8/15,9/16,.6,5/8,2/3,32/45,3/4,.8,5/6,8/9,15/16,1,16/15,9/8,1.2,5/4,4/3,45/32,1.5,1.6,5/3,16/9,15/8,2].map((t=>Math.log2(t)*n.pitchesPerOctave)),n.pitchShiftRange=n.justIntonationSemitones.length,n.pitchShiftCenter=n.pitchShiftRange>>1,n.detuneCenter=200,n.detuneMax=400,n.detuneMin=0,n.songDetuneMin=0,n.songDetuneMax=500,n.sineWaveLength=256,n.sineWaveMask=n.sineWaveLength-1,n.sineWave=function(){const t=new Float64Array(n.sineWaveLength+1);for(let e=0;e<n.sineWaveLength+1;e++)t[e]=Math.sin(e*Math.PI*2/n.sineWaveLength);return t}(),n.pickedStringDispersionCenterFreq=6e3,n.pickedStringDispersionFreqScale=.3,n.pickedStringDispersionFreqMult=4,n.pickedStringShelfHz=4e3,n.distortionRange=8,n.stringSustainRange=15,n.stringDecayRate=.12,n.bitcrusherFreqRange=14,n.bitcrusherOctaveStep=.5,n.bitcrusherQuantizationRange=8,n.maxEnvelopeCount=12,n.defaultAutomationRange=13,n.instrumentAutomationTargets=u([{name:"none",computeIndex:null,displayName:"none",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"noteVolume",computeIndex:0,displayName:"note volume",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"pulseWidth",computeIndex:2,displayName:"pulse width",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[6]},{name:"stringSustain",computeIndex:3,displayName:"sustain",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[7]},{name:"unison",computeIndex:4,displayName:"unison",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[0,5,7]},{name:"operatorFrequency",computeIndex:5,displayName:"fm# freq",interleave:!0,isFilter:!1,maxCount:n.operatorCount,effect:null,compatibleInstruments:[1]},{name:"operatorAmplitude",computeIndex:9,displayName:"fm# volume",interleave:!1,isFilter:!1,maxCount:n.operatorCount,effect:null,compatibleInstruments:[1]},{name:"feedbackAmplitude",computeIndex:13,displayName:"fm feedback",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[1]},{name:"pitchShift",computeIndex:14,displayName:"pitch shift",interleave:!1,isFilter:!1,maxCount:1,effect:7,compatibleInstruments:null},{name:"detune",computeIndex:15,displayName:"detune",interleave:!1,isFilter:!1,maxCount:1,effect:8,compatibleInstruments:null},{name:"vibratoDepth",computeIndex:16,displayName:"vibrato range",interleave:!1,isFilter:!1,maxCount:1,effect:9,compatibleInstruments:null},{name:"noteFilterAllFreqs",computeIndex:1,displayName:"n. filter freqs",interleave:!1,isFilter:!0,maxCount:1,effect:5,compatibleInstruments:null},{name:"noteFilterFreq",computeIndex:17,displayName:"n. filter # freq",interleave:!1,isFilter:!0,maxCount:n.filterMaxPoints,effect:5,compatibleInstruments:null}]),n.operatorWaves=u([{name:"sine",samples:n.sineWave},{name:"triangle",samples:function(){const t=new Float64Array(n.sineWaveLength+1);for(let e=0;e<n.sineWaveLength+1;e++)t[e]=Math.asin(Math.sin(e*Math.PI*2/n.sineWaveLength))/(Math.PI/2);return t}()},{name:"pulse width",samples:l()},{name:"sawtooth",samples:h()},{name:"ramp",samples:h(!0)},{name:"trapezoid",samples:function(t=2){const e=new Float64Array(n.sineWaveLength+1);for(let i=0;i<n.sineWaveLength+1;i++)e[i]=Math.max(-1,Math.min(1,Math.asin(Math.sin(i*Math.PI*2/n.sineWaveLength))*t));return e}(2)}]),n.pwmOperatorWaves=u([{name:"1%",samples:l(.01)},{name:"5%",samples:l(.05)},{name:"12.5%",samples:l(.125)},{name:"25%",samples:l(.25)},{name:"33%",samples:l(1/3)},{name:"50%",samples:l(.5)},{name:"66%",samples:l(2/3)},{name:"75%",samples:l(.75)},{name:"87.5%",samples:l(.875)},{name:"95%",samples:l(.95)},{name:"99%",samples:l(.99)}]),n.barEditorHeight=10,n.modulators=u([{name:"none",pianoName:"None",maxRawVol:6,newNoteVol:6,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"No Mod Setting",promptDesc:["No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.","[$LO - $HI]"]},{name:"song volume",pianoName:"Volume",maxRawVol:100,newNoteVol:100,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"Song Volume",promptDesc:["This setting affects the overall volume of the song, just like the main volume slider.","At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"tempo",pianoName:"Tempo",maxRawVol:n.tempoMax-n.tempoMin,newNoteVol:Math.ceil((n.tempoMax-n.tempoMin)/2),forSong:!0,convertRealFactor:n.tempoMin,associatedEffect:12,promptName:"Song Tempo",promptDesc:["This setting controls the speed your song plays at, just like the tempo slider.","When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.","Note that you can make a 'swing' effect by rapidly changing between two tempo values.","[OVERWRITING] [$LO - $HI] [BPM]"]},{name:"song reverb",pianoName:"Reverb",maxRawVol:2*n.reverbRange,newNoteVol:n.reverbRange,forSong:!0,convertRealFactor:-n.reverbRange,associatedEffect:12,promptName:"Song Reverb",promptDesc:["This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.","At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"next bar",pianoName:"Next Bar",maxRawVol:1,newNoteVol:1,forSong:!0,convertRealFactor:0,associatedEffect:12,promptName:"Go To Next Bar",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.","This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.","You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.","[$LO - $HI]"]},{name:"note volume",pianoName:"Note Vol.",maxRawVol:n.volumeRange,newNoteVol:Math.ceil(n.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-n.volumeRange/2),associatedEffect:12,promptName:"Note Volume",promptDesc:["This setting affects the volume of your instrument as if its note size had been scaled.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.","This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.","For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"pan",pianoName:"Pan",maxRawVol:n.panMax,newNoteVol:Math.ceil(n.panMax/2),forSong:!1,convertRealFactor:0,associatedEffect:2,promptName:"Instrument Panning",promptDesc:["This setting controls the panning of your instrument, just like the panning slider.","At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.","[OVERWRITING] [$LO - $HI] [L-R]"]},{name:"reverb",pianoName:"Reverb",maxRawVol:n.reverbRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:0,promptName:"Instrument Reverb",promptDesc:["This setting controls the reverb of your insturment, just like the reverb slider.","At $LO, your instrument will have no reverb. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"distortion",pianoName:"Distortion",maxRawVol:n.distortionRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:3,promptName:"Instrument Distortion",promptDesc:["This setting controls the amount of distortion for your instrument, just like the distortion slider.","At $LO, your instrument will have no distortion. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"fm slider 1",pianoName:"FM 1",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 1",promptDesc:["This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 2",pianoName:"FM 2",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 2",promptDesc:["This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 3",pianoName:"FM 3",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 3",promptDesc:["This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 4",pianoName:"FM 4",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 4",promptDesc:["This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm feedback",pianoName:"FM Feedback",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Feedback",promptDesc:["This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"pulse width",pianoName:"Pulse Width",maxRawVol:n.pulseWidthRange,newNoteVol:n.pulseWidthRange,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Pulse Width",promptDesc:["This setting controls the width of this instrument's pulse wave, just like the pulse width slider.","At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).","Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.","[OVERWRITING] [$LO - $HI] [%Duty]"]},{name:"detune",pianoName:"Detune",maxRawVol:n.detuneMax-n.detuneMin,newNoteVol:n.detuneCenter,forSong:!1,convertRealFactor:-n.detuneCenter,associatedEffect:8,promptName:"Instrument Detune",promptDesc:["This setting controls the detune for this instrument, just like the detune slider.","At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.","[OVERWRITING] [$LO - $HI] [cents]"]},{name:"vibrato depth",pianoName:"Vibrato Depth",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Depth",promptDesc:["This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.","At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.","[OVERWRITING] [$LO - $HI] [pitch ÷25]"]},{name:"song detune",pianoName:"Detune",maxRawVol:n.songDetuneMax-n.songDetuneMin,newNoteVol:Math.ceil((n.songDetuneMax-n.songDetuneMin)/2),forSong:!0,convertRealFactor:-250,associatedEffect:12,promptName:"Song Detune",promptDesc:["This setting controls the overall detune of the entire song. There is no associated slider.","At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.","[MULTIPLICATIVE] [$LO - $HI] [cents x4]"]},{name:"vibrato speed",pianoName:"Vibrato Speed",maxRawVol:30,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Speed",promptDesc:["This setting controls the speed your instrument will vibrato at, just like the slider.","A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"vibrato delay",pianoName:"Vibrato Delay",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,promptName:"Vibrato Delay",promptDesc:["This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.","A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).","[OVERWRITING] [$LO - $HI] [beats ÷24]"]},{name:"arp speed",pianoName:"Arp Speed",maxRawVol:50,newNoteVol:10,forSong:!1,convertRealFactor:0,associatedEffect:11,promptName:"Arpeggio Speed",promptDesc:["This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.","Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.","[0-4]: x0, x1/16, x⅛, x⅕, x¼,","[5-9]: x⅓, x⅖, x½, x⅔, x¾,","[10-14]: x⅘, x0.9, x1, x1.1, x1.2,","[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,","[20-24]: x1.8, x1.9, x2, x2.1, x2.2,","[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,","[30-34]: x2.8, x2.9, x3, x3.1, x3.2,","[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,","[40-44]: x3.8, x3.9, x4, x4.15, x4.3,","[45-50]: x4.5, x4.8, x5, x5.5, x6, x8","[OVERWRITING] [$LO - $HI]"]},{name:"pan delay",pianoName:"Pan Delay",maxRawVol:20,newNoteVol:10,forSong:!1,convertRealFactor:0,associatedEffect:2,promptName:"Panning Delay",promptDesc:["This setting controls the delay applied to panning for your instrument, just like the pan delay slider.","With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.","[OVERWRITING] [$LO - $HI]"]},{name:"reset arp",pianoName:"Reset Arp",maxRawVol:1,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:11,promptName:"Reset Arpeggio",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.","This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.","[$LO - $HI]"]},{name:"eq filter",pianoName:"EQFlt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter",promptDesc:["This setting controls a few separate things for your instrument's EQ filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"note filter",pianoName:"N.Flt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter",promptDesc:["This setting controls a few separate things for your instrument's note filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"bit crush",pianoName:"Bitcrush",maxRawVol:n.bitcrusherQuantizationRange-1,newNoteVol:Math.round(n.bitcrusherQuantizationRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,promptName:"Instrument Bit Crush",promptDesc:["This setting controls the bit crush of your instrument, just like the bit crush slider.","At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"freq crush",pianoName:"Freq Crush",maxRawVol:n.bitcrusherFreqRange-1,newNoteVol:Math.round(n.bitcrusherFreqRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,promptName:"Instrument Frequency Crush",promptDesc:["This setting controls the frequency crush of your instrument, just like the freq crush slider.","At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo",pianoName:"Echo",maxRawVol:n.echoSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:6,promptName:"Instrument Echo Sustain",promptDesc:["This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.","At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo delay",pianoName:"Echo Delay",maxRawVol:n.echoDelayRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Instrument Echo Delay",promptDesc:["This setting controls the echo delay of your instrument, just like the echo delay slider.","At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.","[OVERWRITING] [$LO - $HI] [~beats ÷12]"]},{name:"chorus",pianoName:"Chorus",maxRawVol:n.chorusRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:1,promptName:"Instrument Chorus",promptDesc:["This setting controls the chorus strength of your instrument, just like the chorus slider.","At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt cut",pianoName:"EQFlt Cut",maxRawVol:n.filterSimpleCutRange-1,newNoteVol:n.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt peak",pianoName:"EQFlt Peak",maxRawVol:n.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"EQ Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt cut",pianoName:"N.Flt Cut",maxRawVol:n.filterSimpleCutRange-1,newNoteVol:n.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt peak",pianoName:"N.Flt Peak",maxRawVol:n.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,promptName:"Note Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"pitch shift",pianoName:"Pitch Shift",maxRawVol:n.pitchShiftRange-1,newNoteVol:n.pitchShiftCenter,forSong:!1,convertRealFactor:-n.pitchShiftCenter,associatedEffect:7,promptName:"Pitch Shift",promptDesc:["This setting controls the pitch offset of your instrument, just like the pitch shift slider.","At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.","[OVERWRITING] [$LO - $HI] [pitch]"]},{name:"sustain",pianoName:"Sustain",maxRawVol:n.stringSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"Picked String Sustain",promptDesc:["This setting controls the sustain of your picked string instrument, just like the sustain slider.","At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"mix volume",pianoName:"Mix Vol.",maxRawVol:n.volumeRange,newNoteVol:Math.ceil(n.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-n.volumeRange/2),associatedEffect:12,promptName:"Mix Volume",promptDesc:["This setting affects the volume of your instrument as if its volume slider had been moved.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.","Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"fm slider 5",pianoName:"FM 4",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Slider 6",promptDesc:["This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm feedback",pianoName:"FM Feedback",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:12,promptName:"FM Feedback",promptDesc:["This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]}]);/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);class I{static valueToPreset(t){const e=t>>6,n=63&t;return I.presetCategories[e].presets[n]}static midiProgramToPresetValue(t){for(let e=0;e<I.presetCategories.length;e++){const n=I.presetCategories[e];for(let i=0;i<n.presets.length;i++){const s=n.presets[i];if(s.generalMidi&&s.midiProgram==t)return(e<<6)+i}}return null}static nameToPresetValue(t){for(let e=0;e<I.presetCategories.length;e++){const n=I.presetCategories[e];for(let i=0;i<n.presets.length;i++){if(n.presets[i].name==t)return(e<<6)+i}}return null}static instrumentToPreset(t){var n;return null===(n=I.presetCategories[0].presets.dictionary)||void 0===n?void 0:n[null==e?void 0:e[t]]}}function F(t,e){for(let n=0;n<t.length;n++)t[n]*=e}function P(t){if(!function(t){return!(!t||t&t-1)}(t))throw new Error("FFT array length must be a power of 2.");return Math.round(Math.log(t)/Math.log(2))}function T(t,e){const n=P(e);if(e<4)throw new Error("FFT array length must be at least 4.");for(let i=n-1;i>=2;i--){const n=1<<i,s=n>>1,a=n<<1,r=2*Math.PI/a,o=Math.cos(r),l=Math.sin(r),h=2*o;for(let i=0;i<e;i+=a){const e=i,a=e+s,r=e+n,c=r+s,u=r+n,f=t[e],p=t[r];t[e]=f+p,t[a]*=2,t[r]=f-p,t[c]*=2;let d=o,m=-l,y=1,g=0;for(let n=1;n<s;n++){const i=e+n,s=r-n,a=r+n,o=u-n,l=t[i],c=t[s],f=t[a],p=t[o],v=l-c,b=f+p;t[i]=l+c,t[s]=p-f,t[a]=v*d-b*m,t[o]=b*d+v*m;const M=h*d-y,S=h*m-g;y=d,g=m,d=M,m=S}}}for(let n=0;n<e;n+=4){const e=n+1,i=n+2,s=n+3,a=t[n],r=2*t[e],o=t[i],l=2*t[s],h=a+o,c=a-o;t[n]=h+r,t[e]=h-r,t[i]=c+l,t[s]=c-l}!function(t,e){const n=P(e);if(n>16)throw new Error("FFT array length must not be greater than 2^16.");const i=16-n;for(let n=0;n<e;n++){let e;if(e=(43690&n)>>1|(21845&n)<<1,e=(52428&e)>>2|(13107&e)<<2,e=(61680&e)>>4|(3855&e)<<4,e=(e>>8|(255&e)<<8)>>i,e>n){let i=t[n];t[n]=t[e],t[e]=i}}}(t,e)}I.version="2.5",I.versionDisplayName="GoldBox "+I.version,I.releaseNotesURL="https://jummbus.bitbucket.io/patch_notes/"+I.version+".html",I.isOnMac=/^Mac/i.test(navigator.platform)||/Mac OS X/i.test(navigator.userAgent)||/^(iPhone|iPad|iPod)/i.test(navigator.platform)||/(iPhone|iPad|iPod)/i.test(navigator.userAgent),I.ctrlSymbol=I.isOnMac?"⌘":"Ctrl+",I.presetCategories=u([{name:"Custom Instruments",presets:u([{name:e[0],customType:0},{name:e[1],customType:1},{name:e[2],customType:2},{name:e[3],customType:3},{name:e[4],customType:4},{name:e[5],customType:5},{name:e[6],customType:6},{name:e[7],customType:7},{name:e[8],customType:8},{name:e[10],customType:10}])},{name:"Retro Presets",presets:u([{name:"square wave",midiProgram:80,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"square",unison:"none",envelopes:[]}},{name:"triangle wave",midiProgram:71,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"triangle",unison:"none",envelopes:[]}},{name:"square lead",midiProgram:80,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"square",unison:"hum",envelopes:[]}},{name:"sawtooth lead 1",midiProgram:81,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"sawtooth",unison:"shimmer",envelopes:[]}},{name:"sawtooth lead 2",midiProgram:81,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1}],effects:["vibrato","aliasing"],vibrato:"light",transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[]}},{name:"chip noise",midiProgram:116,isNoise:!0,settings:{type:"noise",transition:"hard",effects:["aliasing"],chord:"arpeggio",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"steady",wave:"retro"}},{name:"FM twang",midiProgram:32,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM bass",midiProgram:36,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:11},{frequency:"1×",amplitude:7},{frequency:"1×",amplitude:9},{frequency:"20×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"twang 2",index:3}]}},{name:"FM flute",midiProgram:73,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM organ",midiProgram:16,settings:{type:"FM",eqFilter:[],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:14},{frequency:"2×",amplitude:14},{frequency:"1×",amplitude:11},{frequency:"2×",amplitude:11}],envelopes:[]}},{name:"NES Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",vibrato:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-23,-23,-23,-23,-22,-22,-22,-22,-21,-21,-21,-21,-20,-20,-20,-20,-19,-19,-19,-19,-18,-18,-18,-18,-17,-17,-17,-17,24,24,24,24,23,23,23,23,22,22,22,22,21,21,21,21,20,20,20,20,19,19,19,19,18,18,18,18,17,17,17,17]}},{name:"Gameboy Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-17,-15,-13,-13,-11,-11,-11,-9,-9,-9,-9,-7,-7,-7,-7,-7,-5,-5,-5,-5,-5,-5,-3,-3,-3,-3,-3,-3,-3,-3,24,20,17,15,13,13,11,11,11,9,9,9,9,7,7,7,7,7,5,5,5,5,5,5,3,3,3,3,3,3,3,3]}},{name:"VRC6 Sawtooth",midiProgram:81,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-16,-13,-10,-8,-6,-5,-4,-4,0,0,0,0,4,4,4,4,4,4,8,8,8,8,8,8,8,8,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,20,20,20,20,20,20,20,20,24,24,24,24,24,24,24,24,24,24,24,24]}},{name:"Atari Square",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-23,-23,-23,-22,-22,-22,-21,-21,-21,-20,-20,-20,-19,-19,-19,-18,-18,-18,-17,-17,-17,-16,-16,-16,-15,-15,-15,-14,-14,-14,-13,-13,-13,24,24,24,23,23,23,22,22,22,21,21,21,20,20,20,19,19,19,18,18,18,17,17,17,16,16,15,15]}},{name:"Atari Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,24,24,24,24,24,-24,-24,-24,-24,24,24,-24,-24,24,24]}},{name:"Sunsoft Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[24,24,15,15,9,9,-4,-4,0,0,-13,-13,-19,-19,-24,-24,-24,-24,-10,-10,0,0,-7,-7,-7,-7,0,0,6,6,-4,-4,3,3,-4,-4,3,3,3,3,9,9,15,15,15,15,6,6,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,3,3,12,12,24,24]}},{name:"FM sine",midiProgram:55,settings:{type:"FM",transition:"seemless",effects:"none",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}}])},{name:"Keyboard Presets",presets:u([{name:"grand piano 1",midiProgram:0,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,86,86,71,71,71,0,86,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}},{name:"bright piano",midiProgram:1,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.7071},{type:"high-pass",cutoffHz:148.65,linearGain:.5},{type:"peak",cutoffHz:3363.59,linearGain:1.4142}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,86,86,71,71,0,71,71,71,71,71,71,14,57,57,57,57,57,57,29,57,57,57,57,57,57,57],unison:"piano",stringSustain:86,envelopes:[]}},{name:"electric grand",midiProgram:2,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"1/8 pulse",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"honky-tonk piano",midiProgram:3,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,71,86,71,43,71,43,43,57,57,57,29,57,57,57,57,57,57,43,57,57,57,43,43,43,43],unison:"honky tonk",stringSustain:71,envelopes:[]}},{name:"electric piano 1",midiProgram:4,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",harmonics:[86,100,100,71,71,57,57,43,43,43,29,29,29,14,14,14,0,0,0,0,0,57,0,0,0,0,0,0],unison:"none",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"electric piano 2",midiProgram:5,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:9},{frequency:"16×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"harpsichord",midiProgram:6,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:250,linearGain:.3536},{type:"peak",cutoffHz:11313.71,linearGain:2.8284}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,100,86,57,86,86,86,86,57,57,71,71,86,86,71,71,86,86,71,71,71,71,71,71,71,71,71],unison:"none",stringSustain:79,envelopes:[]}},{name:"clavinet",midiProgram:7,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.3536}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"3⟲",feedbackAmplitude:6,operators:[{frequency:"3×",amplitude:15},{frequency:"~1×",amplitude:6},{frequency:"8×",amplitude:4},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"},{target:"feedbackAmplitude",envelope:"twang 2"}]}},{name:"dulcimer",midiProgram:15,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,100,86,100,86,57,100,100,86,100,86,100,86,100,71,57,71,71,100,86,71,86,86,100,86,86,86],unison:"piano",stringSustain:79,envelopes:[]}},{name:"grand piano 2",midiProgram:0,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,86,86,86,86,71,71,57,0,57,29,43,57,57,57,43,43,0,29,43,43,43,43,43,43,29,0,29],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}}])},{name:"Idiophone Presets",presets:u([{name:"celesta",midiProgram:8,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~1×",amplitude:11,envelope:"custom"},{frequency:"8×",amplitude:6,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"3×",amplitude:1,envelope:"twang 2"}]}},{name:"glockenspiel",midiProgram:9,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,feedbackEnvelope:"decay 1",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"5×",amplitude:11,envelope:"custom"},{frequency:"8×",amplitude:7,envelope:"custom"},{frequency:"20×",amplitude:2,envelope:"twang 1"}]}},{name:"music box 1",midiProgram:10,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,0,0,100,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,71,0],unison:"none",stringSustain:64,envelopes:[]}},{name:"music box 2",midiProgram:10,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:.7071}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,57,57,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0],unison:"none",stringSustain:29,envelopes:[]}},{name:"vibraphone",midiProgram:11,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:3,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:9,envelope:"custom"},{frequency:"9×",amplitude:3,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"}]}},{name:"marimba",midiProgram:12,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"4×",amplitude:6,envelope:"custom"},{frequency:"13×",amplitude:6,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"kalimba",midiProgram:108,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:11,envelope:"custom"},{frequency:"5×",amplitude:3,envelope:"twang 2"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"xylophone",midiProgram:13,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"11×",amplitude:9,envelope:"custom"},{frequency:"20×",amplitude:6,envelope:"twang 1"}]}},{name:"tubular bell",midiProgram:14,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:96,chord:"strum",harmonics:[43,71,0,100,0,100,0,86,0,0,86,0,14,71,14,14,57,14,14,43,14,14,43,14,14,43,14,14],unison:"shimmer",stringSustain:86,envelopes:[]}},{name:"bell synth",midiProgram:14,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:10,envelope:"custom"},{frequency:"7×",amplitude:6,envelope:"twang 3"},{frequency:"20×",amplitude:1,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"rain drop",midiProgram:96,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"1×",amplitude:6,envelope:"tremolo1"}]}},{name:"crystal",midiProgram:98,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"delayed",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"}]}},{name:"tinkle bell",midiProgram:112,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"~2×",amplitude:7,envelope:"custom"},{frequency:"5×",amplitude:7,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"16×",amplitude:7,envelope:"custom"}]}},{name:"agogo",midiProgram:113,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"decay 1",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→4",feedbackAmplitude:15,feedbackEnvelope:"decay 1",operators:[{frequency:"2×",amplitude:9,envelope:"custom"},{frequency:"5×",amplitude:6,envelope:"custom"},{frequency:"8×",amplitude:9,envelope:"custom"},{frequency:"13×",amplitude:11,envelope:"custom"}]}}])},{name:"Guitar Presets",presets:u([{name:"nylon guitar",midiProgram:24,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"5×",amplitude:2,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"steady"}]}},{name:"steel guitar",midiProgram:25,generalMidi:!0,settings:{type:"Picked String",eqFilter:[],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,86,71,71,71,86,86,71,57,43,43,43,57,57,57,57,57,43,43,43,43,43,43,43,43,43,43],unison:"none",stringSustain:71,envelopes:[]}},{name:"jazz guitar",midiProgram:26,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,57,71,71,43,57,71,57,43,29,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"clean guitar",midiProgram:27,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[86,100,100,100,86,57,86,100,100,100,71,57,43,71,86,71,57,57,71,71,71,71,57,57,57,57,57,43]}},{name:"muted guitar",midiProgram:28,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:4,envelope:"twang 3"},{frequency:"4×",amplitude:4,envelope:"twang 2"},{frequency:"16×",amplitude:4,envelope:"twang 1"}]}}])},{name:"Picked Bass Presets",presets:u([{name:"acoustic bass",midiProgram:32,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,71,71,71,57,57,57,57,43,43,43,43,43,29,29,29,29,29,29,14,14,14,14,14,14,14]}},{name:"fingered bass",midiProgram:33,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,57,71,43,57,29,29,29,29,29,29,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0]}},{name:"picked bass",midiProgram:34,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:1,envelope:"twang 3"},{frequency:"1×",amplitude:9,envelope:"steady"}]}},{name:"fretless bass",midiProgram:35,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"flare 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,71,57,57,71,71,71,57,57,57,57,57,57,57,43,43,43,43,43,43,43,43,29,29,14]}},{name:"slap bass 1",midiProgram:36,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,100,100,100,86,71,57,29,29,43,43,57,71,57,29,29,43,57,57,57,43,43,43,57,71,71,71,71]}},{name:"slap bass 2",midiProgram:37,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"13×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"bass synth 1",midiProgram:38,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲ 4⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 1"},{frequency:"~1×",amplitude:13,envelope:"twang 2"}]}},{name:"bass synth 2",midiProgram:39,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1e3,filterResonance:57,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1→2",feedbackAmplitude:4,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"steady"},{frequency:"3×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"bass & lead",midiProgram:87,generalMidi:!0,settings:{type:"chip",transition:"hard",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:86,filterEnvelope:"twang 2",wave:"sawtooth",interval:"shimmer",vibrato:"none"}},{name:"dubstep yoi yoi",midiProgram:87,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.7071}],effects:["note filter","bitcrusher"],noteFilter:[{type:"low-pass",cutoffHz:594.6,linearGain:11.3137}],bitcrusherOctave:1.5,bitcrusherQuantization:0,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"arpeggio",wave:"sawtooth",unison:"none",envelopes:[{target:"noteFilterFreq",envelope:"flare 2",index:0}]}}])},{name:"Picked String Presets",presets:u([{name:"pizzicato strings",midiProgram:45,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"3×",amplitude:11,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:10,envelope:"steady"}]}},{name:"harp",midiProgram:46,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"4×",amplitude:6,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:6,envelope:"steady"}]}},{name:"sitar",midiProgram:104,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:8e3,filterResonance:57,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 3"},{frequency:"9×",amplitude:3,envelope:"twang 3"},{frequency:"16×",amplitude:9,envelope:"swell 3"}]}},{name:"banjo",midiProgram:105,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"11×",amplitude:3,envelope:"twang 3"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"ukulele",midiProgram:105,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"9×",amplitude:4,envelope:"twang 2"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"shamisen",midiProgram:106,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"steady"},{frequency:"16×",amplitude:4,envelope:"twang 3"},{frequency:"1×",amplitude:7,envelope:"steady"}]}},{name:"koto",midiProgram:107,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 2",operators:[{frequency:"~1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:10,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"twang 3"},{frequency:"~2×",amplitude:8,envelope:"twang 3"}]}}])},{name:"Distortion Presets",presets:u([{name:"overdrive guitar",midiProgram:29,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:840.9,linearGain:.5}],effects:["note filter","distortion"],noteFilter:[{type:"high-pass",cutoffHz:297.3,linearGain:2},{type:"low-pass",cutoffHz:2378.41,linearGain:.7071}],distortion:71,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"distortion guitar",midiProgram:30,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:594.6,linearGain:.3536},{type:"peak",cutoffHz:1e3,linearGain:.25}],effects:["note filter","distortion","reverb"],noteFilter:[{type:"high-pass",cutoffHz:353.55,linearGain:2},{type:"low-pass",cutoffHz:2e3,linearGain:1}],distortion:86,reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"charango synth",midiProgram:84,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:1}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2→3→4",feedbackAmplitude:8,operators:[{frequency:"3×",amplitude:13},{frequency:"~1×",amplitude:5},{frequency:"4×",amplitude:6},{frequency:"3×",amplitude:7}],envelopes:[{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"guitar harmonics",midiProgram:31,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3)←4",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"4×",amplitude:12},{frequency:"16×",amplitude:5},{frequency:"1×",amplitude:2},{frequency:"~1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:1},{target:"operatorAmplitude",envelope:"punch",index:2},{target:"operatorAmplitude",envelope:"twang 1",index:3}]}},{name:"PWM overdrive",midiProgram:29,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1.4142}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:17.67767,envelopes:[{target:"pulseWidth",envelope:"punch"}]}},{name:"PWM distortion",midiProgram:30,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:2}],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:50,envelopes:[{target:"pulseWidth",envelope:"swell 1"}]}},{name:"FM overdrive",midiProgram:29,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:2,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"~2×",amplitude:6},{frequency:"1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"twang 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3},{target:"feedbackAmplitude",envelope:"punch"}]}},{name:"FM distortion",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:4,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:11},{frequency:"1×",amplitude:9},{frequency:"~2×",amplitude:4}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3}]}}])},{name:"Bellows Presets",presets:u([{name:"drawbar organ 1",midiProgram:16,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,86,0,86,0,0,0,86,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"drawbar organ 2",midiProgram:16,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,29,71,86,71,14,0,100,0,0,0,86,0,0,0,71,0,0,0,57,0,0,0,29,0,0,0,0]}},{name:"percussive organ",midiProgram:17,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",transition:"hard",effects:"reverb",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"punch",vibrato:"light",algorithm:"1 2 3 4",feedbackType:"1→3 2→4",feedbackAmplitude:7,feedbackEnvelope:"decay 1",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"custom"},{frequency:"3×",amplitude:8,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"custom"}]}},{name:"rock organ",midiProgram:18,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"punch",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,feedbackEnvelope:"flare 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:5,envelope:"steady"}]}},{name:"pipe organ",midiProgram:19,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"2×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"}]}},{name:"reed organ",midiProgram:20,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[71,86,100,86,71,100,57,71,71,71,43,43,43,71,43,71,57,57,57,57,57,57,57,29,43,29,29,14]}},{name:"accordion",midiProgram:21,generalMidi:!0,settings:{type:"chip",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"swell 1",wave:"double saw",interval:"honky tonk",vibrato:"none"}},{name:"bandoneon",midiProgram:23,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",interval:"hum",vibrato:"none",harmonics:[86,86,86,57,71,86,57,71,71,71,57,43,57,43,71,43,71,57,57,43,43,43,57,43,43,29,29,29]}},{name:"bagpipe",midiProgram:109,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"punch",interval:"hum",vibrato:"none",harmonics:[71,86,86,100,100,86,57,100,86,71,71,71,57,57,57,71,57,71,57,71,43,57,57,43,43,43,43,43]}}])},{name:"String Presets",presets:u([{name:"violin 1",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"delayed",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1→2",feedbackAmplitude:5,operators:[{frequency:"4×",amplitude:9},{frequency:"3×",amplitude:9},{frequency:"2×",amplitude:7},{frequency:"7×",amplitude:5}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"viola",midiProgram:41,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"}]}},{name:"cello",midiProgram:42,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.1768},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"peak",cutoffHz:4756.83,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:16e3,linearGain:.0884}],reverb:67,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:12,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"16×",amplitude:5},{frequency:"~1×",amplitude:10},{frequency:"1×",amplitude:9},{frequency:"6×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3}]}},{name:"contrabass",midiProgram:43,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"16×",amplitude:5,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"6×",amplitude:3,envelope:"swell 1"}]}},{name:"fiddle",midiProgram:110,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←(3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"16×",amplitude:3,envelope:"steady"}]}},{name:"tremolo strings",midiProgram:44,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:0,filterEnvelope:"tremolo4",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:12,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"~2×",amplitude:8,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"custom"},{frequency:"7×",amplitude:8,envelope:"custom"}]}},{name:"strings",midiProgram:48,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"3×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:3,envelope:"swell 1"}]}},{name:"slow strings",midiProgram:49,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:1414,filterResonance:0,filterEnvelope:"swell 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:6,feedbackEnvelope:"flare 3",operators:[{frequency:"4×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:10,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"swell 1"}]}},{name:"strings synth 1",midiProgram:50,generalMidi:!0,settings:{type:"chip",transition:"soft fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:1414,filterResonance:43,filterEnvelope:"steady",wave:"sawtooth",interval:"hum",vibrato:"delayed"}},{name:"strings synth 2",midiProgram:51,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:12,feedbackEnvelope:"swell 1",operators:[{frequency:"3×",amplitude:6,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"custom"}]}},{name:"orchestra hit 1",midiProgram:55,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"custom",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"twang 3"},{frequency:"2×",amplitude:15,envelope:"flare 3"},{frequency:"4×",amplitude:15,envelope:"flare 2"},{frequency:"8×",amplitude:15,envelope:"flare 1"}]}},{name:"violin 2",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:2828,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"light",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:8,envelope:"swell 1"}]}},{name:"orchestra hit 2",midiProgram:55,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"decay 1",vibrato:"delayed",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"3×",amplitude:12,envelope:"custom"},{frequency:"4×",amplitude:14,envelope:"custom"}]}}])},{name:"Vocal Presets",presets:u([{name:"choir soprano",midiProgram:94,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25},{type:"low-pass",cutoffHz:6727.17,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:33,fadeInSeconds:.0413,fadeOutTicks:24,harmonics:[100,100,86,57,29,29,57,71,57,29,14,14,14,29,43,57,43,29,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"choir tenor",midiProgram:52,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"choir bass",midiProgram:52,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:11.3137},{type:"peak",cutoffHz:594.6,linearGain:5.6569},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo soprano",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,86,43,14,14,57,71,57,14,14,14,14,14,43,57,43,14,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"solo tenor",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo bass",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:5.6569},{type:"peak",cutoffHz:594.6,linearGain:8},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:8},{type:"high-pass",cutoffHz:210.22,linearGain:1.4142}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,transition:"normal",fadeInSeconds:.0263,fadeOutTicks:12,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"voice ooh",midiProgram:53,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:57,filterEnvelope:"steady",interval:"union",vibrato:"shaky",harmonics:[100,57,43,43,14,14,0,0,0,14,29,29,14,0,14,29,29,14,0,0,0,0,0,0,0,0,0,0]}},{name:"voice synth",midiProgram:54,generalMidi:!0,settings:{type:"chip",transition:"medium fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:57,filterEnvelope:"steady",wave:"rounded",interval:"union",vibrato:"light"}},{name:"vox synth lead",midiProgram:85,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",vibrato:"light",algorithm:"(1 2 3)←4",feedbackType:"1→2→3→4",feedbackAmplitude:2,feedbackEnvelope:"punch",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"9×",amplitude:5,envelope:"custom"},{frequency:"20×",amplitude:1,envelope:"custom"},{frequency:"~1×",amplitude:4,envelope:"steady"}]}},{name:"tiny robot",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"delayed",reverb:33,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"2×",amplitude:15},{frequency:"1×",amplitude:7},{frequency:"~1×",amplitude:7},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:1},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"yowie",midiProgram:85,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:86,filterEnvelope:"tremolo5",vibrato:"none",algorithm:"1←2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:12,feedbackEnvelope:"tremolo3",operators:[{frequency:"2×",amplitude:12,envelope:"custom"},{frequency:"16×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"mouse",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"light",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,operators:[{frequency:"2×",amplitude:13},{frequency:"5×",amplitude:12},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteVolume",envelope:"note size"},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"gumdrop",midiProgram:85,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:15,envelope:"punch"},{frequency:"4×",amplitude:15,envelope:"punch"},{frequency:"7×",amplitude:15,envelope:"punch"},{frequency:"1×",amplitude:10,envelope:"twang 1"}]}},{name:"echo drop",midiProgram:102,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:11,envelope:"custom"},{frequency:"~1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:2,envelope:"steady"},{frequency:"16×",amplitude:5,envelope:"swell 3"}]}},{name:"dark choir",midiProgram:85,settings:{type:"spectrum",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",spectrum:[43,14,14,14,14,14,14,100,14,14,14,57,14,14,100,14,43,14,43,14,14,43,14,29,14,29,14,14,29,0]}}])},{name:"Brass Presets",presets:u([{name:"trumpet",midiProgram:56,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:5,envelope:"flare 2"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"trombone",midiProgram:57,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:7,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"tuba",midiProgram:58,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"muted trumpet",midiProgram:59,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:2.8284},{type:"peak",cutoffHz:4e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:13},{frequency:"1×",amplitude:5},{frequency:"9×",amplitude:5},{frequency:"13×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"french horn",midiProgram:60,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1},{type:"peak",cutoffHz:2378.41,linearGain:2.8284}],effects:["reverb"],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:8}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"swell 1"}]}},{name:"brass section",midiProgram:61,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"swell 1"},{frequency:"~1×",amplitude:10,envelope:"swell 1"}]}},{name:"brass synth 1",midiProgram:62,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:11,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"flare 1"},{frequency:"~1×",amplitude:8,envelope:"flare 2"}]}},{name:"brass synth 2",midiProgram:63,generalMidi:!0,settings:{type:"FM",transition:"soft",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"flare 1"},{frequency:"~1×",amplitude:7,envelope:"flare 1"}]}},{name:"pulse brass",midiProgram:62,settings:{type:"PWM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",pulseWidth:50,pulseEnvelope:"flare 3",vibrato:"none"}}])},{name:"Reed Presets",presets:u([{name:"soprano sax",midiProgram:64,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"4×",amplitude:4,envelope:"swell 1"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"5×",amplitude:4,envelope:"punch"}]}},{name:"alto sax",midiProgram:65,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:4,feedbackEnvelope:"punch",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"4×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:12,envelope:"steady"}]}},{name:"tenor sax",midiProgram:66,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:12,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"steady"},{frequency:"1×",amplitude:3,envelope:"steady"},{frequency:"8×",amplitude:3,envelope:"steady"}]}},{name:"baritone sax",midiProgram:67,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"swell 2",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"8×",amplitude:4,envelope:"steady"},{frequency:"4×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:4,envelope:"punch"}]}},{name:"sax synth",midiProgram:64,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"shehnai",midiProgram:111,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:3,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"oboe",midiProgram:68,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 1",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"tremolo5",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:2,envelope:"steady"}]}},{name:"english horn",midiProgram:69,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"punch"},{frequency:"8×",amplitude:4,envelope:"steady"}]}},{name:"bassoon",midiProgram:70,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:707,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"clarinet",midiProgram:71,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}},{name:"harmonica",midiProgram:22,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:29,filterEnvelope:"swell 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:9,feedbackEnvelope:"tremolo5",operators:[{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"~2×",amplitude:2,envelope:"twang 3"},{frequency:"1×",amplitude:0,envelope:"steady"}]}}])},{name:"Flute Presets",presets:u([{name:"flute 1",midiProgram:73,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"4⟲",feedbackAmplitude:7,feedbackEnvelope:"decay 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"2×",amplitude:4,envelope:"steady"},{frequency:"1×",amplitude:3,envelope:"steady"},{frequency:"~1×",amplitude:1,envelope:"punch"}]}},{name:"recorder",midiProgram:74,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 2",interval:"union",vibrato:"none",harmonics:[100,43,57,43,57,43,43,43,43,43,43,43,43,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"whistle",midiProgram:78,generalMidi:!0,settings:{type:"harmonics",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"ocarina",midiProgram:79,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,14,57,14,29,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"piccolo",midiProgram:72,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"4⟲",feedbackAmplitude:15,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:5,envelope:"punch"}]}},{name:"shakuhachi",midiProgram:77,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"steady",vibrato:"delayed",algorithm:"1←(2 3←4)",feedbackType:"3→4",feedbackAmplitude:15,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:4,envelope:"twang 1"},{frequency:"20×",amplitude:15,envelope:"steady"}]}},{name:"pan flute",midiProgram:75,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"high-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,fadeInSeconds:.0125,fadeOutTicks:-3,spectrum:[100,0,0,0,0,0,0,14,0,0,0,71,0,0,14,0,57,0,29,14,29,14,14,29,14,29,14,14,29,14],envelopes:[{target:"noteFilterFreq",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"punch"}]}},{name:"blown bottle",midiProgram:76,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:4,envelope:"custom"},{frequency:"6×",amplitude:2,envelope:"custom"},{frequency:"11×",amplitude:2,envelope:"custom"}]}},{name:"calliope",midiProgram:82,generalMidi:!0,settings:{type:"spectrum",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"steady",spectrum:[100,0,0,0,0,0,0,86,0,0,0,71,0,0,57,0,43,0,29,14,14,29,14,14,14,14,14,14,14,14]}},{name:"chiffer",midiProgram:83,generalMidi:!0,settings:{type:"spectrum",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"punch",spectrum:[86,0,0,0,0,0,0,71,0,0,0,71,0,0,57,0,57,0,43,14,14,43,14,29,14,29,29,29,29,14]}},{name:"breath noise",midiProgram:121,generalMidi:!0,settings:{type:"spectrum",eqFilter:[],effects:["chord type","note filter","reverb"],chord:"strum",noteFilter:[{type:"high-pass",cutoffHz:840.9,linearGain:.3536},{type:"low-pass",cutoffHz:16e3,linearGain:.3536}],reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,spectrum:[71,0,0,0,0,0,0,29,0,0,0,71,0,0,29,0,100,29,14,29,100,29,100,14,14,71,0,29,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"}]}},{name:"flute 2",midiProgram:73,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"seamless",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}}])},{name:"Pad Presets",presets:u([{name:"new age pad",midiProgram:88,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"2×",amplitude:14},{frequency:"~1×",amplitude:4},{frequency:"6×",amplitude:3},{frequency:"13×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"swell 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"feedbackAmplitude",envelope:"swell 3"}]}},{name:"warm pad",midiProgram:89,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:7,operators:[{frequency:"1×",amplitude:14},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"},{target:"operatorAmplitude",envelope:"swell 1",index:1}]}},{name:"polysynth pad",midiProgram:90,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"honky tonk",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"space voice pad",midiProgram:91,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569},{type:"peak",cutoffHz:2828.43,linearGain:5.6569},{type:"peak",cutoffHz:1414.21,linearGain:.1768}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:8},{frequency:"3×",amplitude:7},{frequency:"11×",amplitude:2}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:3},{target:"feedbackAmplitude",envelope:"swell 2"}]}},{name:"bowed glass pad",midiProgram:92,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:12},{frequency:"3×",amplitude:7},{frequency:"7×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"flare 3",index:3}]}},{name:"metallic pad",midiProgram:93,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:13,operators:[{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:9},{frequency:"1×",amplitude:7},{frequency:"11×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"swell 2",index:2},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"sweep pad",midiProgram:95,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"atmosphere",midiProgram:99,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["chorus","reverb"],chorus:100,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",algorithm:"1←(2 3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:14},{frequency:"~1×",amplitude:10},{frequency:"3×",amplitude:7},{frequency:"1×",amplitude:7}],envelopes:[{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"twang 2",index:2},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"brightness",midiProgram:100,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:2}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",harmonics:[100,86,86,86,43,57,43,71,43,43,43,57,43,43,57,71,57,43,29,43,57,57,43,29,29,29,29,14],unison:"octave",stringSustain:86,envelopes:[]}},{name:"goblins",midiProgram:101,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2828.43,linearGain:11.3137}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:10,operators:[{frequency:"1×",amplitude:15},{frequency:"4×",amplitude:5},{frequency:"1×",amplitude:10},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 2"},{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"feedbackAmplitude",envelope:"flare 3"}]}},{name:"sci-fi",midiProgram:103,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:9513.66,linearGain:2.8284}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"~1×",amplitude:13},{frequency:"2×",amplitude:10},{frequency:"5×",amplitude:5},{frequency:"11×",amplitude:8}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"tremolo5",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"flutter pad",midiProgram:90,settings:{type:"FM",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:9,operators:[{frequency:"1×",amplitude:13},{frequency:"5×",amplitude:7},{frequency:"7×",amplitude:5},{frequency:"~1×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"operatorAmplitude",envelope:"punch",index:3}]}},{name:"feedback pad",midiProgram:89,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2378.41,linearGain:8}],effects:[],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"custom interval",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:15}],envelopes:[{target:"feedbackAmplitude",envelope:"swell 2"}]}}])},{name:"Drum Presets",presets:u([{name:"standard drumset",midiProgram:116,isNoise:!0,settings:{type:"drumset",effects:"reverb",drums:[{filterEnvelope:"twang 1",spectrum:[57,71,71,86,86,86,71,71,71,71,57,57,57,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29,29]},{filterEnvelope:"twang 1",spectrum:[0,0,0,100,71,71,57,86,57,57,57,71,43,43,57,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,100,57,43,43,29,57,43,29,71,43,43,43,43,57,43,43,43,43,43,43,43,43,29,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,0,71,57,43,43,43,57,57,43,29,57,43,43,43,29,43,57,43,43,43,43,43,43,29,43,43]},{filterEnvelope:"decay 2",spectrum:[0,14,29,43,86,71,29,43,43,43,43,29,71,29,71,29,43,43,43,43,57,43,43,57,43,43,43,57,57,57]},{filterEnvelope:"decay 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,57,71,71,71,71,71,71,71,71,57,57,57,57,43,43,43]},{filterEnvelope:"twang 3",spectrum:[43,43,43,71,29,29,43,43,43,29,43,43,43,29,29,43,43,29,29,29,57,14,57,43,43,57,43,43,57,57]},{filterEnvelope:"decay 3",spectrum:[29,43,43,43,43,29,29,43,29,29,43,29,14,29,43,29,43,29,57,29,43,57,43,71,43,71,57,57,71,71]},{filterEnvelope:"twang 3",spectrum:[43,29,29,43,29,29,29,57,29,29,29,57,43,43,29,29,57,43,43,43,71,43,43,71,57,71,71,71,71,71]},{filterEnvelope:"decay 3",spectrum:[57,57,57,43,57,57,43,43,57,43,43,43,71,57,43,57,86,71,57,86,71,57,86,100,71,86,86,86,86,86]},{filterEnvelope:"flare 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,71,71,86,86,100,100,100,100,100,100,100,100,86,57,29,0]},{filterEnvelope:"decay 2",spectrum:[14,14,14,14,29,14,14,29,14,43,14,43,57,86,57,57,100,57,43,43,57,100,57,43,29,14,0,0,0,0]}]}},{name:"steel pan",midiProgram:114,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"high-pass",cutoffHz:62.5,linearGain:.1768}],effects:["note filter","chorus","reverb"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],chorus:67,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"~1×",amplitude:14},{frequency:"7×",amplitude:3},{frequency:"3×",amplitude:5},{frequency:"4×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay 2"},{target:"operatorAmplitude",envelope:"flare 1",index:1},{target:"operatorAmplitude",envelope:"flare 2",index:2},{target:"operatorAmplitude",envelope:"swell 2",index:3}]}},{name:"steel pan synth",midiProgram:114,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3←4",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"~1×",amplitude:12},{frequency:"2×",amplitude:15},{frequency:"4×",amplitude:14},{frequency:"~1×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"operatorAmplitude",envelope:"note size",index:0},{target:"operatorAmplitude",envelope:"note size",index:1},{target:"operatorAmplitude",envelope:"flare 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"flare 1"}]}},{name:"timpani",midiProgram:47,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"peak",cutoffHz:6727.17,linearGain:5.6569}],effects:["pitch shift","note filter","reverb"],pitchShiftSemitones:15,noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[100,0,0,0,86,0,0,71,0,14,43,14,43,43,0,29,43,29,29,29,43,29,43,29,43,43,43,43,43,43],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"pitchShift",envelope:"twang 1"}]}},{name:"dark strike",midiProgram:47,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[0,0,14,14,14,29,29,43,43,86,43,43,43,29,86,29,29,29,86,29,14,14,14,14,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"woodblock",midiProgram:115,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",spectrum:[0,14,29,43,43,57,86,86,71,57,57,43,43,57,86,86,43,43,71,57,57,57,57,57,86,86,71,71,71,71]}},{name:"taiko drum",midiProgram:116,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"twang 1",spectrum:[71,100,100,43,43,71,71,43,43,43,43,43,43,57,29,57,43,57,43,43,57,43,43,43,43,43,43,43,43,43]}},{name:"melodic drum",midiProgram:117,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"twang 1",spectrum:[100,71,71,57,57,43,43,71,43,43,43,57,43,43,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29]}},{name:"drum synth",midiProgram:118,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"decay 1",spectrum:[100,86,71,57,43,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29]}},{name:"tom-tom",midiProgram:116,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",spectrum:[100,29,14,0,0,86,14,43,29,86,29,14,29,57,43,43,43,43,57,43,43,43,29,57,43,43,43,43,43,43]}},{name:"metal pipe",midiProgram:117,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 2",spectrum:[29,43,86,43,43,43,43,43,100,29,14,14,100,14,14,0,0,0,0,0,14,29,29,14,0,0,14,29,0,0]}},{name:"synth kick",midiProgram:47,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-6,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"8×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorFrequency",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"twang 2"}]}}])},{name:"Novelty Presets",presets:u([{name:"guitar fret noise",midiProgram:120,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"high-pass",cutoffHz:1e3,linearGain:.1768}],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",spectrum:[0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,29,14,0,0,43,0,43,0,71,43,0,57,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"},{target:"noteVolume",envelope:"twang 2"}]}},{name:"fifth saw lead",midiProgram:86,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1.4142}],chorus:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"fifth swell",midiProgram:86,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2e3,linearGain:2}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"}]}},{name:"soundtrack",midiProgram:97,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],chorus:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"reverse cymbal",midiProgram:119,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"none",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[29,57,57,29,57,57,29,29,43,29,29,43,29,29,57,57,14,57,14,57,71,71,57,86,57,100,86,86,86,86]}},{name:"seashore",midiProgram:122,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",transition:"soft fade",effects:"reverb",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"swell 3",spectrum:[14,14,29,29,43,43,43,57,57,57,57,57,57,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,57]}},{name:"bird tweet",midiProgram:123,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["chord type","vibrato","reverb"],chord:"strum",vibrato:"heavy",reverb:67,fadeInSeconds:.0575,fadeOutTicks:-6,harmonics:[0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"hum",envelopes:[{target:"noteVolume",envelope:"decay 1"}]}},{name:"telephone ring",midiProgram:124,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"arpeggio",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:12},{frequency:"1×",amplitude:4},{frequency:"20×",amplitude:1},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"tremolo4"},{target:"operatorAmplitude",envelope:"tremolo1",index:1}]}},{name:"helicopter",midiProgram:125,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"seamless",chord:"arpeggio",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"tremolo4",spectrum:[14,43,43,57,57,57,71,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,71,71,71,57,57]}},{name:"applause",midiProgram:126,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[14,14,29,29,29,43,43,57,71,71,86,86,86,71,71,57,57,57,71,86,86,86,86,86,71,71,57,57,57,57]}},{name:"gunshot",midiProgram:127,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1414,filterResonance:29,filterEnvelope:"twang 1",spectrum:[14,29,43,43,57,57,57,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,57,57,57,57,43]}},{name:"scoot",midiProgram:92,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:707.11,linearGain:4}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",wave:"double saw",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"}]}},{name:"buzz saw",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:4,operators:[{frequency:"5×",amplitude:13},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:6},{frequency:"11×",amplitude:12}],envelopes:[]}},{name:"mosquito",midiProgram:93,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2}],effects:["vibrato"],vibrato:"shaky",transition:"normal",fadeInSeconds:.0575,fadeOutTicks:-6,chord:"simultaneous",pulseWidth:4.41942,envelopes:[{target:"pulseWidth",envelope:"tremolo6"}]}},{name:"breathing",midiProgram:126,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 2",spectrum:[14,14,14,29,29,29,29,29,43,29,29,43,43,43,29,29,71,43,86,86,57,100,86,86,86,86,71,86,71,57]}},{name:"klaxon synth",midiProgram:125,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"noise",effects:"reverb",transition:"slide",chord:"harmony",filterCutoffHz:2e3,filterResonance:86,filterEnvelope:"steady",wave:"buzz"}},{name:"theremin",midiProgram:40,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.7071}],effects:["vibrato","reverb"],vibrato:"heavy",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-6,chord:"simultaneous",harmonics:[100,71,57,43,29,29,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"none",envelopes:[]}},{name:"sonar ping",midiProgram:121,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",spectrum:[100,43,29,29,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}}])}]);class q{constructor(){this.t=1,this.i=[void 0],this.o=0,this.l=0,this.h=0}pushFront(t){this.h>=this.t&&this.u(),this.l=this.l-1&this.o,this.i[this.l]=t,this.h++}pushBack(t){this.h>=this.t&&this.u(),this.i[this.l+this.h&this.o]=t,this.h++}popFront(){if(this.h<=0)throw new Error("No elements left to pop.");const t=this.i[this.l];return this.i[this.l]=void 0,this.l=this.l+1&this.o,this.h--,t}popBack(){if(this.h<=0)throw new Error("No elements left to pop.");this.h--;const t=this.l+this.h&this.o,e=this.i[t];return this.i[t]=void 0,e}peakFront(){if(this.h<=0)throw new Error("No elements left to pop.");return this.i[this.l]}peakBack(){if(this.h<=0)throw new Error("No elements left to pop.");return this.i[this.l+this.h-1&this.o]}count(){return this.h}set(t,e){if(t<0||t>=this.h)throw new Error("Invalid index");this.i[this.l+t&this.o]=e}get(t){if(t<0||t>=this.h)throw new Error("Invalid index");return this.i[this.l+t&this.o]}remove(t){if(t<0||t>=this.h)throw new Error("Invalid index");if(t<=this.h>>1){for(;t>0;)this.set(t,this.get(t-1)),t--;this.popFront()}else{for(t++;t<this.h;)this.set(t-1,this.get(t)),t++;this.popBack()}}u(){if(this.t>=1073741824)throw new Error("Capacity too big.");this.t=this.t<<1;const t=this.i,e=new Array(this.t),n=0|this.h,i=0|this.l;for(let s=0;s<n;s++)e[s]=t[i+s&this.o];for(let t=n;t<this.t;t++)e[t]=void 0;this.l=0,this.i=e,this.o=this.t-1}}const x=new class{constructor(){this.activeEvents=[],this.listeners={},this.activeEvents=[],this.listeners={}}raise(t,e,n){if(null!=this.listeners[t]){this.activeEvents.push(t);for(let i=0;i<this.listeners[t].length;i++)this.listeners[t][i](e,n);this.activeEvents.pop()}}listen(t,e){null==this.listeners[t]&&(this.listeners[t]=[]),this.listeners[t].push(e)}unlisten(t,e){if(null==this.listeners[t])return;const n=this.listeners[t].indexOf(e);-1!=n&&this.listeners[t].splice(n,1)}unlistenAll(t){null!=this.listeners[t]&&(this.listeners[t]=[])}};class D{constructor(){this.a=[1],this.b=[1],this.order=0}linearGain0thOrder(t){this.b[0]=t,this.order=0}lowPass1stOrderButterworth(t){const e=1/Math.tan(.5*t),n=1+e;this.a[1]=(1-e)/n,this.b[1]=this.b[0]=1/n,this.order=1}lowPass1stOrderSimplified(t){const e=2*Math.sin(.5*t);this.a[1]=e-1,this.b[0]=e,this.b[1]=0,this.order=1}highPass1stOrderButterworth(t){const e=1/Math.tan(.5*t),n=1+e;this.a[1]=(1-e)/n,this.b[0]=e/n,this.b[1]=-e/n,this.order=1}highShelf1stOrder(t,e){const n=Math.tan(.5*t),i=Math.sqrt(e),s=(n*i-1)/(n*i+1);this.a[1]=s/1,this.b[0]=(1+s+e*(1-s))/2,this.b[1]=(1+s-e*(1-s))/2,this.order=1}allPass1stOrderInvertPhaseAbove(t){const e=(Math.sin(t)-1)/Math.cos(t);this.a[1]=e,this.b[0]=e,this.b[1]=1,this.order=1}allPass1stOrderFractionalDelay(t){const e=(1-t)/(1+t);this.a[1]=e,this.b[0]=e,this.b[1]=1,this.order=1}lowPass2ndOrderButterworth(t,e){const n=Math.sin(t)/(2*e),i=Math.cos(t),s=1+n;this.a[1]=-2*i/s,this.a[2]=(1-n)/s,this.b[2]=this.b[0]=(1-i)/(2*s),this.b[1]=(1-i)/s,this.order=2}lowPass2ndOrderSimplified(t,e){const n=2*Math.sin(t/2),i=1-1/(2*e),s=i+i/(1-n);this.a[1]=2*n+(n-1)*n*s-2,this.a[2]=(n-1)*(n-n*s-1),this.b[0]=n*n,this.b[1]=0,this.b[2]=0,this.order=2}highPass2ndOrderButterworth(t,e){const n=Math.sin(t)/(2*e),i=Math.cos(t),s=1+n;this.a[1]=-2*i/s,this.a[2]=(1-n)/s,this.b[2]=this.b[0]=(1+i)/(2*s),this.b[1]=-(1+i)/s,this.order=2}peak2ndOrder(t,e,n){const i=Math.sqrt(e),s=n*t/(i>=1?i:1/i),a=Math.tan(.5*s),r=1+a/i;this.b[0]=(1+a*i)/r,this.b[1]=this.a[1]=-2*Math.cos(t)/r,this.b[2]=(1-a*i)/r,this.a[2]=(1-a/i)/r,this.order=2}}class O{constructor(){this.real=0,this.imag=0,this.denom=1}analyze(t,e){this.analyzeComplex(t,Math.cos(e),Math.sin(e))}analyzeComplex(t,e,n){const i=t.a,s=t.b,a=e,r=-n;let o=s[0]+s[1]*a,l=s[1]*r,h=1+i[1]*a,c=i[1]*r,u=a,f=r;for(let e=2;e<=t.order;e++){const t=u*r+f*a;u=u*a-f*r,f=t,o+=s[e]*u,l+=s[e]*f,h+=i[e]*u,c+=i[e]*f}this.denom=h*h+c*c,this.real=o*h+l*c,this.imag=l*h-o*c}magnitude(){return Math.sqrt(this.real*this.real+this.imag*this.imag)/this.denom}angle(){return Math.atan2(this.imag,this.real)}}class R{constructor(){this.a1=0,this.a2=0,this.b0=1,this.b1=0,this.b2=0,this.a1Delta=0,this.a2Delta=0,this.b0Delta=0,this.b1Delta=0,this.b2Delta=0,this.output1=0,this.output2=0,this.useMultiplicativeInputCoefficients=!1}resetOutput(){this.output1=0,this.output2=0}loadCoefficientsWithGradient(t,e,n,i){if(2!=t.order||2!=e.order)throw new Error;this.a1=t.a[1],this.a2=t.a[2],this.b0=t.b[0],this.b1=t.b[1],this.b2=t.b[2],this.a1Delta=(e.a[1]-t.a[1])*n,this.a2Delta=(e.a[2]-t.a[2])*n,i?(this.b0Delta=Math.pow(e.b[0]/t.b[0],n),this.b1Delta=Math.pow(e.b[1]/t.b[1],n),this.b2Delta=Math.pow(e.b[2]/t.b[2],n)):(this.b0Delta=(e.b[0]-t.b[0])*n,this.b1Delta=(e.b[1]-t.b[1])*n,this.b2Delta=(e.b[2]-t.b[2])*n),this.useMultiplicativeInputCoefficients=i}}const E=1e-24,C=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95],A=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0];class L{constructor(t,e,n){this.p=[],this.m=0;for(let i=e;i<n;i++){const e=A[t.charCodeAt(i)];this.p.push(e>>5&1),this.p.push(e>>4&1),this.p.push(e>>3&1),this.p.push(e>>2&1),this.p.push(e>>1&1),this.p.push(1&e)}}read(t){let e=0;for(;t>0;)e<<=1,e+=this.p[this.m++],t--;return e}readLongTail(t,e){let n=t,i=e;for(;this.p[this.m++];)n+=1<<i,i++;for(;i>0;)i--,this.p[this.m++]&&(n+=1<<i);return n}readPartDuration(){return this.readLongTail(1,3)}readLegacyPartDuration(){return this.readLongTail(1,2)}readPinCount(){return this.readLongTail(1,0)}readPitchInterval(){return this.read(1)?-this.readLongTail(1,3):this.readLongTail(1,3)}}class z{constructor(){this.g=0,this.p=[]}clear(){this.g=0}write(t,e){for(t--;t>=0;)this.p[this.g++]=e>>>t&1,t--}writeLongTail(t,e,n){if(n<t)throw new Error("value out of bounds");n-=t;let i=e;for(;n>=1<<i;)this.p[this.g++]=1,n-=1<<i,i++;for(this.p[this.g++]=0;i>0;)i--,this.p[this.g++]=n>>>i&1}writePartDuration(t){this.writeLongTail(1,3,t)}writePinCount(t){this.writeLongTail(1,0,t)}writePitchInterval(t){t<0?(this.write(1,1),this.writeLongTail(1,3,-t)):(this.write(1,0),this.writeLongTail(1,3,t))}concat(t){for(let e=0;e<t.g;e++)this.p[this.g++]=t.p[e]}encodeBase64(t){for(let e=0;e<this.g;e+=6){const n=this.p[e]<<5|this.p[e+1]<<4|this.p[e+2]<<3|this.p[e+3]<<2|this.p[e+4]<<1|this.p[e+5];t.push(C[n])}return t}lengthBase64(){return Math.ceil(this.g/6)}}function H(t,e,n){return{interval:t,time:e,size:n}}function N(t,e,n){return n<=(e-=1)?n>=t?n:t:e}function G(t,e,n){if(t<=n&&n<=e)return n;throw new Error(`Value ${n} not in range [${t}, ${e}]`)}class V{constructor(t,e,n,i,s=!1){this.pitches=[t],this.pins=[H(0,0,i),H(0,n-e,s?0:i)],this.start=e,this.end=n,this.continuesLastPattern=!1}pickMainInterval(){let t=0,e=0;for(let n=1;n<this.pins.length;n++){const i=this.pins[n-1],s=this.pins[n];if(i.interval==s.interval){const n=s.time-i.time;t<n&&(t=n,e=i.interval)}}if(0==t){let t=0;for(let n=0;n<this.pins.length;n++){const i=this.pins[n];t<i.size&&(t=i.size,e=i.interval)}}return e}clone(){const t=new V(-1,this.start,this.end,3);t.pitches=this.pitches.concat(),t.pins=[];for(const e of this.pins)t.pins.push(H(e.interval,e.time,e.size));return t.continuesLastPattern=this.continuesLastPattern,t}getEndPinIndex(t){let e;for(e=1;e<this.pins.length-1&&!(this.pins[e].time+this.start>t);e++);return e}}class B{constructor(){this.notes=[],this.instruments=[0]}cloneNotes(){const t=[];for(const e of this.notes)t.push(e.clone());return t}reset(){this.notes.length=0,this.instruments[0]=0,this.instruments.length=1}}class ${constructor(t){this.frequency=4,this.amplitude=0,this.waveform=0,this.pulseWidth=.5,this.reset(t)}reset(t){this.frequency=4,this.amplitude=t<=1?n.operatorAmplitudeMax:0,this.waveform=0,this.pulseWidth=5}copy(t){this.frequency=t.frequency,this.amplitude=t.amplitude,this.waveform=t.waveform,this.pulseWidth=t.pulseWidth}}class W{constructor(){this.name="",this.carrierCount=0,this.modulatedBy=[[],[],[],[],[],[]],this.associatedCarrier=[],this.fromPreset(1)}set(t,e){this.reset(),this.carrierCount=t;for(let n=0;n<this.modulatedBy.length;n++){this.modulatedBy[n]=e[n],n<t&&(this.associatedCarrier[n]=n+1),this.name+=n+1;for(let i=0;i<e[n].length;i++)this.name+=e[n][i],e[n][i]>t-1&&(this.associatedCarrier[e[n][i]-1]=n+1),this.name+=",";this.name+=n<t?"|":"."}}reset(){this.name="",this.carrierCount=1,this.modulatedBy=[[2,3,4,5,6],[],[],[],[],[]],this.associatedCarrier=[1,1,1,1,1,1]}copy(t){this.name=t.name,this.carrierCount=t.carrierCount,this.modulatedBy=t.modulatedBy,this.associatedCarrier=t.associatedCarrier}fromPreset(t){this.reset();let e=n.algorithms6Op[t];this.name=e.name,this.carrierCount=e.carrierCount;for(var i=0;i<e.modulatedBy.length;i++)this.modulatedBy[i]=Array.from(e.modulatedBy[i]),this.associatedCarrier[i]=e.associatedCarrier[i]}}class j{constructor(){this.name="",this.indices=[[],[],[],[],[],[]],this.fromPreset(1)}set(t){this.reset();for(let e=0;e<this.indices.length;e++){this.indices[e]=t[e];for(let n=0;n<t[e].length;n++)this.name+=t[e][n],this.name+=",";this.name+="."}}reset(){this.reset,this.name="",this.indices=[[1],[],[],[],[],[]]}copy(t){this.name=t.name,this.indices=t.indices}fromPreset(t){this.reset();let e=n.feedbacks6Op[t];for(var i=0;i<e.indices.length;i++){this.indices[i]=Array.from(e.indices[i]);for(let t=0;t<e.indices[i].length;t++)this.name+=e.indices[i][t],this.name+=",";this.name+="."}}}class U{constructor(t){this.spectrum=[],this.v=null,this.M=!1,this.reset(t)}reset(t){for(let e=0;e<n.spectrumControlPoints;e++)if(t)this.spectrum[e]=Math.round(n.spectrumMax*(1/Math.sqrt(1+e/3)));else{const t=0==e||7==e||11==e||14==e||16==e||18==e||21==e||23==e||e>=25;this.spectrum[e]=t?Math.max(0,Math.round(n.spectrumMax*(1-e/30))):0}this.M=!1}markCustomWaveDirty(){this.M=!1}getCustomWave(t){if(this.M)return this.v;const e=n.spectrumNoiseLength;null!=this.v&&this.v.length==e+1||(this.v=new Float32Array(e+1));const i=this.v;for(let t=0;t<e;t++)i[t]=0;const s=[0,1/7,Math.log2(5/4),3/7,Math.log2(1.5),5/7,6/7];function a(e){return t+Math.floor(e/n.spectrumControlPointsPerOctave)+s[(e+n.spectrumControlPointsPerOctave)%n.spectrumControlPointsPerOctave]}let r=1;for(let t=0;t<n.spectrumControlPoints+1;t++){const s=t<=0?0:this.spectrum[t-1],l=t>=n.spectrumControlPoints?this.spectrum[n.spectrumControlPoints-1]:this.spectrum[t],h=a(t-1);let c=a(t);t>=n.spectrumControlPoints&&(c=14+.25*(c-14)),0==s&&0==l||(r+=.02*o(i,e,h,c,s/n.spectrumMax,l/n.spectrumMax,-.5))}return this.spectrum[n.spectrumControlPoints-1]>0&&(r+=.02*o(i,e,14+.25*(a(n.spectrumControlPoints)-14),14,this.spectrum[n.spectrumControlPoints-1]/n.spectrumMax,0,-.5)),T(i,e),F(i,5/(Math.sqrt(e)*Math.pow(r,.75))),i[e]=i[0],this.M=!0,i}}class K{constructor(){this.harmonics=[],this.v=null,this.M=!1,this.reset()}reset(){for(let t=0;t<n.harmonicsControlPoints;t++)this.harmonics[t]=0;this.harmonics[0]=n.harmonicsMax,this.harmonics[3]=n.harmonicsMax,this.harmonics[6]=n.harmonicsMax,this.M=!1}markCustomWaveDirty(){this.M=!1}getCustomWave(t){this.S!=t&&(this.S=t,this.M=!1);const e=7==t?n.harmonicsRenderedForPickedString:n.harmonicsRendered;if(this.M)return this.v;const i=n.harmonicsWavelength,s=r(0,null,null);null!=this.v&&this.v.length==i+1||(this.v=new Float32Array(i+1));const a=this.v;for(let t=0;t<i;t++)a[t]=0;let o=1;for(let t=0;t<e;t++){const r=t+1;let l=t<n.harmonicsControlPoints?this.harmonics[t]:this.harmonics[n.harmonicsControlPoints-1];t>=n.harmonicsControlPoints&&(l*=1-(t-n.harmonicsControlPoints)/(e-n.harmonicsControlPoints));const h=l/n.harmonicsMax;let c=Math.pow(2,l-n.harmonicsMax+1)*Math.sqrt(h);t<n.harmonicsControlPoints&&(o+=c),c*=Math.pow(r,-.25),c*=s[t+589],a[i-r]=c}T(a,i);const l=1/Math.pow(o,.7);for(let t=0;t<a.length;t++)a[t]*=l;return function(t){let e=0;for(let n=0;n<t.length;n++){const i=t[n];t[n]=e,e+=i}}(a),a[i]=a[0],this.M=!0,a}}class J{constructor(){this.freq=0,this.gain=n.filterGainCenter,this.type=2}set(t,e){this.freq=t,this.gain=e}getHz(){return J.getHzFromSettingValue(this.freq)}static getHzFromSettingValue(t){return n.filterFreqReferenceHz*Math.pow(2,(t-n.filterFreqReferenceSetting)*n.filterFreqStep)}static getSettingValueFromHz(t){return Math.log2(t/n.filterFreqReferenceHz)/n.filterFreqStep+n.filterFreqReferenceSetting}static getRoundedSettingValueFromHz(t){return Math.max(0,Math.min(n.filterFreqRange-1,Math.round(J.getSettingValueFromHz(t))))}getLinearGain(t=1){const e=(this.gain-n.filterGainCenter)*n.filterGainStep,i=2==this.type?0:-.5,s=i+(e-i)*t;return Math.pow(2,s)}static getRoundedSettingValueFromLinearGain(t){return Math.max(0,Math.min(n.filterGainRange-1,Math.round(Math.log2(t)/n.filterGainStep+n.filterGainCenter)))}toCoefficients(t,e,i=1,s=1){const a=2*Math.PI*Math.max(n.filterFreqMinHz,Math.min(n.filterFreqMaxHz,i*this.getHz()))/e,r=this.getLinearGain(s);switch(this.type){case 0:t.lowPass2ndOrderButterworth(a,r);break;case 1:t.highPass2ndOrderButterworth(a,r);break;case 2:t.peak2ndOrder(a,r,1);break;default:throw new Error}}getVolumeCompensationMult(){const t=(this.freq-n.filterFreqReferenceSetting)*n.filterFreqStep,e=(this.gain-n.filterGainCenter)*n.filterGainStep;switch(this.type){case 0:const i=Math.pow(2,t)*n.filterFreqReferenceHz/8e3,s=(Math.sqrt(1+4*i)-1)/2,a=Math.log2(s);return Math.pow(.5,.2*Math.max(0,e+1)+Math.min(0,Math.max(-3,.595*a+.35*Math.min(0,e+1))));case 1:return Math.pow(.5,.125*Math.max(0,e+1)+Math.min(0,.3*(-t-Math.log2(n.filterFreqReferenceHz/125))+.2*Math.min(0,e+1)));case 2:const r=t+Math.log2(n.filterFreqReferenceHz/2e3),o=Math.pow(1/(1+Math.pow(r/3,2)),2);return Math.pow(.5,.125*Math.max(0,e)+.1*o*Math.min(0,e));default:throw new Error}}}class Q{constructor(){this.controlPoints=[],this.controlPointCount=0,this.reset()}reset(){this.controlPointCount=0}addPoint(t,e,n){let i;this.controlPoints.length<=this.controlPointCount?(i=new J,this.controlPoints[this.controlPointCount]=i):i=this.controlPoints[this.controlPointCount],this.controlPointCount++,i.type=t,i.set(e,n)}toJsonObject(){const t=[];for(let e=0;e<this.controlPointCount;e++){const i=this.controlPoints[e];t.push({type:n.filterTypeNames[i.type],cutoffHz:Math.round(100*i.getHz())/100,linearGain:Math.round(1e4*i.getLinearGain())/1e4})}return t}fromJsonObject(t){if(this.controlPoints.length=0,t)for(const e of t){const t=new J;t.type=n.filterTypeNames.indexOf(e.type),-1==t.type&&(t.type=2),null!=e.cutoffHz?t.freq=J.getRoundedSettingValueFromHz(e.cutoffHz):t.freq=0,null!=e.linearGain?t.gain=J.getRoundedSettingValueFromLinearGain(e.linearGain):t.gain=n.filterGainCenter,this.controlPoints.push(t)}this.controlPointCount=this.controlPoints.length}static filtersCanMorph(t,e){if(t.controlPointCount!=e.controlPointCount)return!1;for(let n=0;n<t.controlPointCount;n++)if(t.controlPoints[n].type!=e.controlPoints[n].type)return!1;return!0}static lerpFilters(t,e,n){let i=new Q;if(null==t)return t;if(null==e)return e;if(n=Math.max(0,Math.min(1,n)),this.filtersCanMorph(t,e)){for(let s=0;s<t.controlPointCount;s++)i.controlPoints[s]=new J,i.controlPoints[s].type=t.controlPoints[s].type,i.controlPoints[s].freq=t.controlPoints[s].freq+(e.controlPoints[s].freq-t.controlPoints[s].freq)*n,i.controlPoints[s].gain=t.controlPoints[s].gain+(e.controlPoints[s].gain-t.controlPoints[s].gain)*n;return i.controlPointCount=t.controlPointCount,i}return n>=1?e:t}convertLegacySettings(t,e,n){this.reset();const i=2*Math.asin(.475),s=e>1,a=0==e,r=10==t,o=3==n.type||4==n.type||8==n.type||0==n.type,l=48e3,h=8e3*Math.pow(2,.5*(t-10)),c=Math.min(i,2*Math.PI*h/l);if(1==n.type&&!s&&r);else if(a){const t=3.5,e=c*Math.pow(2,t),n=l*(e/(1+e/Math.PI))/(2*Math.PI),i=J.getRoundedSettingValueFromHz(n),s=J.getHzFromSettingValue(i),a=2*Math.PI*s/l,r=new D;r.lowPass1stOrderSimplified(c);const h=new O;h.analyze(r,a);const u=h.magnitude();let f=Math.log2(u);f=.82*(f+t)-t,o&&(f=Math.min(f,-1));const p=Math.pow(2,f),d=J.getRoundedSettingValueFromLinearGain(p);this.addPoint(0,i,d)}else{const t=.5/(1-.95*Math.sqrt(Math.max(0,e-1)/6)),n=.5/t,i=c+(c*(c/(2*Math.PI*8e3/l)*Math.pow(n,.9)+1)-c)*n;let a;a=o?l*Math.min(i,c*Math.pow(2,.25))/(2*Math.PI):l*i/(2*Math.PI);const r=J.getRoundedSettingValueFromHz(a);let h;if(o)h=t;else{const e=new D;e.lowPass2ndOrderSimplified(c,t);const n=new O;n.analyze(e,i),h=n.magnitude()}s||(h=Math.min(h,Math.sqrt(.5)));const u=J.getRoundedSettingValueFromLinearGain(h);this.addPoint(0,r,u)}this.controlPoints.length=this.controlPointCount}convertLegacySettingsForSynth(t,e,n=!1){this.reset();const i=2*Math.asin(.475),s=0==e&&n,a=48e3,r=8e3*Math.pow(2,.5*(t-10)),o=Math.min(i,2*Math.PI*r/a);if(s){const t=3.5,e=o*Math.pow(2,t),n=a*(e/(1+e/Math.PI))/(2*Math.PI),i=J.getRoundedSettingValueFromHz(n),s=J.getHzFromSettingValue(i),r=2*Math.PI*s/a,l=new D;l.lowPass1stOrderSimplified(o);const h=new O;h.analyze(l,r);const c=h.magnitude();let u=Math.log2(c);u=.82*(u+t)-t;const f=Math.pow(2,u),p=J.getRoundedSettingValueFromLinearGain(f);this.addPoint(0,i,p)}else{const t=.5/(1-.95*Math.sqrt(Math.max(0,e-1)/6)),n=.5/t,i=o+(o*(o/(2*Math.PI*8e3/a)*Math.pow(n,.9)+1)-o)*n;let s;s=a*i/(2*Math.PI);const r=J.getSettingValueFromHz(s);let l;const h=new D;h.lowPass2ndOrderSimplified(o,t);const c=new O;c.analyze(h,i),l=c.magnitude();const u=J.getRoundedSettingValueFromLinearGain(l);this.addPoint(0,r,u)}}}class _{constructor(){this.target=0,this.index=0,this.envelope=0,this.reset()}reset(){this.target=0,this.index=0,this.envelope=0}toJsonObject(){const t={target:n.instrumentAutomationTargets[this.target].name,envelope:n.envelopes[this.envelope].name};return n.instrumentAutomationTargets[this.target].maxCount>1&&(t.index=this.index),t}fromJsonObject(t){this.reset();let e=n.instrumentAutomationTargets.dictionary[t.target];null==e&&(e=n.instrumentAutomationTargets.dictionary.noteVolume),this.target=e.index;let i=n.envelopes.dictionary[t.envelope];null==i&&(i=n.envelopes.dictionary.none),this.envelope=i.index,null!=t.index?this.index=N(0,n.instrumentAutomationTargets[this.target].maxCount,0|t.index):this.index=0}}class Z{constructor(t,e){if(this.type=0,this.preset=0,this.chipWave=2,this.chipNoise=1,this.eqFilter=new Q,this.eqFilterType=!1,this.eqFilterSimpleCut=n.filterSimpleCutRange-1,this.eqFilterSimplePeak=0,this.noteFilter=new Q,this.noteFilterType=!1,this.noteFilterSimpleCut=n.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.eqSubFilters=[],this.noteSubFilters=[],this.envelopes=[],this.fadeIn=0,this.fadeOut=n.fadeOutNeutral,this.envelopeCount=0,this.transition=n.transitions.dictionary.normal.index,this.pitchShift=0,this.detune=0,this.vibrato=0,this.interval=0,this.vibratoDepth=0,this.vibratoSpeed=10,this.vibratoDelay=0,this.vibratoType=0,this.unison=0,this.effects=0,this.chord=1,this.volume=0,this.pan=n.panCenter,this.panDelay=10,this.arpeggioSpeed=12,this.fastTwoNoteArp=!1,this.legacyTieOver=!1,this.clicklessTransition=!1,this.aliases=!1,this.pulseWidth=n.pulseWidthRange,this.stringSustain=10,this.distortion=0,this.bitcrusherFreq=0,this.bitcrusherQuantization=0,this.chorus=0,this.reverb=0,this.echoSustain=0,this.echoDelay=0,this.algorithm=0,this.feedbackType=0,this.algorithm6Op=1,this.feedbackType6Op=1,this.customAlgorithm=new W,this.customFeedbackType=new j,this.feedbackAmplitude=0,this.LFOtime=0,this.nextLFOtime=0,this.arpTime=0,this.customChipWave=new Float64Array(64),this.customChipWaveIntegral=new Float64Array(65),this.operators=[],this.harmonicsWave=new K,this.drumsetEnvelopes=[],this.drumsetSpectrumWaves=[],this.modChannels=[],this.modInstruments=[],this.modulators=[],this.modFilterTypes=[],this.invalidModulators=[],e)for(let t=0;t<n.modCount;t++)this.modChannels.push(0),this.modInstruments.push(0),this.modulators.push(n.modulators.dictionary.none.index);this.spectrumWave=new U(t);for(let t=0;t<n.operatorCount+2;t++)this.operators[t]=new $(t);for(let t=0;t<n.drumCount;t++)this.drumsetEnvelopes[t]=n.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[t]=new U(!0);for(let t=0;t<64;t++)this.customChipWave[t]=24-Math.floor(.75*t);let i=0;for(let t=0;t<this.customChipWave.length;t++)i+=this.customChipWave[t];const s=i/this.customChipWave.length;let a=0,r=0;for(let t=0;t<this.customChipWave.length;t++)a+=r,r=this.customChipWave[t]-s,this.customChipWaveIntegral[t]=a;this.customChipWaveIntegral[64]=0}setTypeAndReset(t,e,i){i&&(t=9),this.type=t,this.preset=t,this.volume=0,this.effects=4,this.chorus=n.chorusRange-1,this.reverb=0,this.echoSustain=Math.floor(.5*(n.echoSustainRange-1)),this.echoDelay=Math.floor(.5*(n.echoDelayRange-1)),this.eqFilter.reset(),this.eqFilterType=!1,this.eqFilterSimpleCut=n.filterSimpleCutRange-1,this.eqFilterSimplePeak=0;for(let t=0;t<n.filterMorphCount;t++)this.eqSubFilters[t]=null,this.noteSubFilters[t]=null;switch(this.noteFilter.reset(),this.noteFilterType=!1,this.noteFilterSimpleCut=n.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.distortion=Math.floor(.75*(n.distortionRange-1)),this.bitcrusherFreq=Math.floor(.5*(n.bitcrusherFreqRange-1)),this.bitcrusherQuantization=Math.floor(.5*(n.bitcrusherQuantizationRange-1)),this.pan=n.panCenter,this.panDelay=10,this.pitchShift=n.pitchShiftCenter,this.detune=n.detuneCenter,this.vibrato=0,this.unison=0,this.stringSustain=10,this.clicklessTransition=!1,this.arpeggioSpeed=12,this.legacyTieOver=!1,this.aliases=!1,this.fadeIn=0,this.fadeOut=n.fadeOutNeutral,this.transition=n.transitions.dictionary.normal.index,this.envelopeCount=0,t){case 0:this.chipWave=2,this.chord=n.chords.dictionary.arpeggio.index;break;case 8:this.chipWave=2,this.chord=n.chords.dictionary.arpeggio.index;for(let t=0;t<64;t++)this.customChipWave[t]=24-Math.floor(.75*t);let i=0;for(let t=0;t<this.customChipWave.length;t++)i+=this.customChipWave[t];const s=i/this.customChipWave.length;let a=0,r=0;for(let t=0;t<this.customChipWave.length;t++)a+=r,r=this.customChipWave[t]-s,this.customChipWaveIntegral[t]=a;this.customChipWaveIntegral[64]=0;break;case 1:this.chord=n.chords.dictionary["custom interval"].index,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0;for(let t=0;t<this.operators.length;t++)this.operators[t].reset(t);break;case 10:this.transition=1,this.vibrato=0,this.effects=1,this.chord=3,this.algorithm=0,this.feedbackType=0,this.algorithm6Op=1,this.feedbackType6Op=1,this.customAlgorithm.fromPreset(1),this.feedbackAmplitude=0;for(let t=0;t<this.operators.length;t++)this.operators[t].reset(t);break;case 2:this.chipNoise=1,this.chord=n.chords.dictionary.arpeggio.index;break;case 3:this.chord=n.chords.dictionary.simultaneous.index,this.spectrumWave.reset(e);break;case 4:this.chord=n.chords.dictionary.simultaneous.index;for(let t=0;t<n.drumCount;t++)this.drumsetEnvelopes[t]=n.envelopes.dictionary["twang 2"].index,null==this.drumsetSpectrumWaves[t]&&(this.drumsetSpectrumWaves[t]=new U(!0)),this.drumsetSpectrumWaves[t].reset(e);break;case 5:this.chord=n.chords.dictionary.simultaneous.index,this.harmonicsWave.reset();break;case 6:this.chord=n.chords.dictionary.arpeggio.index,this.pulseWidth=n.pulseWidthRange;break;case 7:this.chord=n.chords.dictionary.strum.index,this.harmonicsWave.reset();break;case 9:this.transition=0,this.vibrato=0,this.interval=0,this.effects=0,this.chord=0,this.modChannels=[],this.modInstruments=[],this.modulators=[];for(let t=0;t<n.modCount;t++)this.modChannels.push(-2),this.modInstruments.push(0),this.modulators.push(n.modulators.dictionary.none.index),this.invalidModulators[t]=!1,this.modFilterTypes[t]=0;break;default:throw new Error("Unrecognized instrument type: "+t)}this.chord!=n.chords.dictionary.simultaneous.index&&(this.effects=2048|this.effects)}convertLegacySettings(t,e){let i=t.filterCutoff,s=t.filterResonance,a=t.filterEnvelope,r=t.pulseEnvelope,o=t.operatorEnvelopes,l=t.feedbackEnvelope;null==i&&(i=0==this.type?6:10),null==s&&(s=0),null==a&&(a=n.envelopes.dictionary.none),null==r&&(r=n.envelopes.dictionary[6==this.type?"twang 2":"none"]),null==o&&(o=[n.envelopes.dictionary[1==this.type?"note size":"none"],n.envelopes.dictionary.none,n.envelopes.dictionary.none,n.envelopes.dictionary.none]),null==l&&(l=n.envelopes.dictionary.none);const h=n.algorithms[this.algorithm].carrierCount;let c=!0,u=!0,f=0==a.type||0==r.type;if(1==this.type){f=f||0==l.type;for(let t=0;t<o.length;t++)t<h?0!=o[t].type?u=!1:c=!1:f=f||0==o[t].type}this.envelopeCount=0,1==this.type&&(u&&f?this.addEnvelope(n.instrumentAutomationTargets.dictionary.noteVolume.index,0,n.envelopes.dictionary["note size"].index):c&&!f&&this.addEnvelope(n.instrumentAutomationTargets.dictionary.none.index,0,n.envelopes.dictionary["note size"].index)),1==a.type?(this.noteFilter.reset(),this.noteFilterType=!1,this.eqFilter.convertLegacySettings(i,s,a),this.effects&=-33,(e||this.eqFilterType)&&(this.eqFilterType=!0,this.eqFilterSimpleCut=i,this.eqFilterSimplePeak=s)):(this.eqFilter.reset(),this.eqFilterType=!1,this.noteFilterType=!1,this.noteFilter.convertLegacySettings(i,s,a),this.effects|=32,this.addEnvelope(n.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index,0,a.index),(e||this.noteFilterType)&&(this.noteFilterType=!0,this.noteFilterSimpleCut=i,this.noteFilterSimplePeak=s)),1!=r.type&&this.addEnvelope(n.instrumentAutomationTargets.dictionary.pulseWidth.index,0,r.index);for(let t=0;t<o.length;t++)t<h&&u||1!=o[t].type&&this.addEnvelope(n.instrumentAutomationTargets.dictionary.operatorAmplitude.index,t,o[t].index);1!=l.type&&this.addEnvelope(n.instrumentAutomationTargets.dictionary.feedbackAmplitude.index,0,l.index)}toJsonObject(){const t={type:n.instrumentTypeNames[this.type],volume:this.volume,eqFilter:this.eqFilter.toJsonObject(),eqFilterType:this.eqFilterType,eqSimpleCut:this.eqFilterSimpleCut,eqSimplePeak:this.eqFilterSimplePeak};this.preset!=this.type&&(t.preset=this.preset);for(let e=0;e<n.filterMorphCount;e++)null!=this.eqSubFilters[e]&&(t["eqSubFilters"+e]=this.eqSubFilters[e].toJsonObject());const e=[];for(const t of n.effectOrder)this.effects&1<<t&&e.push(n.effectNames[t]);if(t.effects=e,f(this.effects)&&(t.transition=n.transitions[this.transition].name,t.clicklessTransition=this.clicklessTransition),p(this.effects)&&(t.chord=this.getChord().name,t.fastTwoNoteArp=this.fastTwoNoteArp,t.arpeggioSpeed=this.arpeggioSpeed),d(this.effects)&&(t.pitchShiftSemitones=this.pitchShift),m(this.effects)&&(t.detuneCents=at.detuneToCents(this.detune)),y(this.effects)&&(-1==this.vibrato&&(this.vibrato=5),5!=this.vibrato?t.vibrato=n.vibratos[this.vibrato].name:t.vibrato="custom",t.vibratoDepth=this.vibratoDepth,t.vibratoDelay=this.vibratoDelay,t.vibratoSpeed=this.vibratoSpeed,t.vibratoType=this.vibratoType),g(this.effects)){t.noteFilterType=this.noteFilterType,t.noteSimpleCut=this.noteFilterSimpleCut,t.noteSimplePeak=this.noteFilterSimplePeak,t.noteFilter=this.noteFilter.toJsonObject();for(let e=0;e<n.filterMorphCount;e++)null!=this.noteSubFilters[e]&&(t["noteSubFilters"+e]=this.noteSubFilters[e].toJsonObject())}if(v(this.effects)&&(t.distortion=Math.round(100*this.distortion/(n.distortionRange-1)),t.aliases=this.aliases),b(this.effects)&&(t.bitcrusherOctave=(n.bitcrusherFreqRange-1-this.bitcrusherFreq)*n.bitcrusherOctaveStep,t.bitcrusherQuantization=Math.round(100*this.bitcrusherQuantization/(n.bitcrusherQuantizationRange-1))),M(this.effects)&&(t.pan=Math.round(100*(this.pan-n.panCenter)/n.panCenter),t.panDelay=this.panDelay),S(this.effects)&&(t.chorus=Math.round(100*this.chorus/(n.chorusRange-1))),w(this.effects)&&(t.echoSustain=Math.round(100*this.echoSustain/(n.echoSustainRange-1)),t.echoDelayBeats=Math.round(1e3*(this.echoDelay+1)*n.echoDelayStepTicks/(n.ticksPerPart*n.partsPerBeat))/1e3),k(this.effects)&&(t.reverb=Math.round(100*this.reverb/(n.reverbRange-1))),4!=this.type&&(t.fadeInSeconds=Math.round(1e4*at.fadeInSettingToSeconds(this.fadeIn))/1e4,t.fadeOutTicks=at.fadeOutSettingToTicks(this.fadeOut)),5==this.type||7==this.type){t.harmonics=[];for(let e=0;e<n.harmonicsControlPoints;e++)t.harmonics[e]=Math.round(100*this.harmonicsWave.harmonics[e]/n.harmonicsMax)}if(2==this.type)t.wave=n.chipNoises[this.chipNoise].name;else if(3==this.type){t.spectrum=[];for(let e=0;e<n.spectrumControlPoints;e++)t.spectrum[e]=Math.round(100*this.spectrumWave.spectrum[e]/n.spectrumMax)}else if(4==this.type){t.drums=[];for(let e=0;e<n.drumCount;e++){const i=[];for(let t=0;t<n.spectrumControlPoints;t++)i[t]=Math.round(100*this.drumsetSpectrumWaves[e].spectrum[t]/n.spectrumMax);t.drums[e]={filterEnvelope:this.getDrumsetEnvelope(e).name,spectrum:i}}}else if(0==this.type)t.wave=n.chipWaves[this.chipWave].name,t.unison=n.unisons[this.unison].name;else if(6==this.type)t.pulseWidth=this.pulseWidth;else if(7==this.type)t.unison=n.unisons[this.unison].name,t.stringSustain=Math.round(100*this.stringSustain/(n.stringSustainRange-1));else if(5==this.type)t.unison=n.unisons[this.unison].name;else if(1==this.type||10==this.type){const e=[];for(const t of this.operators)e.push({frequency:n.operatorFrequencies[t.frequency].name,amplitude:t.amplitude,waveform:n.operatorWaves[t.waveform].name,pulseWidth:t.pulseWidth});if(1==this.type)t.algorithm=n.algorithms[this.algorithm].name,t.feedbackType=n.feedbacks[this.feedbackType].name,t.feedbackAmplitude=this.feedbackAmplitude,t.operators=e;else{if(t.algorithm=n.algorithms6Op[this.algorithm6Op].name,t.feedbackType=n.feedbacks6Op[this.feedbackType6Op].name,t.feedbackAmplitude=this.feedbackAmplitude,0==this.algorithm6Op){const e={};e.mods=this.customAlgorithm.modulatedBy,e.carrierCount=this.customAlgorithm.carrierCount,t.customAlgorithm=e}if(0==this.feedbackType6Op){const e={};e.mods=this.customFeedbackType.indices,t.customFeedback=e}t.operators=e}}else if(8==this.type){t.wave=n.chipWaves[this.chipWave].name,t.unison=n.unisons[this.unison].name,t.customChipWave=new Float64Array(64),t.customChipWaveIntegral=new Float64Array(65);for(let e=0;e<this.customChipWave.length;e++)t.customChipWave[e]=this.customChipWave[e]}else{if(9!=this.type)throw new Error("Unrecognized instrument type");t.modChannels=[],t.modInstruments=[],t.modSettings=[],t.modStatuses=[];for(let e=0;e<n.modCount;e++)t.modChannels[e]=this.modChannels[e],t.modInstruments[e]=this.modInstruments[e],t.modSettings[e]=this.modulators[e]}const i=[];for(let t=0;t<this.envelopeCount;t++)i.push(this.envelopes[t].toJsonObject());return t.envelopes=i,t}fromJsonObject(t,e,i,s,a,r=0){null==t&&(t={});let o=n.instrumentTypeNames.indexOf(t.type);if(-1==o&&(o=i?9:e?2:0),this.setTypeAndReset(o,e,i),null!=t.preset&&(this.preset=t.preset>>>0),null!=t.volume?this.volume=N(-n.volumeRange/2,n.volumeRange/2+1,0|t.volume):this.volume=0,Array.isArray(t.effects)){let e=0;for(let i=0;i<t.effects.length;i++)e|=1<<n.effectNames.indexOf(t.effects[i]);this.effects=4095&e}else{const e=["none","reverb","chorus","chorus & reverb"];this.effects=e.indexOf(t.effects),-1==this.effects&&(this.effects=2==this.type?0:1)}this.transition=n.transitions.dictionary.normal.index;const l=t.transition||t.envelope;if(null!=l){let e=n.transitions.dictionary[l];if(null==t.fadeInSeconds||null==t.fadeOutTicks){const t={binary:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},seamless:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},sudden:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},hard:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},smooth:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},soft:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},slide:{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},"cross fade":{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},"hard fade":{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},"medium fade":{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},"soft fade":{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}}[l];null!=t&&(e=n.transitions.dictionary[t.transition],this.fadeIn=at.secondsToFadeInSetting(t.fadeInSeconds),this.fadeOut=at.ticksToFadeOutSetting(t.fadeOutTicks))}null!=e&&(this.transition=e.index),this.transition!=n.transitions.dictionary.normal.index&&(this.effects=1024|this.effects)}null!=t.fadeInSeconds&&(this.fadeIn=at.secondsToFadeInSetting(+t.fadeInSeconds)),null!=t.fadeOutTicks&&(this.fadeOut=at.ticksToFadeOutSetting(+t.fadeOutTicks));{const e=t.chord,i={harmony:"simultaneous"},s=n.chords.dictionary[i[e]]||n.chords.dictionary[e];null!=s?this.chord=s.index:2==this.type?this.chord=n.chords.dictionary.arpeggio.index:7==this.type?this.chord=n.chords.dictionary.strum.index:0==this.type?this.chord=n.chords.dictionary.arpeggio.index:1==this.type?this.chord=n.chords.dictionary["custom interval"].index:this.chord=n.chords.dictionary.simultaneous.index}this.unison=n.unisons.dictionary.none.index;const h=t.unison||t.interval||t.chorus;if(null!=h){const t={union:"none",fifths:"fifth",octaves:"octave"},e=n.unisons.dictionary[t[h]]||n.unisons.dictionary[h];null!=e&&(this.unison=e.index)}"custom harmony"==t.chorus&&(this.unison=n.unisons.dictionary.hum.index,this.chord=n.chords.dictionary["custom interval"].index),this.chord==n.chords.dictionary.simultaneous.index||Array.isArray(t.effects)||(this.effects=2048|this.effects),null!=t.pitchShiftSemitones&&(this.pitchShift=N(0,n.pitchShiftRange,Math.round(+t.pitchShiftSemitones))),null!=t.detuneCents&&(this.detune=N(n.detuneMin,n.detuneMax+1,Math.round(at.centsToDetune(+t.detuneCents)))),this.vibrato=n.vibratos.dictionary.none.index;const c=t.vibrato||t.effect;if(null!=c){const e={"vibrato light":"light","vibrato delayed":"delayed","vibrato heavy":"heavy"},i=n.vibratos.dictionary[e[h]]||n.vibratos.dictionary[c];null!=i?this.vibrato=i.index:"custom"==c&&(this.vibrato=n.vibratos.length),this.vibrato==n.vibratos.length?(this.vibratoDepth=t.vibratoDepth,this.vibratoSpeed=t.vibratoSpeed,this.vibratoDelay=t.vibratoDelay,this.vibratoType=t.vibratoType):(this.vibratoDepth=n.vibratos[this.vibrato].amplitude,this.vibratoDelay=n.vibratos[this.vibrato].delayTicks/2,this.vibratoSpeed=10,this.vibratoType=n.vibratos[this.vibrato].type),i!=n.vibratos.dictionary.none&&(this.effects=512|this.effects)}if(null!=t.pan?(this.pan=N(0,n.panMax+1,Math.round(n.panCenter+(0|t.pan)*n.panCenter/100)),this.pan!=n.panCenter&&(this.effects=4|this.effects)):(this.pan=n.panCenter,this.effects=4|this.effects),null!=t.panDelay?this.panDelay=0|t.panDelay:this.panDelay=10,null!=t.detune?this.detune=N(n.detuneMin,n.detuneMax+1,0|t.detune):null==t.detuneCents&&(this.detune=n.detuneCenter),null!=t.distortion&&(this.distortion=N(0,n.distortionRange,Math.round((n.distortionRange-1)*(0|t.distortion)/100))),null!=t.bitcrusherOctave&&(this.bitcrusherFreq=n.bitcrusherFreqRange-1-+t.bitcrusherOctave/n.bitcrusherOctaveStep),null!=t.bitcrusherQuantization&&(this.bitcrusherQuantization=N(0,n.bitcrusherQuantizationRange,Math.round((n.bitcrusherQuantizationRange-1)*(0|t.bitcrusherQuantization)/100))),null!=t.echoSustain&&(this.echoSustain=N(0,n.echoSustainRange,Math.round((n.echoSustainRange-1)*(0|t.echoSustain)/100))),null!=t.echoDelayBeats&&(this.echoDelay=N(0,n.echoDelayRange,Math.round(+t.echoDelayBeats*(n.ticksPerPart*n.partsPerBeat)/n.echoDelayStepTicks-1))),isNaN(t.chorus)||(this.chorus=N(0,n.chorusRange,Math.round((n.chorusRange-1)*(0|t.chorus)/100))),null!=t.reverb?this.reverb=N(0,n.reverbRange,Math.round((n.reverbRange-1)*(0|t.reverb)/100)):this.reverb=r,null!=t.pulseWidth?this.pulseWidth=N(1,n.pulseWidthRange+1,Math.round(t.pulseWidth)):this.pulseWidth=n.pulseWidthRange,null!=t.harmonics)for(let e=0;e<n.harmonicsControlPoints;e++)this.harmonicsWave.harmonics[e]=Math.max(0,Math.min(n.harmonicsMax,Math.round(n.harmonicsMax*+t.harmonics[e]/100)));else this.harmonicsWave.reset();if(null!=t.spectrum)for(let e=0;e<n.spectrumControlPoints;e++)this.spectrumWave.spectrum[e]=Math.max(0,Math.min(n.spectrumMax,Math.round(n.spectrumMax*+t.spectrum[e]/100)));else this.spectrumWave.reset(e);null!=t.stringSustain?this.stringSustain=N(0,n.stringSustainRange,Math.round((n.stringSustainRange-1)*(0|t.stringSustain)/100)):this.stringSustain=10,2==this.type&&(this.chipNoise=n.chipNoises.findIndex((e=>e.name==t.wave)),-1==this.chipNoise&&(this.chipNoise=1));const u={custom:"note size",steady:"none","pluck 1":"twang 1","pluck 2":"twang 2","pluck 3":"twang 3"},f=t=>null!=u[t]?n.envelopes.dictionary[u[t]]:n.envelopes.dictionary[t];if(4==this.type&&null!=t.drums)for(let e=0;e<n.drumCount;e++){const i=t.drums[e];if(null!=i){if(this.drumsetEnvelopes[e]=n.envelopes.dictionary["twang 2"].index,null!=i.filterEnvelope){const t=f(i.filterEnvelope);null!=t&&(this.drumsetEnvelopes[e]=t.index)}if(null!=i.spectrum)for(let t=0;t<n.spectrumControlPoints;t++)this.drumsetSpectrumWaves[e].spectrum[t]=Math.max(0,Math.min(n.spectrumMax,Math.round(n.spectrumMax*+i.spectrum[t]/100)))}}if(0==this.type){const e={triangle:1,square:2,"pulse wide":3,"pulse narrow":4,sawtooth:5,"double saw":6,"double pulse":7,spiky:8,plateau:0};this.chipWave=null!=e[t.wave]?e[t.wave]:n.chipWaves.findIndex((e=>e.name==t.wave)),-1==this.chipWave&&(this.chipWave=1)}if(1==this.type||10==this.type){1==this.type?(this.algorithm=n.algorithms.findIndex((e=>e.name==t.algorithm)),-1==this.algorithm&&(this.algorithm=0),this.feedbackType=n.feedbacks.findIndex((e=>e.name==t.feedbackType)),-1==this.feedbackType&&(this.feedbackType=0)):(this.algorithm6Op=n.algorithms6Op.findIndex((e=>e.name==t.algorithm)),-1==this.algorithm6Op&&(this.algorithm6Op=1),0==this.algorithm6Op&&this.customAlgorithm.set(t.customAlgorithm.carrierCount,t.customAlgorithm.mods),this.feedbackType6Op=n.feedbacks6Op.findIndex((e=>e.name==t.feedbackType)),-1==this.feedbackType6Op&&(this.feedbackType6Op=1),0==this.feedbackType6Op&&this.customFeedbackType.set(t.customFeedback.mods)),null!=t.feedbackAmplitude?this.feedbackAmplitude=N(0,n.operatorAmplitudeMax+1,0|t.feedbackAmplitude):this.feedbackAmplitude=0;for(let e=0;e<n.operatorCount;e++){const i=this.operators[e];let s=void 0;null!=t.operators&&(s=t.operators[e]),null==s&&(s={}),i.frequency=n.operatorFrequencies.findIndex((t=>t.name==s.frequency)),-1==i.frequency&&(i.frequency=0),null!=s.amplitude?i.amplitude=N(0,n.operatorAmplitudeMax+1,0|s.amplitude):i.amplitude=0,null!=s.waveform?(i.waveform=n.operatorWaves.findIndex((t=>t.name==s.waveform)),-1==i.waveform&&("square"==s.waveform?(i.waveform=n.operatorWaves.dictionary["pulse width"].index,i.pulseWidth=5):i.waveform=0)):i.waveform=0,null!=s.pulseWidth?i.pulseWidth=0|s.pulseWidth:i.pulseWidth=5}}else if(8==this.type){if(t.customChipWave){for(let e=0;e<64;e++)this.customChipWave[e]=t.customChipWave[e];let e=0;for(let t=0;t<this.customChipWave.length;t++)e+=this.customChipWave[t];const n=e/this.customChipWave.length;let i=0,s=0;for(let t=0;t<this.customChipWave.length;t++)i+=s,s=this.customChipWave[t]-n,this.customChipWaveIntegral[t]=i;this.customChipWaveIntegral[64]=0}}else if(9==this.type&&null!=t.modChannels)for(let e=0;e<n.modCount;e++)this.modChannels[e]=t.modChannels[e],this.modInstruments[e]=t.modInstruments[e],this.modulators[e]=t.modSettings[e];if(9!=this.type){this.chord==n.chords.dictionary.arpeggio.index&&null!=t.arpeggioSpeed?this.arpeggioSpeed=t.arpeggioSpeed:this.arpeggioSpeed=s?9:12,null!=t.fastTwoNoteArp?this.fastTwoNoteArp=t.fastTwoNoteArp:this.fastTwoNoteArp=a,null!=t.clicklessTransition?this.clicklessTransition=t.clicklessTransition:this.clicklessTransition=!1,null!=t.aliases?this.aliases=t.aliases:this.aliases=!1,null!=t.noteFilterType&&(this.noteFilterType=t.noteFilterType),null!=t.noteSimpleCut&&(this.noteFilterSimpleCut=t.noteSimpleCut),null!=t.noteSimplePeak&&(this.noteFilterSimplePeak=t.noteSimplePeak),null!=t.noteFilter?this.noteFilter.fromJsonObject(t.noteFilter):this.noteFilter.reset();for(let e=0;e<n.filterMorphCount;e++)Array.isArray(t["noteSubFilters"+e])&&(this.noteSubFilters[e]=new Q,this.noteSubFilters[e].fromJsonObject(t["noteSubFilters"+e]));if(null!=t.eqFilterType&&(this.eqFilterType=t.eqFilterType),null!=t.eqSimpleCut&&(this.eqFilterSimpleCut=t.eqSimpleCut),null!=t.eqSimplePeak&&(this.eqFilterSimplePeak=t.eqSimplePeak),Array.isArray(t.eqFilter))this.eqFilter.fromJsonObject(t.eqFilter);else{this.eqFilter.reset();const e={},i=8e3,s=11,a=8;if(null!=t.filterCutoffHz?e.filterCutoff=N(0,s,Math.round(s-1+2*Math.log((0|t.filterCutoffHz)/i)/Math.LN2)):e.filterCutoff=0==this.type?6:10,null!=t.filterResonance?e.filterResonance=N(0,a,Math.round((a-1)*(0|t.filterResonance)/100)):e.filterResonance=0,e.filterEnvelope=f(t.filterEnvelope),e.pulseEnvelope=f(t.pulseEnvelope),e.feedbackEnvelope=f(t.feedbackEnvelope),Array.isArray(t.operators)){e.operatorEnvelopes=[];for(let i=0;i<n.operatorCount;i++){let s;null!=t.operators[i]&&(s=f(t.operators[i].envelope)),e.operatorEnvelopes[i]=null!=s?s:n.envelopes.dictionary.none}}if(null!=t.filter){const n=[10,6,3,0,8,5,2],i=["none","none","none","none","decay 1","decay 2","decay 3"],s=["none","bright","medium","soft","decay bright","decay medium","decay soft"],a={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};let r=null!=a[t.filter]?a[t.filter]:s.indexOf(t.filter);-1==r&&(r=0),e.filterCutoff=n[r],e.filterEnvelope=f(i[r]),e.filterResonance=0}this.convertLegacySettings(e,!0)}for(let e=0;e<n.filterMorphCount;e++)Array.isArray(t["eqSubFilters"+e])&&(this.eqSubFilters[e]=new Q,this.eqSubFilters[e].fromJsonObject(t["eqSubFilters"+e]));if(Array.isArray(t.envelopes)){const e=t.envelopes;for(let t=0;t<e.length&&!(this.envelopeCount>=n.maxEnvelopeCount);t++){const n=new _;n.fromJsonObject(e[t]),this.addEnvelope(n.target,n.index,n.envelope)}}}}static frequencyFromPitch(t){return 440*Math.pow(2,(t-69)/12)}static drumsetIndexReferenceDelta(t){return Z.frequencyFromPitch(n.spectrumBasePitch+6*t)/44100}static k(t){return 15+Math.log2(Z.drumsetIndexReferenceDelta(t))}addEnvelope(t,e,i){let s=!1;if(this.supportsEnvelopeTarget(t,e)||(s=!0),this.envelopeCount>=n.maxEnvelopeCount)throw new Error;for(;this.envelopes.length<=this.envelopeCount;)this.envelopes[this.envelopes.length]=new _;const a=this.envelopes[this.envelopeCount];a.target=s?n.instrumentAutomationTargets.dictionary.none.index:t,a.index=s?0:e,a.envelope=i,this.envelopeCount++}supportsEnvelopeTarget(t,e){const i=n.instrumentAutomationTargets[t];if(e>=i.maxCount)return!1;if(null!=i.compatibleInstruments&&-1==i.compatibleInstruments.indexOf(this.type))return!1;if(null!=i.effect&&0==(this.effects&1<<i.effect))return!1;if(i.isFilter){let t=this.noteFilter.controlPointCount;if(this.noteFilterType&&(t=1),e>=t)return!1}return!0}clearInvalidEnvelopeTargets(){for(let t=0;t<this.envelopeCount;t++){const e=this.envelopes[t].target,i=this.envelopes[t].index;this.supportsEnvelopeTarget(e,i)||(this.envelopes[t].target=n.instrumentAutomationTargets.dictionary.none.index,this.envelopes[t].index=0)}}warmUp(t){if(this.LFOtime=0,this.nextLFOtime=0,this.arpTime=0,this.tmpEqFilterStart=this.eqFilter,this.tmpEqFilterEnd=null,this.tmpNoteFilterStart=this.noteFilter,this.tmpNoteFilterEnd=null,2==this.type)r(this.chipNoise,T,F);else if(5==this.type)this.harmonicsWave.getCustomWave(this.type);else if(7==this.type)this.harmonicsWave.getCustomWave(this.type);else if(3==this.type)this.spectrumWave.getCustomWave(8);else if(4==this.type)for(let t=0;t<n.drumCount;t++)this.drumsetSpectrumWaves[t].getCustomWave(Z.k(t))}getDrumWave(){if(2==this.type)return r(this.chipNoise,T,F);if(3==this.type)return this.spectrumWave.getCustomWave(8);throw new Error("Unhandled instrument type in getDrumWave")}getDrumsetWave(t){if(4==this.type)return this.drumsetSpectrumWaves[t].getCustomWave(Z.k(t));throw new Error("Unhandled instrument type in getDrumsetWave")}getTransition(){return f(this.effects)?n.transitions[this.transition]:9==this.type?n.transitions.dictionary.interrupt:n.transitions.dictionary.normal}getFadeInSeconds(){return 4==this.type?0:at.fadeInSettingToSeconds(this.fadeIn)}getFadeOutTicks(){return 4==this.type?n.drumsetFadeOutTicks:at.fadeOutSettingToTicks(this.fadeOut)}getChord(){return p(this.effects)?n.chords[this.chord]:n.chords.dictionary.simultaneous}getDrumsetEnvelope(t){if(4!=this.type)throw new Error("Can't getDrumsetEnvelope() for non-drumset.");return n.envelopes[this.drumsetEnvelopes[t]]}}class Y{constructor(){this.octave=0,this.instruments=[],this.patterns=[],this.bars=[],this.muted=!1,this.name=""}}class X{constructor(t){this.scaleCustom=[],this.channels=[],this.limitDecay=4,this.limitRise=4e3,this.compressionThreshold=1,this.limitThreshold=1,this.compressionRatio=1,this.limitRatio=1,this.masterGain=1,this.inVolumeCap=0,this.outVolumeCap=0,this.getNewNoteVolume=(t,e,i,s)=>{if(t&&null!=e&&null!=i&&null!=s){s=n.modCount-s-1;let t=n.modulators[this.channels[e].instruments[i].modulators[s]].newNoteVol,a=n.modulators.dictionary.tempo.index;return this.channels[e].instruments[i].modulators[s]==a&&(t=this.tempo-n.modulators[a].convertRealFactor),null!=t?t:6}return 6},this.getVolumeCap=(t,e,i,s)=>{if(t&&null!=e&&null!=i&&null!=s){s=n.modCount-s-1;let t=this.channels[e].instruments[i],a=n.modulators[t.modulators[s]],r=a.maxRawVol;return null!=r?("eq filter"!=a.name&&"note filter"!=a.name||(r=n.filterMorphCount-1,t.modFilterTypes[s]>0&&t.modFilterTypes[s]%2?r=n.filterFreqRange:t.modFilterTypes[s]>0&&(r=n.filterGainRange)),r):6}return 6},this.getVolumeCapForSetting=(t,e,i)=>{if(t){let t=n.modulators[e].maxRawVol;return null!=t?(null==i||"eq filter"!=n.modulators[e].name&&"note filter"!=n.modulators[e].name||(t=n.filterMorphCount-1,i>0&&i%2?t=n.filterFreqRange:i>0&&(t=n.filterGainRange)),t):n.noteSizeMax}return n.noteSizeMax},null!=t?this.fromBase64String(t):this.initToDefault(!0)}getChannelCount(){return this.pitchChannelCount+this.noiseChannelCount+this.modChannelCount}getMaxInstrumentsPerChannel(){return Math.max(this.layeredInstruments?n.layeredInstrumentCountMax:n.instrumentCountMin,this.patternInstruments?n.patternInstrumentCountMax:n.instrumentCountMin)}getMaxInstrumentsPerPattern(t){return this.getMaxInstrumentsPerPatternForChannel(this.channels[t])}getMaxInstrumentsPerPatternForChannel(t){return this.layeredInstruments?Math.min(n.layeredInstrumentCountMax,t.instruments.length):1}getChannelIsNoise(t){return t>=this.pitchChannelCount&&t<this.pitchChannelCount+this.noiseChannelCount}getChannelIsMod(t){return t>=this.pitchChannelCount+this.noiseChannelCount}initToDefault(t=!0){if(this.scale=0,this.scaleCustom=[!0,!1,!0,!0,!1,!1,!1,!0,!0,!1,!0,!0],this.key=0,this.loopStart=0,this.loopLength=4,this.tempo=150,this.reverb=0,this.beatsPerBar=8,this.barCount=16,this.patternsPerChannel=8,this.rhythm=1,this.layeredInstruments=!1,this.patternInstruments=!1,this.title="Unnamed",document.title=I.versionDisplayName,t){this.pitchChannelCount=3,this.noiseChannelCount=1,this.modChannelCount=0;for(let t=0;t<this.getChannelCount();t++){const e=t>=this.pitchChannelCount&&t<this.pitchChannelCount+this.noiseChannelCount,i=t>=this.pitchChannelCount+this.noiseChannelCount;this.channels.length<=t&&(this.channels[t]=new Y);const s=this.channels[t];s.octave=Math.max(3-t,0);for(let t=0;t<this.patternsPerChannel;t++)s.patterns.length<=t?s.patterns[t]=new B:s.patterns[t].reset();s.patterns.length=this.patternsPerChannel;for(let t=0;t<n.instrumentCountMin;t++)s.instruments.length<=t&&(s.instruments[t]=new Z(e,i)),s.instruments[t].setTypeAndReset(i?9:e?2:0,e,i);s.instruments.length=n.instrumentCountMin;for(let t=0;t<this.barCount;t++)s.bars[t]=t<4?1:0;s.bars.length=this.barCount}this.channels.length=this.getChannelCount()}}toBase64String(){let t,e=[];e.push(X.I),e.push(C[X.P]),e.push(78);var i=encodeURIComponent(this.title);e.push(C[i.length>>6],C[63&i.length]);for(let t=0;t<i.length;t++)e.push(i.charCodeAt(t));if(e.push(110,C[this.pitchChannelCount],C[this.noiseChannelCount],C[this.modChannelCount]),e.push(115,C[this.scale]),this.scale==n.scales.dictionary.Custom.index)for(var s=1;s<n.pitchesPerOctave;s++)e.push(C[this.scaleCustom[s]?1:0]);e.push(107,C[this.key]),e.push(108,C[this.loopStart>>6],C[63&this.loopStart]),e.push(101,C[this.loopLength-1>>6],C[this.loopLength-1&63]),e.push(116,C[this.tempo>>6],C[63&this.tempo]),e.push(97,C[this.beatsPerBar-1]),e.push(103,C[this.barCount-1>>6],C[this.barCount-1&63]),e.push(106,C[this.patternsPerChannel-1>>6],C[this.patternsPerChannel-1&63]),e.push(114,C[this.rhythm]),e.push(79),1!=this.compressionRatio||1!=this.limitRatio||4e3!=this.limitRise||4!=this.limitDecay||1!=this.limitThreshold||1!=this.compressionThreshold||1!=this.masterGain?(e.push(C[Math.round(this.compressionRatio<1?10*this.compressionRatio:10+60*(this.compressionRatio-1))]),e.push(C[Math.round(this.limitRatio<1?10*this.limitRatio:9+this.limitRatio)]),e.push(C[this.limitDecay]),e.push(C[Math.round((this.limitRise-2e3)/250)]),e.push(C[Math.round(20*this.compressionThreshold)]),e.push(C[Math.round(20*this.limitThreshold)]),e.push(C[Math.round(50*this.masterGain)>>6],C[63&Math.round(50*this.masterGain)])):e.push(C[63]),e.push(85);for(let t=0;t<this.getChannelCount();t++){var a=encodeURIComponent(this.channels[t].name);e.push(C[a.length>>6],C[63&a.length]);for(let t=0;t<a.length;t++)e.push(a.charCodeAt(t))}if(e.push(105,C[this.layeredInstruments<<1|this.patternInstruments]),this.layeredInstruments||this.patternInstruments)for(let t=0;t<this.getChannelCount();t++)e.push(C[this.channels[t].instruments.length-n.instrumentCountMin]);e.push(111);for(let t=0;t<this.pitchChannelCount;t++)e.push(C[this.channels[t].octave]);for(let t=0;t<this.getChannelCount();t++)for(let i=0;i<this.channels[t].instruments.length;i++){const s=this.channels[t].instruments[i];if(e.push(84,C[s.type]),e.push(118,C[s.volume+n.volumeRange/2>>6],C[s.volume+n.volumeRange/2&63]),e.push(117,C[s.preset>>6],C[63&s.preset]),e.push(102),e.push(C[+s.eqFilterType]),s.eqFilterType)e.push(C[s.eqFilterSimpleCut]),e.push(C[s.eqFilterSimplePeak]);else{if(null==s.eqFilter)e.push(C[0]),console.log("Null EQ filter settings detected in toBase64String for channelIndex "+t+", instrumentIndex "+i);else{e.push(C[s.eqFilter.controlPointCount]);for(let t=0;t<s.eqFilter.controlPointCount;t++){const n=s.eqFilter.controlPoints[t];e.push(C[n.type],C[Math.round(n.freq)],C[Math.round(n.gain)])}}let a=0;for(let t=0;t<n.filterMorphCount-1;t++)a|=+(null!=s.eqSubFilters[t+1])<<t;e.push(C[a>>6],C[63&a]);for(let t=0;t<n.filterMorphCount-1;t++)if(a&1<<t){e.push(C[s.eqSubFilters[t+1].controlPointCount]);for(let n=0;n<s.eqSubFilters[t+1].controlPointCount;n++){const i=s.eqSubFilters[t+1].controlPoints[n];e.push(C[i.type],C[Math.round(i.freq)],C[Math.round(i.gain)])}}}if(e.push(113,C[s.effects>>6],C[63&s.effects]),g(s.effects))if(e.push(C[+s.noteFilterType]),s.noteFilterType)e.push(C[s.noteFilterSimpleCut]),e.push(C[s.noteFilterSimplePeak]);else{if(null==s.noteFilter)e.push(C[0]),console.log("Null note filter settings detected in toBase64String for channelIndex "+t+", instrumentIndex "+i);else{e.push(C[s.noteFilter.controlPointCount]);for(let t=0;t<s.noteFilter.controlPointCount;t++){const n=s.noteFilter.controlPoints[t];e.push(C[n.type],C[Math.round(n.freq)],C[Math.round(n.gain)])}}let a=0;for(let t=0;t<n.filterMorphCount-1;t++)a|=+(null!=s.noteSubFilters[t+1])<<t;e.push(C[a>>6],C[63&a]);for(let t=0;t<n.filterMorphCount-1;t++)if(a&1<<t){e.push(C[s.noteSubFilters[t+1].controlPointCount]);for(let n=0;n<s.noteSubFilters[t+1].controlPointCount;n++){const i=s.noteSubFilters[t+1].controlPoints[n];e.push(C[i.type],C[Math.round(i.freq)],C[Math.round(i.gain)])}}}if(f(s.effects)&&e.push(C[s.transition]),p(s.effects)&&(e.push(C[s.chord]),s.chord==n.chords.dictionary.arpeggio.index&&(e.push(C[s.arpeggioSpeed]),e.push(C[+s.fastTwoNoteArp]))),d(s.effects)&&e.push(C[s.pitchShift]),m(s.effects)&&e.push(C[s.detune-n.detuneMin>>6],C[s.detune-n.detuneMin&63]),y(s.effects)&&(e.push(C[s.vibrato]),s.vibrato==n.vibratos.length&&(e.push(C[Math.round(25*s.vibratoDepth)]),e.push(C[s.vibratoSpeed]),e.push(C[Math.round(s.vibratoDelay)]),e.push(C[s.vibratoType]))),v(s.effects)&&(e.push(C[s.distortion]),e.push(C[+s.aliases])),b(s.effects)&&e.push(C[s.bitcrusherFreq],C[s.bitcrusherQuantization]),M(s.effects)&&(e.push(C[s.pan>>6],C[63&s.pan]),e.push(C[s.panDelay])),S(s.effects)&&e.push(C[s.chorus]),w(s.effects)&&e.push(C[s.echoSustain],C[s.echoDelay]),k(s.effects)&&e.push(C[s.reverb]),4!=s.type&&(e.push(100,C[s.fadeIn],C[s.fadeOut]),e.push(C[+s.clicklessTransition])),5==s.type||7==s.type){e.push(72);const t=new z;for(let e=0;e<n.harmonicsControlPoints;e++)t.write(n.harmonicsControlPointBits,s.harmonicsWave.harmonics[e]);t.encodeBase64(e)}if(0==s.type)e.push(119,C[s.chipWave]),e.push(104,C[s.unison]);else if(1==s.type||10==s.type){if(1==s.type)e.push(65,C[s.algorithm]),e.push(70,C[s.feedbackType]);else{if(e.push(65,C[s.algorithm6Op]),0==s.algorithm6Op){e.push(67,C[s.customAlgorithm.carrierCount]),e.push(113);for(let t=0;t<s.customAlgorithm.modulatedBy.length;t++){for(let n=0;n<s.customAlgorithm.modulatedBy[t].length;n++)e.push(C[s.customAlgorithm.modulatedBy[t][n]]);e.push(82)}e.push(113)}if(e.push(70,C[s.feedbackType6Op]),0==s.feedbackType6Op){e.push(113);for(let t=0;t<s.customFeedbackType.indices.length;t++){for(let n=0;n<s.customFeedbackType.indices[t].length;n++)e.push(C[s.customFeedbackType.indices[t][n]]);e.push(82)}e.push(113)}}e.push(66,C[s.feedbackAmplitude]),e.push(81);for(let t=0;t<(10==s.type?6:n.operatorCount);t++)e.push(C[s.operators[t].frequency]);e.push(80);for(let t=0;t<(10==s.type?6:n.operatorCount);t++)e.push(C[s.operators[t].amplitude]);e.push(82);for(let t=0;t<(10==s.type?6:n.operatorCount);t++)e.push(C[s.operators[t].waveform]),2==s.operators[t].waveform&&e.push(C[s.operators[t].pulseWidth])}else if(8==s.type){e.push(119,C[s.chipWave]),e.push(104,C[s.unison]),e.push(77);for(let t=0;t<64;t++)e.push(C[s.customChipWave[t]+24])}else if(2==s.type)e.push(119,C[s.chipNoise]);else if(3==s.type){e.push(83);const t=new z;for(let e=0;e<n.spectrumControlPoints;e++)t.write(n.spectrumControlPointBits,s.spectrumWave.spectrum[e]);t.encodeBase64(e)}else if(4==s.type){e.push(122);for(let t=0;t<n.drumCount;t++)e.push(C[s.drumsetEnvelopes[t]]);e.push(83);const t=new z;for(let e=0;e<n.drumCount;e++)for(let i=0;i<n.spectrumControlPoints;i++)t.write(n.spectrumControlPointBits,s.drumsetSpectrumWaves[e].spectrum[i]);t.encodeBase64(e)}else if(5==s.type)e.push(104,C[s.unison]);else if(6==s.type)e.push(87,C[s.pulseWidth]);else if(7==s.type)e.push(104,C[s.unison]),e.push(73,C[s.stringSustain]);else if(9!=s.type)throw new Error("Unknown instrument type.");e.push(69,C[s.envelopeCount]);for(let t=0;t<s.envelopeCount;t++)e.push(C[s.envelopes[t].target]),n.instrumentAutomationTargets[s.envelopes[t].target].maxCount>1&&e.push(C[s.envelopes[t].index]),e.push(C[s.envelopes[t].envelope])}e.push(98),t=new z;let r=0;for(;1<<r<this.patternsPerChannel+1;)r++;for(let e=0;e<this.getChannelCount();e++)for(let n=0;n<this.barCount;n++)t.write(r,this.channels[e].bars[n]);t.encodeBase64(e),e.push(112),t=new z;const o=new z,l=X.getNeededBits(n.noteSizeMax);for(let e=0;e<this.getChannelCount();e++){const i=this.channels[e],s=this.getMaxInstrumentsPerPattern(e),a=this.getChannelIsNoise(e),r=this.getChannelIsMod(e),h=X.getNeededBits(s-n.instrumentCountMin),c=X.getNeededBits(i.instruments.length-1);if(r){const s=X.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let a=0;a<i.instruments.length;a++){let i=this.channels[e].instruments[a];for(let e=0;e<n.modCount;e++){const a=i.modChannels[e],r=i.modInstruments[e],o=i.modulators[e],l=i.modFilterTypes[e];let h=n.modulators[o].forSong?2:0;o==n.modulators.dictionary.none.index&&(h=3),t.write(2,h),0!=h&&1!=h||(t.write(8,a),t.write(s,r)),3!=h&&t.write(6,o),"eq filter"!=n.modulators[i.modulators[e]].name&&"note filter"!=n.modulators[i.modulators[e]].name||t.write(6,l)}}}const u=a||r?0:i.octave*n.pitchesPerOctave;let f=a?4:u;const p=r?[0,1,2,3,4,5]:a?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],d=[];for(let t=0;t<p.length;t++)p[t]+=u;for(const e of i.patterns){if(this.patternInstruments){const i=G(n.instrumentCountMin,s,e.instruments.length);t.write(h,i-n.instrumentCountMin);for(let n=0;n<i;n++)t.write(c,e.instruments[n])}if(e.notes.length>0){t.write(1,1);let i=0;for(const n of e.notes){n.start<i&&r&&(t.write(2,0),t.write(1,1),t.writePartDuration(i-n.start)),n.start>i&&(t.write(2,0),r&&t.write(1,0),t.writePartDuration(n.start-i)),o.clear(),1==n.pitches.length?o.write(1,0):(o.write(1,1),o.write(3,n.pitches.length-2)),o.writePinCount(n.pins.length-1),r?o.write(9,n.pins[0].size):o.write(l,n.pins[0].size);let e=0,s=n.pitches[0],a=s;const h=[];for(let t=1;t<n.pins.length;t++){const i=n.pins[t],c=s+i.interval;a!=c?(o.write(1,1),h.push(c),a=c):o.write(1,0),o.writePartDuration(i.time-e),e=i.time,r?o.write(9,i.size):o.write(l,i.size)}const c=String.fromCharCode.apply(null,o.encodeBase64([])),u=d.indexOf(c);-1==u?(t.write(2,1),t.concat(o)):(t.write(1,1),t.writeLongTail(0,0,u),d.splice(u,1)),d.unshift(c),d.length>10&&d.pop();const m=n.pitches.concat(h);for(let e=0;e<m.length;e++){const i=m[e],s=p.indexOf(i);if(-1==s){let e=0,n=f;if(n<i)for(;n!=i;)n++,-1==p.indexOf(n)&&e++;else for(;n!=i;)n--,-1==p.indexOf(n)&&e--;t.write(1,0),t.writePitchInterval(e)}else t.write(1,1),t.write(4,s),p.splice(s,1);p.unshift(i),p.length>16&&p.pop(),f=e==n.pitches.length-1?n.pitches[0]:i}0==n.start&&t.write(1,n.continuesLastPattern?1:0),i=n.end}i<this.beatsPerBar*n.partsPerBeat+ +r&&(t.write(2,0),r&&t.write(1,0),t.writePartDuration(this.beatsPerBar*n.partsPerBeat+ +r-i))}else t.write(1,0)}}let h=t.lengthBase64(),c=[];for(;h>0;)c.unshift(C[63&h]),h>>=6;e.push(C[c.length]),Array.prototype.push.apply(e,c),t.encodeBase64(e);const u=64e3;if(e.length<u)return String.fromCharCode.apply(null,e);{let t="";for(let n=0;n<e.length;n+=u)t+=String.fromCharCode.apply(null,e.slice(n,n+u));return t}}static T(t){return 0==t?t=1:1==t&&(t=0),n.envelopes[N(0,n.envelopes.length,t)]}fromBase64String(t){if(null==t||""==t)return void this.initToDefault(!0);let e=0;for(;t.charCodeAt(e)<=32;)e++;if(35==t.charCodeAt(e)&&e++,123==t.charCodeAt(e))return void this.fromJsonObject(JSON.parse(0==e?t:t.substring(e)));const i=t.charCodeAt(e);let s,a,r;106==i?(s=!1,a=!0,r=!1,e++):103==i?(s=!1,a=!1,r=!0,e++):(s=!0,a=!1,r=!1);const o=A[t.charCodeAt(e++)];if(s&&(-1==o||o>X.q||o<X.O))return;if(a&&(-1==o||o>X.R||o<X.L))return;if(r&&(-1==o||o>X.P||o<X.H))return;const l=o<2,h=o<3,c=o<4,u=o<5,F=o<6,P=o<7,T=o<8,q=o<9;this.initToDefault(s&&q||a&&u||c&&r);const x=s&&q||a&&u;if(h&&s){for(const t of this.channels)t.instruments[0].transition=n.transitions.dictionary.interrupt.index,t.instruments[0].effects|=1024;this.channels[3].instruments[0].chipNoise=0}let D=null;if(s&&q||a&&u||c&&r){D=[];for(let t=D.length;t<this.getChannelCount();t++){D[t]=[];for(let e=0;e<n.instrumentCountMin;e++)D[t][e]={}}}let O,R=0,E=0,C=-1,z=!1,$=!1;for(;e<t.length;)switch(O=t.charCodeAt(e++)){case 78:var W=(A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)];this.title=decodeURIComponent(t.substring(e,e+W)),document.title=this.title+" - "+I.versionDisplayName,e+=W;break;case 110:this.pitchChannelCount=A[t.charCodeAt(e++)],this.noiseChannelCount=A[t.charCodeAt(e++)],this.modChannelCount=s||l?0:A[t.charCodeAt(e++)],this.pitchChannelCount=G(n.pitchChannelCountMin,n.pitchChannelCountMax,this.pitchChannelCount),this.noiseChannelCount=G(n.noiseChannelCountMin,n.noiseChannelCountMax,this.noiseChannelCount),this.modChannelCount=G(n.modChannelCountMin,n.modChannelCountMax,this.modChannelCount);for(let t=this.channels.length;t<this.getChannelCount();t++)this.channels[t]=new Y;if(this.channels.length=this.getChannelCount(),s&&q||a&&u||c&&r)for(let t=D.length;t<this.getChannelCount();t++){D[t]=[];for(let e=0;e<n.instrumentCountMin;e++)D[t][e]={}}break;case 115:if(this.scale=A[t.charCodeAt(e++)],this.scale==n.scales.dictionary.Custom.index)for(var j=1;j<n.pitchesPerOctave;j++)this.scaleCustom[j]=1==A[t.charCodeAt(e++)];s&&(this.scale=0);break;case 107:this.key=N(0,n.keys.length,P&&s?11-A[t.charCodeAt(e++)]:A[t.charCodeAt(e++)]);break;case 108:this.loopStart=u&&s?A[t.charCodeAt(e++)]:(A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)];break;case 101:this.loopLength=u&&s?A[t.charCodeAt(e++)]:(A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)]+1;break;case 116:this.tempo=c&&s?[95,120,151,190][A[t.charCodeAt(e++)]]:P&&s?[88,95,103,111,120,130,140,151,163,176,190,206,222,240,259][A[t.charCodeAt(e++)]]:A[t.charCodeAt(e++)]<<6|A[t.charCodeAt(e++)],this.tempo=N(n.tempoMin,n.tempoMax+1,this.tempo);break;case 109:q&&s?(R=12*A[t.charCodeAt(e++)],R=N(0,n.reverbRange,R)):(a&&u||c&&r)&&(R=A[t.charCodeAt(e++)],R=N(0,n.reverbRange,R));break;case 97:this.beatsPerBar=h&&s?[6,7,8,9,10][A[t.charCodeAt(e++)]]:A[t.charCodeAt(e++)]+1,this.beatsPerBar=Math.max(n.beatsPerBarMin,Math.min(n.beatsPerBarMax,this.beatsPerBar));break;case 103:{const i=(A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)]+1;this.barCount=G(n.barCountMin,n.barCountMax,i);for(let t=0;t<this.getChannelCount();t++){for(let e=this.channels[t].bars.length;e<this.barCount;e++)this.channels[t].bars[e]=e<4?1:0;this.channels[t].bars.length=this.barCount}}break;case 106:{let i;i=T&&s?A[t.charCodeAt(e++)]+1:(A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)]+1,this.patternsPerChannel=G(1,n.barCountMax,i);const a=this.getChannelCount();for(let t=0;t<a;t++){const e=this.channels[t].patterns;for(let t=e.length;t<this.patternsPerChannel;t++)e[t]=new B;e.length=this.patternsPerChannel}}break;case 105:if(q&&s||a&&u||c&&r){const i=G(n.instrumentCountMin,n.patternInstrumentCountMax,A[t.charCodeAt(e++)]+n.instrumentCountMin);this.layeredInstruments=!1,this.patternInstruments=i>1;for(let t=0;t<this.getChannelCount();t++){const e=t>=this.pitchChannelCount&&t<this.pitchChannelCount+this.noiseChannelCount,n=t>=this.pitchChannelCount+this.noiseChannelCount;for(let s=this.channels[t].instruments.length;s<i;s++)this.channels[t].instruments[s]=new Z(e,n);if(this.channels[t].instruments.length=i,F&&s)for(let s=0;s<i;s++)this.channels[t].instruments[s].setTypeAndReset(e?2:0,e,n);for(let e=D[t].length;e<i;e++)D[t][e]={}}}else{const i=A[t.charCodeAt(e++)];this.layeredInstruments=0!=(2&i),this.patternInstruments=0!=(1&i);for(let i=0;i<this.getChannelCount();i++){let s=1;(this.layeredInstruments||this.patternInstruments)&&(s=G(n.instrumentCountMin,this.getMaxInstrumentsPerChannel(),A[t.charCodeAt(e++)]+n.instrumentCountMin));const a=this.channels[i],r=this.getChannelIsNoise(i),o=this.getChannelIsMod(i);for(let t=a.instruments.length;t<s;t++)a.instruments[t]=new Z(r,o);a.instruments.length=s}}break;case 114:this.rhythm=A[t.charCodeAt(e++)],(a&&h||s)&&(this.rhythm!=n.rhythms.dictionary["÷3 (triplets)"].index&&this.rhythm!=n.rhythms.dictionary["÷6"].index||(z=!0),this.rhythm>=n.rhythms.dictionary["÷6"].index&&($=!0));break;case 111:if(h&&s){const i=A[t.charCodeAt(e++)];this.channels[i].octave=N(0,n.pitchOctaves,A[t.charCodeAt(e++)]+1),i>=this.pitchChannelCount&&(this.channels[i].octave=0)}else if(q&&s||a&&u||c&&r)for(let i=0;i<this.getChannelCount();i++)this.channels[i].octave=N(0,n.pitchOctaves,A[t.charCodeAt(e++)]+1),i>=this.pitchChannelCount&&(this.channels[i].octave=0);else for(let i=0;i<this.pitchChannelCount;i++)this.channels[i].octave=N(0,n.pitchOctaves,A[t.charCodeAt(e++)]);break;case 84:{C++,C>=this.channels[E].instruments.length&&(E++,C=0),G(0,this.channels.length-1,E);const i=this.channels[E].instruments[C];let o=G(0,10,A[t.charCodeAt(e++)]);(a&&u||c&&r)&&(7==o?o=8:8==o&&(o=9)),i.setTypeAndReset(o,E>=this.pitchChannelCount&&E<this.pitchChannelCount+this.noiseChannelCount,E>=this.pitchChannelCount+this.noiseChannelCount),!(P&&s||l&&a)||0!=o&&8!=o&&6!=o||(i.aliases=!0),z&&(i.arpeggioSpeed=9),$&&(i.fastTwoNoteArp=!0),P&&s&&(i.effects=0,i.chord!=n.chords.dictionary.simultaneous.index&&(i.effects|=2048))}break;case 117:{const n=A[t.charCodeAt(e++)]<<6|A[t.charCodeAt(e++)];this.channels[E].instruments[C].preset=n,(a&&u||c&&r)&&7==this.channels[E].instruments[C].preset&&(this.channels[E].instruments[C].preset=8)}break;case 119:if(h&&s){const i=[1,2,3,4,5,6,7,8,0],s=A[t.charCodeAt(e++)],a=this.channels[s].instruments[0];a.chipWave=N(0,n.chipWaves.length,0|i[A[t.charCodeAt(e++)]]),a.convertLegacySettings(D[s][0],x)}else if(F&&s){const i=[1,2,3,4,5,6,7,8,0];for(let s=0;s<this.getChannelCount();s++)for(const a of this.channels[s].instruments)s>=this.pitchChannelCount?a.chipNoise=N(0,n.chipNoises.length,A[t.charCodeAt(e++)]):a.chipWave=N(0,n.chipWaves.length,0|i[A[t.charCodeAt(e++)]])}else if(P&&s){const i=[1,2,3,4,5,6,7,8,0];E>=this.pitchChannelCount?this.channels[E].instruments[C].chipNoise=N(0,n.chipNoises.length,A[t.charCodeAt(e++)]):this.channels[E].instruments[C].chipWave=N(0,n.chipWaves.length,0|i[A[t.charCodeAt(e++)]])}else E>=this.pitchChannelCount?this.channels[E].instruments[C].chipNoise=N(0,n.chipNoises.length,A[t.charCodeAt(e++)]):this.channels[E].instruments[C].chipWave=N(0,n.chipWaves.length,A[t.charCodeAt(e++)]);break;case 102:if(q&&s||u&&a||c&&r)if(P&&s){const i=[10,6,3,0,8,5,2],a=["none","none","none","none","decay 1","decay 2","decay 3"];if(h&&s){const s=A[t.charCodeAt(e++)],r=this.channels[s].instruments[0],o=D[s][0],l=[1,3,4,5][N(0,i.length,A[t.charCodeAt(e++)])];o.filterCutoff=i[l],o.filterResonance=0,o.filterEnvelope=n.envelopes.dictionary[a[l]],r.convertLegacySettings(o,x)}else if(F&&s)for(let s=0;s<this.getChannelCount();s++)for(let r=0;r<this.channels[s].instruments.length;r++){const o=this.channels[s].instruments[r],l=D[s][r],h=N(0,i.length,A[t.charCodeAt(e++)]+1);s<this.pitchChannelCount?(l.filterCutoff=i[h],l.filterResonance=0,l.filterEnvelope=n.envelopes.dictionary[a[h]]):(l.filterCutoff=10,l.filterResonance=0,l.filterEnvelope=n.envelopes.dictionary.none),o.convertLegacySettings(l,x)}else{const n=N(0,i.length,A[t.charCodeAt(e++)]),s=this.channels[E].instruments[C],a=D[E][C];a.filterCutoff=i[n],a.filterResonance=0,s.convertLegacySettings(a,x)}}else{const n=11,i=this.channels[E].instruments[C],s=D[E][C];s.filterCutoff=N(0,n,A[t.charCodeAt(e++)]),i.convertLegacySettings(s,x)}else{const i=this.channels[E].instruments[C];let o=A[t.charCodeAt(e++)];if(s||0==o){i.eqFilterType=!1,(a||r)&&(o=A[t.charCodeAt(e++)]);const s=o;i.eqFilter.controlPointCount=N(0,n.filterMaxPoints+1,s);for(let t=i.eqFilter.controlPoints.length;t<i.eqFilter.controlPointCount;t++)i.eqFilter.controlPoints[t]=new J;for(let s=0;s<i.eqFilter.controlPointCount;s++){const a=i.eqFilter.controlPoints[s];a.type=N(0,3,A[t.charCodeAt(e++)]),a.freq=N(0,n.filterFreqRange,A[t.charCodeAt(e++)]),a.gain=N(0,n.filterGainRange,A[t.charCodeAt(e++)])}for(let t=i.eqFilter.controlPointCount;t<s;t++)e+=3;if(i.eqSubFilters[0]=i.eqFilter,a&&!u||r&&!c){let s=A[t.charCodeAt(e++)]<<6|A[t.charCodeAt(e++)];for(let a=0;a<n.filterMorphCount-1;a++)if(s&1<<a){const s=A[t.charCodeAt(e++)];null==i.eqSubFilters[a+1]&&(i.eqSubFilters[a+1]=new Q),i.eqSubFilters[a+1].controlPointCount=N(0,n.filterMaxPoints+1,s);for(let t=i.eqSubFilters[a+1].controlPoints.length;t<i.eqSubFilters[a+1].controlPointCount;t++)i.eqSubFilters[a+1].controlPoints[t]=new J;for(let s=0;s<i.eqSubFilters[a+1].controlPointCount;s++){const r=i.eqSubFilters[a+1].controlPoints[s];r.type=N(0,3,A[t.charCodeAt(e++)]),r.freq=N(0,n.filterFreqRange,A[t.charCodeAt(e++)]),r.gain=N(0,n.filterGainRange,A[t.charCodeAt(e++)])}for(let t=i.eqSubFilters[a+1].controlPointCount;t<s;t++)e+=3}}}else i.eqFilterType=!0,i.eqFilterSimpleCut=N(0,n.filterSimpleCutRange,A[t.charCodeAt(e++)]),i.eqFilterSimplePeak=N(0,n.filterSimplePeakRange,A[t.charCodeAt(e++)])}break;case 121:if(q&&s||a&&u||c&&r){const n=8,i=this.channels[E].instruments[C],s=D[E][C];s.filterResonance=N(0,n,A[t.charCodeAt(e++)]),i.convertLegacySettings(s,x)}break;case 122:{const i=this.channels[E].instruments[C],o=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11];if(q&&s||u&&a||c&&r)if(4==i.type)for(let s=0;s<n.drumCount;s++){let n=A[t.charCodeAt(e++)];(l&&r||!r)&&(n=o[n]),i.drumsetEnvelopes[s]=X.T(n).index}else{const n=D[E][C];let s=A[t.charCodeAt(e++)];(l&&r||!r)&&(s=o[s]),n.filterEnvelope=X.T(s),i.convertLegacySettings(n,x)}else for(let s=0;s<n.drumCount;s++){let a=A[t.charCodeAt(e++)];(l&&r||!r)&&(a=o[a]),i.drumsetEnvelopes[s]=N(0,n.envelopes.length,a)}}break;case 87:{const i=this.channels[E].instruments[C];if(i.pulseWidth=N(0,n.pulseWidthRange+ +a,A[t.charCodeAt(e++)]),s&&(i.pulseWidth=Math.round(Math.pow(.5,(7-i.pulseWidth)*n.pulseWidthStepPower)*n.pulseWidthRange)),q&&s||u&&a||c&&r){const n=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11],s=D[E][C];let a=A[t.charCodeAt(e++)];(l&&r||!r)&&(a=n[a]),s.pulseEnvelope=X.T(a),i.convertLegacySettings(s,x)}}break;case 73:this.channels[E].instruments[C].stringSustain=N(0,n.stringSustainRange,A[t.charCodeAt(e++)]);break;case 100:if(q&&s||a&&u||c&&r){const i=[{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3}];if(h&&s){const s=A[t.charCodeAt(e++)],a=i[N(0,i.length,A[t.charCodeAt(e++)])],r=this.channels[s].instruments[0];r.fadeIn=at.secondsToFadeInSetting(a.fadeInSeconds),r.fadeOut=at.ticksToFadeOutSetting(a.fadeOutTicks),r.transition=n.transitions.dictionary[a.transition].index,r.transition!=n.transitions.dictionary.normal.index&&(r.effects|=1024)}else if(F&&s)for(let s=0;s<this.getChannelCount();s++)for(const a of this.channels[s].instruments){const s=i[N(0,i.length,A[t.charCodeAt(e++)])];a.fadeIn=at.secondsToFadeInSetting(s.fadeInSeconds),a.fadeOut=at.ticksToFadeOutSetting(s.fadeOutTicks),a.transition=n.transitions.dictionary[s.transition].index,a.transition!=n.transitions.dictionary.normal.index&&(a.effects|=1024)}else if(c&&!r||s){const s=i[N(0,i.length,A[t.charCodeAt(e++)])],a=this.channels[E].instruments[C];a.fadeIn=at.secondsToFadeInSetting(s.fadeInSeconds),a.fadeOut=at.ticksToFadeOutSetting(s.fadeOutTicks),a.transition=n.transitions.dictionary[s.transition].index,a.transition!=n.transitions.dictionary.normal.index&&(a.effects|=1024)}else{const s=i[N(0,i.length,A[t.charCodeAt(e++)])],a=this.channels[E].instruments[C];a.fadeIn=at.secondsToFadeInSetting(s.fadeInSeconds),a.fadeOut=at.ticksToFadeOutSetting(s.fadeOutTicks),a.transition=n.transitions.dictionary[s.transition].index,A[t.charCodeAt(e++)]>0&&(a.legacyTieOver=!0),a.clicklessTransition=!!A[t.charCodeAt(e++)],(a.transition!=n.transitions.dictionary.normal.index||a.clicklessTransition)&&(a.effects|=1024)}}else{const i=this.channels[E].instruments[C];i.fadeIn=N(0,n.fadeInRange,A[t.charCodeAt(e++)]),i.fadeOut=N(0,n.fadeOutTicks.length,A[t.charCodeAt(e++)]),(a||r)&&(i.clicklessTransition=!!A[t.charCodeAt(e++)])}break;case 99:if(q&&s||a&&u||c&&r)if(P&&s)if(h&&s){const i=[0,3,2,0],s=["none","none","none","tremolo2"],a=A[t.charCodeAt(e++)],r=N(0,i.length,A[t.charCodeAt(e++)]),o=this.channels[a].instruments[0],l=D[a][0];o.vibrato=i[r],null!=l.filterEnvelope&&1!=l.filterEnvelope.type||(l.filterEnvelope=n.envelopes.dictionary[s[r]],o.convertLegacySettings(l,x)),o.vibrato!=n.vibratos.dictionary.none.index&&(o.effects|=512)}else if(F&&s){const i=[0,1,2,3,0,0],s=["none","none","none","none","tremolo5","tremolo2"];for(let o=0;o<this.getChannelCount();o++)for(let l=0;l<this.channels[o].instruments.length;l++){const h=N(0,i.length,A[t.charCodeAt(e++)]),f=this.channels[o].instruments[l],p=D[o][l];f.vibrato=i[h],null!=p.filterEnvelope&&1!=p.filterEnvelope.type||(p.filterEnvelope=n.envelopes.dictionary[s[h]],f.convertLegacySettings(p,x)),f.vibrato!=n.vibratos.dictionary.none.index&&(f.effects|=512),(0!=R||a&&u||c&&r)&&!this.getChannelIsNoise(o)&&(f.effects|=1,f.reverb=R)}}else{const i=[0,1,2,3,0,0],s=["none","none","none","none","tremolo5","tremolo2"],o=N(0,i.length,A[t.charCodeAt(e++)]),l=this.channels[E].instruments[C],h=D[E][C];l.vibrato=i[o],null!=h.filterEnvelope&&1!=h.filterEnvelope.type||(h.filterEnvelope=n.envelopes.dictionary[s[o]],l.convertLegacySettings(h,x)),l.vibrato!=n.vibratos.dictionary.none.index&&(l.effects|=512),(0!=R||a&&u||c&&r)&&(l.effects|=1,l.reverb=R)}else{const i=this.channels[E].instruments[C],s=N(0,n.vibratos.length+1,A[t.charCodeAt(e++)]);i.vibrato=s,i.vibrato!=n.vibratos.dictionary.none.index&&(i.effects|=512),s==n.vibratos.length?(i.vibratoDepth=N(0,n.modulators.dictionary["vibrato depth"].maxRawVol+1,A[t.charCodeAt(e++)])/25,i.vibratoSpeed=N(0,n.modulators.dictionary["vibrato speed"].maxRawVol+1,A[t.charCodeAt(e++)]),i.vibratoDelay=N(0,n.modulators.dictionary["vibrato delay"].maxRawVol+1,A[t.charCodeAt(e++)])/2,i.vibratoType=N(0,n.vibratoTypes.length,A[t.charCodeAt(e++)]),i.effects|=512):(i.vibratoDepth=n.vibratos[i.vibrato].amplitude,i.vibratoSpeed=10,i.vibratoDelay=n.vibratos[i.vibrato].delayTicks/2,i.vibratoType=n.vibratos[i.vibrato].type)}break;case 71:if(a&&u||c&&r){const i=this.channels[E].instruments[C];i.arpeggioSpeed=N(0,n.modulators.dictionary["arp speed"].maxRawVol+1,A[t.charCodeAt(e++)]),i.fastTwoNoteArp=!!A[t.charCodeAt(e++)]}break;case 104:if(h&&s){const i=A[t.charCodeAt(e++)];this.channels[i].instruments[0].unison=N(0,n.unisons.length,A[t.charCodeAt(e++)])}else if(F&&s)for(let i=0;i<this.getChannelCount();i++)for(const s of this.channels[i].instruments){const i=A[t.charCodeAt(e++)];let a=N(0,n.unisons.length,i);8==i&&(a=2,s.chord=3),s.unison=a}else if(P&&s){const i=A[t.charCodeAt(e++)];let s=N(0,n.unisons.length,i);8==i&&(s=2,this.channels[E].instruments[C].chord=3),this.channels[E].instruments[C].unison=s}else this.channels[E].instruments[C].unison=N(0,n.unisons.length,A[t.charCodeAt(e++)]);break;case 67:if(q&&s||a&&u||c&&r){const i=this.channels[E].instruments[C];i.chord=N(0,n.chords.length,A[t.charCodeAt(e++)]),i.chord!=n.chords.dictionary.simultaneous.index&&(i.effects|=2048)}break;case 113:{const i=this.channels[E].instruments[C];if(q&&s||a&&u||c&&r){i.effects=4095&A[t.charCodeAt(e++)],0!=R||a&&u||c&&r?k(i.effects)&&(i.reverb=R):i.effects&=-2,i.effects|=4,i.vibrato!=n.vibratos.dictionary.none.index&&(i.effects|=512),i.detune!=n.detuneCenter&&(i.effects|=256),i.effects&=-9;const s=D[E][C];i.convertLegacySettings(s,x)}else{if(i.effects=A[t.charCodeAt(e++)]<<6|A[t.charCodeAt(e++)],g(i.effects)){let o=A[t.charCodeAt(e++)];if(s||0==o){i.noteFilterType=!1,(a||r)&&(o=A[t.charCodeAt(e++)]),i.noteFilter.controlPointCount=N(0,n.filterMaxPoints+1,o);for(let t=i.noteFilter.controlPoints.length;t<i.noteFilter.controlPointCount;t++)i.noteFilter.controlPoints[t]=new J;for(let s=0;s<i.noteFilter.controlPointCount;s++){const a=i.noteFilter.controlPoints[s];a.type=N(0,3,A[t.charCodeAt(e++)]),a.freq=N(0,n.filterFreqRange,A[t.charCodeAt(e++)]),a.gain=N(0,n.filterGainRange,A[t.charCodeAt(e++)])}for(let t=i.noteFilter.controlPointCount;t<o;t++)e+=3;if(i.noteSubFilters[0]=i.noteFilter,a&&!u||r){let s=A[t.charCodeAt(e++)]<<6|A[t.charCodeAt(e++)];for(let a=0;a<n.filterMorphCount-1;a++)if(s&1<<a){const s=A[t.charCodeAt(e++)];null==i.noteSubFilters[a+1]&&(i.noteSubFilters[a+1]=new Q),i.noteSubFilters[a+1].controlPointCount=N(0,n.filterMaxPoints+1,s);for(let t=i.noteSubFilters[a+1].controlPoints.length;t<i.noteSubFilters[a+1].controlPointCount;t++)i.noteSubFilters[a+1].controlPoints[t]=new J;for(let s=0;s<i.noteSubFilters[a+1].controlPointCount;s++){const r=i.noteSubFilters[a+1].controlPoints[s];r.type=N(0,3,A[t.charCodeAt(e++)]),r.freq=N(0,n.filterFreqRange,A[t.charCodeAt(e++)]),r.gain=N(0,n.filterGainRange,A[t.charCodeAt(e++)])}for(let t=i.noteSubFilters[a+1].controlPointCount;t<s;t++)e+=3}}}else i.noteFilterType=!0,i.noteFilter.reset(),i.noteFilterSimpleCut=N(0,n.filterSimpleCutRange,A[t.charCodeAt(e++)]),i.noteFilterSimplePeak=N(0,n.filterSimplePeakRange,A[t.charCodeAt(e++)])}f(i.effects)&&(i.transition=N(0,n.transitions.length,A[t.charCodeAt(e++)])),p(i.effects)&&(i.chord=N(0,n.chords.length,A[t.charCodeAt(e++)]),i.chord==n.chords.dictionary.arpeggio.index&&(a||r)&&(i.arpeggioSpeed=A[t.charCodeAt(e++)],i.fastTwoNoteArp=!!A[t.charCodeAt(e++)])),d(i.effects)&&(i.pitchShift=N(0,n.pitchShiftRange,A[t.charCodeAt(e++)])),m(i.effects)&&(s?(i.detune=N(n.detuneMin,n.detuneMax+1,A[t.charCodeAt(e++)]),i.detune=Math.round((i.detune-9)*(Math.abs(i.detune-9)+1)/2+n.detuneCenter)):i.detune=N(n.detuneMin,n.detuneMax+1,(A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)])),y(i.effects)&&(i.vibrato=N(0,n.vibratos.length+1,A[t.charCodeAt(e++)]),i.vibrato==n.vibratos.length&&(a||r)?(i.vibratoDepth=N(0,n.modulators.dictionary["vibrato depth"].maxRawVol+1,A[t.charCodeAt(e++)])/25,i.vibratoSpeed=N(0,n.modulators.dictionary["vibrato speed"].maxRawVol+1,A[t.charCodeAt(e++)]),i.vibratoDelay=N(0,n.modulators.dictionary["vibrato delay"].maxRawVol+1,A[t.charCodeAt(e++)]),i.vibratoType=N(0,n.vibratoTypes.length,A[t.charCodeAt(e++)])):(i.vibratoDepth=n.vibratos[i.vibrato].amplitude,i.vibratoSpeed=10,i.vibratoDelay=n.vibratos[i.vibrato].delayTicks/2,i.vibratoType=n.vibratos[i.vibrato].type)),v(i.effects)&&(i.distortion=N(0,n.distortionRange,A[t.charCodeAt(e++)]),(a&&!u||r)&&(i.aliases=!!A[t.charCodeAt(e++)])),b(i.effects)&&(i.bitcrusherFreq=N(0,n.bitcrusherFreqRange,A[t.charCodeAt(e++)]),i.bitcrusherQuantization=N(0,n.bitcrusherQuantizationRange,A[t.charCodeAt(e++)])),M(i.effects)&&(i.pan=N(0,n.panMax+1,s?Math.round(A[t.charCodeAt(e++)]*(n.panMax/8)):(A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)]),(a&&!l||r)&&(i.panDelay=A[t.charCodeAt(e++)])),S(i.effects)&&(i.chorus=s?2*N(0,n.chorusRange/2+1,A[t.charCodeAt(e++)]):N(0,n.chorusRange,A[t.charCodeAt(e++)])),w(i.effects)&&(i.echoSustain=N(0,n.echoSustainRange,A[t.charCodeAt(e++)]),i.echoDelay=N(0,n.echoDelayRange,A[t.charCodeAt(e++)])),k(i.effects)&&(i.reverb=N(0,n.reverbRange,s?Math.round(A[t.charCodeAt(e++)]*n.reverbRange/3):A[t.charCodeAt(e++)]))}i.effects&=4095}break;case 118:if(h&&s){const i=A[t.charCodeAt(e++)];this.channels[i].instruments[0].volume=Math.round(N(-n.volumeRange/2,1,5*-A[t.charCodeAt(e++)]))}else if(F&&s)for(let i=0;i<this.getChannelCount();i++)for(const s of this.channels[i].instruments)s.volume=Math.round(N(-n.volumeRange/2,1,5*-A[t.charCodeAt(e++)]));else if(P&&s){this.channels[E].instruments[C].volume=Math.round(N(-n.volumeRange/2,1,5*-A[t.charCodeAt(e++)]))}else if(s){this.channels[E].instruments[C].volume=Math.round(N(-n.volumeRange/2,1,25*-A[t.charCodeAt(e++)]/7))}else{this.channels[E].instruments[C].volume=Math.round(N(-n.volumeRange/2,n.volumeRange/2+1,(A[t.charCodeAt(e++)]<<6|A[t.charCodeAt(e++)])-n.volumeRange/2))}break;case 76:if(q&&s){this.channels[E].instruments[C].pan=N(0,n.panMax+1,A[t.charCodeAt(e++)]*(n.panMax/8))}else if(a&&u||c&&r){const i=this.channels[E].instruments[C];i.pan=N(0,n.panMax+1,(A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)]),(a&&!h||r)&&(i.panDelay=A[t.charCodeAt(e++)])}break;case 68:{const i=this.channels[E].instruments[C];(a&&u||c&&r)&&(i.detune=N(n.detuneMin,n.detuneMax+1,4*((A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)])),i.effects|=256)}break;case 77:{let n=this.channels[E].instruments[C];for(let i=0;i<64;i++)n.customChipWave[i]=N(-24,25,A[t.charCodeAt(e++)]-24);let i=0;for(let t=0;t<n.customChipWave.length;t++)i+=n.customChipWave[t];const s=i/n.customChipWave.length;let a=0,r=0;for(let t=0;t<n.customChipWave.length;t++)a+=r,r=n.customChipWave[t]-s,n.customChipWaveIntegral[t]=a;n.customChipWaveIntegral[64]=0}break;case 79:{let n=A[t.charCodeAt(e++)];63==n?this.restoreLimiterDefaults():(this.compressionRatio=n<10?n/10:1+(n-10)/60,n=A[t.charCodeAt(e++)],this.limitRatio=n<10?n/10:n-9,this.limitDecay=A[t.charCodeAt(e++)],this.limitRise=250*A[t.charCodeAt(e++)]+2e3,this.compressionThreshold=A[t.charCodeAt(e++)]/20,this.limitThreshold=A[t.charCodeAt(e++)]/20,this.masterGain=((A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)])/50)}break;case 85:for(let n=0;n<this.getChannelCount();n++){var U;U=c&&!r?A[t.charCodeAt(e++)]:(A[t.charCodeAt(e++)]<<6)+A[t.charCodeAt(e++)],this.channels[n].name=decodeURIComponent(t.substring(e,e+U)),e+=U}break;case 65:{const i=this.channels[E].instruments[C];if(1==i.type)i.algorithm=N(0,n.algorithms.length,A[t.charCodeAt(e++)]);else if(i.algorithm6Op=N(0,n.algorithms6Op.length,A[t.charCodeAt(e++)]),i.customAlgorithm.fromPreset(i.algorithm6Op),67==t.charCodeAt(e)){let s=N(0,n.operatorCount+2,A[t.charCodeAt(e+1)]);e++,console.log(s);let a=[];if(113==t.charCodeAt(e+1)){e++;let r=0;for(e++;113!=t.charCodeAt(e);){a[r]=[];let i=0;for(;82!=t.charCodeAt(e);)a[r][i]=N(1,n.operatorCount+3,A[t.charCodeAt(e)]),i++,e++;r++,e++}i.customAlgorithm.set(s,a),e++}}if(q&&s||u&&a||c&&r){const t=D[E][C];i.convertLegacySettings(t,x)}}break;case 70:{const i=this.channels[E].instruments[C];if(1==i.type)i.feedbackType=N(0,n.feedbacks.length,A[t.charCodeAt(e++)]);else{i.feedbackType6Op=N(0,n.feedbacks6Op.length,A[t.charCodeAt(e++)]),i.customFeedbackType.fromPreset(i.feedbackType6Op);let s=[];if(113==t.charCodeAt(e)){let a=0;for(e++;113!=t.charCodeAt(e);){s[a]=[];let i=0;for(;82!=t.charCodeAt(e);)s[a][i]=N(1,n.operatorCount+2,A[t.charCodeAt(e)]),i++,e++;a++,e++}i.customFeedbackType.set(s),e++}}}break;case 66:this.channels[E].instruments[C].feedbackAmplitude=N(0,n.operatorAmplitudeMax+1,A[t.charCodeAt(e++)]);break;case 86:if(q&&s||u&&a||c&&r){const n=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11],i=this.channels[E].instruments[C],s=D[E][C];let a=A[t.charCodeAt(e++)];(l&&r||!r)&&(a=n[a]),s.feedbackEnvelope=X.T(A[a]),i.convertLegacySettings(s,x)}break;case 81:{const i=this.channels[E].instruments[C];if(h&&r||!r){const s=[4,5,6,7,8,10,12,13,14,15,16,18,20,22,24,2,1,9,17,19,21,23,0,3];for(let a=0;a<(10==i.type?6:n.operatorCount);a++)i.operators[a].frequency=s[N(0,s.length,A[t.charCodeAt(e++)])]}else for(let s=0;s<(10==i.type?6:n.operatorCount);s++)i.operators[s].frequency=N(0,n.operatorFrequencies.length,A[t.charCodeAt(e++)])}break;case 80:{const i=this.channels[E].instruments[C];for(let s=0;s<(10==i.type?6:n.operatorCount);s++)i.operators[s].amplitude=N(0,n.operatorAmplitudeMax+1,A[t.charCodeAt(e++)])}break;case 69:{const i=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11],o=this.channels[E].instruments[C];if(q&&s||u&&a||c&&r){const s=D[E][C];s.operatorEnvelopes=[];for(let a=0;a<(10==o.type?6:n.operatorCount);a++){let n=A[t.charCodeAt(e++)];(l&&r||!r)&&(n=i[n]),s.operatorEnvelopes[a]=X.T(n)}o.convertLegacySettings(s,x)}else{const s=N(0,n.maxEnvelopeCount+1,A[t.charCodeAt(e++)]);for(let a=0;a<s;a++){const s=N(0,n.instrumentAutomationTargets.length,A[t.charCodeAt(e++)]);let a=0;const h=n.instrumentAutomationTargets[s].maxCount;h>1&&(a=N(0,h,A[t.charCodeAt(e++)]));let c=A[t.charCodeAt(e++)];(l&&r||!r)&&(c=i[c]);const u=N(0,n.envelopes.length,c);o.addEnvelope(s,a,u)}}}break;case 82:{const i=this.channels[E].instruments[C];if(h&&r)for(let s=0;s<n.operatorCount;s++){const n=[0,1,3,2,2,2,4,5],a=N(0,n.length,A[t.charCodeAt(e++)]);3==a?i.operators[s].pulseWidth=5:4==a?i.operators[s].pulseWidth=4:5==a&&(i.operators[s].pulseWidth=6),i.operators[s].waveform=n[a]}else for(let s=0;s<(10==i.type?6:n.operatorCount);s++){if(a){const a=[0,1,3,2,4,5];i.operators[s].waveform=a[N(0,n.operatorWaves.length,A[t.charCodeAt(e++)])]}else i.operators[s].waveform=N(0,n.operatorWaves.length,A[t.charCodeAt(e++)]);2==i.operators[s].waveform&&(i.operators[s].pulseWidth=N(0,n.pwmOperatorWaves.length,A[t.charCodeAt(e++)]))}}break;case 83:{const i=this.channels[E].instruments[C];if(3==i.type){const s=Math.ceil(n.spectrumControlPoints*n.spectrumControlPointBits/6),a=new L(t,e,e+s);for(let t=0;t<n.spectrumControlPoints;t++)i.spectrumWave.spectrum[t]=a.read(n.spectrumControlPointBits);i.spectrumWave.markCustomWaveDirty(),e+=s}else{if(4!=i.type)throw new Error("Unhandled instrument type for spectrum song tag code.");{const s=Math.ceil(n.drumCount*n.spectrumControlPoints*n.spectrumControlPointBits/6),a=new L(t,e,e+s);for(let t=0;t<n.drumCount;t++){for(let e=0;e<n.spectrumControlPoints;e++)i.drumsetSpectrumWaves[t].spectrum[e]=a.read(n.spectrumControlPointBits);i.drumsetSpectrumWaves[t].markCustomWaveDirty()}e+=s}}}break;case 72:{const i=this.channels[E].instruments[C],s=Math.ceil(n.harmonicsControlPoints*n.harmonicsControlPointBits/6),a=new L(t,e,e+s);for(let t=0;t<n.harmonicsControlPoints;t++)i.harmonicsWave.harmonics[t]=a.read(n.harmonicsControlPointBits);i.harmonicsWave.markCustomWaveDirty(),e+=s}break;case 88:if(a&&u||r&&c){const n=this.channels[E].instruments[C];n.aliases=!!A[t.charCodeAt(e++)],n.aliases&&(n.distortion=0,n.effects|=8)}break;case 98:{let n;if(h&&s){const i=A[t.charCodeAt(e++)],s=A[t.charCodeAt(e++)];n=Math.ceil(.5*s);const a=new L(t,e,e+n);for(let t=0;t<s;t++)this.channels[i].bars[t]=a.read(3)+1}else if(u&&s){let i=0;for(;1<<i<this.patternsPerChannel;)i++;n=Math.ceil(this.getChannelCount()*this.barCount*i/6);const s=new L(t,e,e+n);for(let t=0;t<this.getChannelCount();t++)for(let e=0;e<this.barCount;e++)this.channels[t].bars[e]=s.read(i)+1}else{let i=0;for(;1<<i<this.patternsPerChannel+1;)i++;n=Math.ceil(this.getChannelCount()*this.barCount*i/6);const s=new L(t,e,e+n);for(let t=0;t<this.getChannelCount();t++)for(let e=0;e<this.barCount;e++)this.channels[t].bars[e]=s.read(i)}e+=n}break;case 112:{let i,o=0,l=!(c&&a||s),f=l?4:3,p=l?16:8;if(h&&s)i=A[t.charCodeAt(e++)],e++,o=A[t.charCodeAt(e++)],o<<=6,o+=A[t.charCodeAt(e++)];else{i=0;let n=G(1,4,A[t.charCodeAt(e++)]);for(;n>0;)o<<=6,o+=A[t.charCodeAt(e++)],n--}const d=new L(t,e,e+o);e+=o;const m=X.getNeededBits(n.noteSizeMax);let y=-1,v=-1,b=-1;for(;;){const t=this.channels[i],e=this.getChannelIsNoise(i),o=this.getChannelIsMod(i),M=this.getMaxInstrumentsPerPattern(i),S=X.getNeededBits(M-n.instrumentCountMin),w=X.getNeededBits(t.instruments.length-1);if(o){let e=u&&a||c&&r;const s=e?w:X.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let a=0;a<t.instruments.length;a++){let r=t.instruments[a];for(let t=0;t<n.modCount;t++){let o=d.read(2);switch(o){case 0:r.modChannels[t]=N(0,this.pitchChannelCount+this.noiseChannelCount+1,d.read(8)),r.modInstruments[t]=N(0,this.channels[r.modChannels[t]].instruments.length+2,d.read(s));break;case 1:r.modChannels[t]=this.pitchChannelCount+N(0,this.noiseChannelCount+1,d.read(8)),r.modInstruments[t]=N(0,this.channels[r.modChannels[t]].instruments.length+2,d.read(w));break;case 2:r.modChannels[t]=-1;break;case 3:r.modChannels[t]=-2}if(3!=o&&(r.modulators[t]=d.read(6)),e||"eq filter"!=n.modulators[r.modulators[t]].name&&"note filter"!=n.modulators[r.modulators[t]].name||(r.modFilterTypes[t]=d.read(6)),e&&r.modChannels[t]>=0){let e=g(this.channels[r.modChannels[t]].instruments[r.modInstruments[t]].effects);7==r.modulators[t]?(r.modulators[t]=e?n.modulators.dictionary["note filt cut"].index:n.modulators.dictionary["eq filt cut"].index,r.modFilterTypes[t]=1):8==r.modulators[t]&&(r.modulators[t]=e?n.modulators.dictionary["note filt peak"].index:n.modulators.dictionary["eq filt peak"].index,r.modFilterTypes[t]=2)}else e&&r.modulators[t]==n.modulators.dictionary["song reverb"].index&&(y=i,v=a,b=t);e&&12!=n.modulators[r.modulators[t]].associatedEffect&&(this.channels[r.modChannels[t]].instruments[r.modInstruments[t]].effects|=1<<n.modulators[r.modulators[t]].associatedEffect)}}}const k=[];for(let e=0;e<t.instruments.length;e++){k[e]=[];for(let i=0;i<n.modCount;i++)k[e][n.modCount-1-i]=1+3*+((u&&a||c&&r)&&o&&t.instruments[e].modulators[i]==n.modulators.dictionary.detune.index)}const I=e||o?0:12*t.octave;let F=e||o?4:I;const T=o?[0,1,2,3,4,5]:e?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],x=[];for(let t=0;t<T.length;t++)T[t]+=I;for(let e=0;e<this.patternsPerChannel;e++){const i=t.patterns[e];if(q&&s||u&&a||c&&r)i.instruments[0]=G(0,t.instruments.length-1,d.read(w)),i.instruments.length=1;else if(this.patternInstruments){const e=G(n.instrumentCountMin,M,d.read(S)+n.instrumentCountMin);for(let n=0;n<e;n++)i.instruments[n]=G(0,t.instruments.length-1+2*+o,d.read(w));i.instruments.length=e}else i.instruments[0]=0,i.instruments.length=n.instrumentCountMin;if(!(s&&h||0!=d.read(1))){i.notes.length=0;continue}let y=0;const g=i.notes;let v=0;for(;y<this.beatsPerBar*n.partsPerBeat+ +o;){const e=1==d.read(1);let h=!1,b=0;if(e?b=G(0,x.length-1,d.readLongTail(0,0)):h=1==d.read(1),e||h){let h,M,S;if(e)h=x[b],x.splice(b,1);else{if(h={},l)1==d.read(1)?h.pitchCount=d.read(3)+2:h.pitchCount=1;else for(h.pitchCount=1;h.pitchCount<4&&1==d.read(1);)h.pitchCount++;h.pinCount=d.readPinCount(),h.initialSize=s?2*d.read(2):o?d.read(9):d.read(m),h.pins=[],h.length=0,h.bendCount=0;for(let t=0;t<h.pinCount;t++){let t={};t.pitchBend=1==d.read(1),t.pitchBend&&h.bendCount++,h.length+=P&&s?d.readLegacyPartDuration()*n.partsPerBeat/n.rhythms[this.rhythm].stepsPerBeat:d.readPartDuration(),t.time=h.length,t.size=s?2*d.read(2):o?d.read(9):d.read(m),h.pins.push(t)}}x.unshift(h),x.length>10&&x.pop(),g.length<=v?(M=new V(0,y,y+h.length,h.initialSize),g[v++]=M):(M=g[v++],M.start=y,M.end=y+h.length,M.pins[0].size=h.initialSize);let w=0;const I=[];for(let t=0;t<h.pitchCount+h.bendCount;t++){if(1==d.read(1)){const t=G(0,T.length-1,d.read(f));S=T[t],T.splice(t,1)}else{const t=d.readPitchInterval();S=F;let e=t;for(;e>0;){for(S++;-1!=T.indexOf(S);)S++;e--}for(;e<0;){for(S--;-1!=T.indexOf(S);)S--;e++}}T.unshift(S),T.length>p&&T.pop(),t<h.pitchCount?M.pitches[w++]=S:I.push(S),F=t==h.pitchCount-1?M.pitches[0]:S}M.pitches.length=w,I.unshift(M.pitches[0]),o&&(M.pins[0].size*=k[i.instruments[0]][M.pitches[0]]);let D=1;for(const t of h.pins){t.pitchBend&&I.shift();const e=I[0]-M.pitches[0];if(M.pins.length<=D)M.pins[D++]=H(e,t.time,o?t.size*k[i.instruments[0]][M.pitches[0]]:t.size);else{const n=M.pins[D++];n.interval=e,n.time=t.time,n.size=o?t.size*k[i.instruments[0]][M.pitches[0]]:t.size}}M.pins.length=D,0==M.start&&(M.continuesLastPattern=q&&s||u&&a||c&&r?!c&&!s&&t.instruments[i.instruments[0]].legacyTieOver:1==d.read(1)),y=G(0,this.beatsPerBar*n.partsPerBeat,M.end)}else if(o){const t=1==d.read(1),e=d.readPartDuration();t?y-=e:y+=e}else{y+=P&&s?d.readLegacyPartDuration()*n.partsPerBeat/n.rhythms[this.rhythm].stepsPerBeat:d.readPartDuration()}}g.length=v}if(h&&s)break;if(i++,i>=this.getChannelCount())break}if((a&&u||c&&r)&&b>=0)for(let t=0;t<this.channels.length;t++)for(let e=0;e<this.channels[t].instruments.length;e++){const i=this.channels[t].instruments[e];if(k(i.effects)&&(i.reverb=n.reverbRange-1),y==t&&v==e){const e=this.channels[t].bars[0];if(e>0){const i=this.channels[t].patterns[e-1];let s=6;for(const t of i.notes)t.pitches[0]==n.modCount-1-b&&(s=Math.min(s,t.start));s>0&&i.notes.push(new V(n.modCount-1-b,0,s,R))}else if(this.channels[t].patterns.length<n.barCountMax){const e=new B;if(this.channels[t].patterns.push(e),this.channels[t].bars[0]=this.channels[t].patterns.length,this.channels[t].patterns.length>this.patternsPerChannel){for(let t=0;t<this.channels.length;t++)this.channels[t].patterns.length<=this.patternsPerChannel&&this.channels[t].patterns.push(new B);this.patternsPerChannel++}e.instruments.length=1,e.instruments[0]=v,e.notes.length=0,e.notes.push(new V(n.modCount-1-b,0,6,R))}}}}break;default:throw new Error("Unrecognized song tag code "+String.fromCharCode(O)+" at index "+(e-1)+" "+t.substring(0,e))}}toJsonObject(t=!0,e=1,i=!0){const s=[];for(let a=0;a<this.getChannelCount();a++){const r=this.channels[a],o=[],l=this.getChannelIsNoise(a),h=this.getChannelIsMod(a);for(const t of r.instruments)o.push(t.toJsonObject());const c=[];for(const t of r.patterns){const e=[];for(const i of t.notes){let s=r.instruments[t.instruments[0]],a=Math.max(0,n.modCount-i.pitches[0]-1),o=this.getVolumeCapForSetting(h,s.modulators[a],s.modFilterTypes[a]);const l=[];for(const t of i.pins){let e=h?Math.round(t.size):Math.round(100*t.size/o);l.push({tick:(t.time+i.start)*n.rhythms[this.rhythm].stepsPerBeat/n.partsPerBeat,pitchBend:t.interval,volume:e,forMod:h})}const c={pitches:i.pitches,points:l};0==i.start&&(c.continuesLastPattern=i.continuesLastPattern),e.push(c)}const i={notes:e};this.patternInstruments&&(i.instruments=t.instruments.map((t=>t+1))),c.push(i)}const u=[];if(t)for(let t=0;t<this.loopStart;t++)u.push(r.bars[t]);for(let t=0;t<e;t++)for(let t=this.loopStart;t<this.loopStart+this.loopLength;t++)u.push(r.bars[t]);if(i)for(let t=this.loopStart+this.loopLength;t<this.barCount;t++)u.push(r.bars[t]);const f={type:h?"mod":l?"drum":"pitch",name:r.name,instruments:o,patterns:c,sequence:u};l||(f.octaveScrollBar=r.octave-1),s.push(f)}return{name:this.title,format:X.N,version:X.P,scale:n.scales[this.scale].name,customScale:this.scaleCustom,key:n.keys[this.key].name,introBars:this.loopStart,loopBars:this.loopLength,beatsPerBar:this.beatsPerBar,ticksPerBeat:n.rhythms[this.rhythm].stepsPerBeat,beatsPerMinute:this.tempo,reverb:this.reverb,masterGain:this.masterGain,compressionThreshold:this.compressionThreshold,limitThreshold:this.limitThreshold,limitDecay:this.limitDecay,limitRise:this.limitRise,limitRatio:this.limitRatio,compressionRatio:this.compressionRatio,layeredInstruments:this.layeredInstruments,patternInstruments:this.patternInstruments,channels:s}}fromJsonObject(t){if(this.initToDefault(!0),!t)return;if(null!=t.name&&(this.title=t.name),this.scale=0,null!=t.scale){const i={"romani :)":"dbl harmonic :)","romani :(":"dbl harmonic :(",enigma:"strange"},s=null!=i[t.scale]?i[t.scale]:t.scale,a=n.scales.findIndex((t=>t.name==s));if(-1!=a&&(this.scale=a),this.scale==n.scales.dictionary.Custom.index&&null!=t.customScale)for(var e of t.customScale.keys())this.scaleCustom[e]=t.customScale[e]}if(null!=t.key)if("number"==typeof t.key)this.key=(t.key+1200>>>0)%n.keys.length;else if("string"==typeof t.key){const e=t.key,n=e.charAt(0).toUpperCase(),i=e.charAt(1).toLowerCase();let s={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[n];const a={"#":1,"♯":1,b:-1,"♭":-1}[i];null!=s&&(null!=a&&(s+=a),s<0&&(s+=12),s%=12,this.key=s)}null!=t.beatsPerMinute&&(this.tempo=N(n.tempoMin,n.tempoMax+1,0|t.beatsPerMinute));let i=0;null!=t.reverb&&(i=N(0,32,0|t.reverb)),null!=t.beatsPerBar&&(this.beatsPerBar=Math.max(n.beatsPerBarMin,Math.min(n.beatsPerBarMax,0|t.beatsPerBar)));let s=4;null!=t.ticksPerBeat&&(s=0|t.ticksPerBeat||4,this.rhythm=n.rhythms.findIndex((t=>t.stepsPerBeat==s)),-1==this.rhythm&&(this.rhythm=1)),null!=t.masterGain?this.masterGain=Math.max(0,Math.min(5,t.masterGain||0)):this.masterGain=1,null!=t.limitThreshold?this.limitThreshold=Math.max(0,Math.min(2,t.limitThreshold||0)):this.limitThreshold=1,null!=t.compressionThreshold?this.compressionThreshold=Math.max(0,Math.min(1.1,t.compressionThreshold||0)):this.compressionThreshold=1,null!=t.limitRise?this.limitRise=Math.max(2e3,Math.min(1e4,t.limitRise||0)):this.limitRise=4e3,null!=t.limitDecay?this.limitDecay=Math.max(1,Math.min(30,t.limitDecay||0)):this.limitDecay=4,null!=t.limitRatio?this.limitRatio=Math.max(0,Math.min(11,t.limitRatio||0)):this.limitRatio=1,null!=t.compressionRatio?this.compressionRatio=Math.max(0,Math.min(1.168,t.compressionRatio||0)):this.compressionRatio=1;let a=1,r=1,o=1;if(null!=t.channels)for(const e of t.channels)e.instruments&&(a=Math.max(a,0|e.instruments.length)),e.patterns&&(r=Math.max(r,0|e.patterns.length)),e.sequence&&(o=Math.max(o,0|e.sequence.length));null!=t.layeredInstruments?this.layeredInstruments=!!t.layeredInstruments:this.layeredInstruments=!1,null!=t.patternInstruments?this.patternInstruments=!!t.patternInstruments:this.patternInstruments=a>1,this.patternsPerChannel=Math.min(r,n.barCountMax),this.barCount=Math.min(o,n.barCountMax),null!=t.introBars&&(this.loopStart=N(0,this.barCount,0|t.introBars)),null!=t.loopBars&&(this.loopLength=N(1,this.barCount-this.loopStart+1,0|t.loopBars));const l=[],h=[],c=[];if(null!=t.channels)for(let e=0;e<t.channels.length;e++){let a=t.channels[e];const r=new Y;let o=!1,u=!1;if(null!=a.type?(o="drum"==a.type,u="mod"==a.type):o=e>=3,o?h.push(r):u?c.push(r):l.push(r),null!=a.octaveScrollBar&&(r.octave=N(0,n.pitchOctaves,1+(0|a.octaveScrollBar)),o&&(r.octave=0)),null!=a.name?r.name=a.name:r.name="",Array.isArray(a.instruments)){const t=a.instruments;for(let e=0;e<t.length&&!(e>=this.getMaxInstrumentsPerChannel());e++){const n=new Z(o,u);r.instruments[e]=n,n.fromJsonObject(t[e],o,u,!1,!1,i)}}for(let t=0;t<this.patternsPerChannel;t++){const e=new B;r.patterns[t]=e;let i=void 0;if(a.patterns&&(i=a.patterns[t]),null!=i){if(this.patternInstruments)if(Array.isArray(i.instruments)){const t=i.instruments,s=N(n.instrumentCountMin,this.getMaxInstrumentsPerPatternForChannel(r)+1,t.length);for(let n=0;n<s;n++)e.instruments[n]=N(0,r.instruments.length,(0|t[n])-1);e.instruments.length=s}else e.instruments[0]=N(0,r.instruments.length,(0|i.instrument)-1),e.instruments.length=1;if(i.notes&&i.notes.length>0){const t=Math.min(this.beatsPerBar*n.partsPerBeat*(u?n.modCount:1),i.notes.length>>>0);for(let a=0;a<i.notes.length&&!(a>=t);a++){const t=i.notes[a];if(!(t&&t.pitches&&t.pitches.length>=1&&t.points&&t.points.length>=2))continue;const l=new V(0,0,0,0);l.pitches=[],l.pins=[];for(let e=0;e<t.pitches.length;e++){const i=0|t.pitches[e];if(-1==l.pitches.indexOf(i)&&(l.pitches.push(i),l.pitches.length>=n.maxChordSize))break}if(l.pitches.length<1)continue;let h=0;for(let i=0;i<t.points.length;i++){const a=t.points[i];if(null==a||null==a.tick)continue;const o=null==a.pitchBend?0:0|a.pitchBend,c=Math.round(+a.tick*n.partsPerBeat/s);let f,p=r.instruments[e.instruments[0]],d=Math.max(0,n.modCount-l.pitches[0]-1),m=this.getVolumeCapForSetting(u,p.modulators[d],p.modFilterTypes[d]);f=null==a.volume?m:null==a.forMod?Math.max(0,Math.min(m,Math.round((0|a.volume)*m/100))):(0|a.forMod)>0?Math.round(0|a.volume):Math.max(0,Math.min(m,Math.round((0|a.volume)*m/100))),c>this.beatsPerBar*n.partsPerBeat||(0==l.pins.length&&(l.start=c,h=o),l.pins.push(H(o-h,c-l.start,f)))}if(l.pins.length<2)continue;l.end=l.pins[l.pins.length-1].time+l.start;const c=o?n.drumCount-1:n.maxPitch;let f=c,p=0;for(let t=0;t<l.pitches.length;t++)l.pitches[t]+=h,(l.pitches[t]<0||l.pitches[t]>c)&&(l.pitches.splice(t,1),t--),l.pitches[t]<f&&(f=l.pitches[t]),l.pitches[t]>p&&(p=l.pitches[t]);if(!(l.pitches.length<1)){for(let t=0;t<l.pins.length;t++){const e=l.pins[t];e.interval+f<0&&(e.interval=-f),e.interval+p>c&&(e.interval=c-p),t>=2&&e.interval==l.pins[t-1].interval&&e.interval==l.pins[t-2].interval&&e.size==l.pins[t-1].size&&e.size==l.pins[t-2].size&&(l.pins.splice(t-1,1),t--)}0==l.start?l.continuesLastPattern=!0===t.continuesLastPattern:l.continuesLastPattern=!1,e.notes.push(l)}}}}}r.patterns.length=this.patternsPerChannel;for(let t=0;t<this.barCount;t++)r.bars[t]=null!=a.sequence?Math.min(this.patternsPerChannel,a.sequence[t]>>>0):0;r.bars.length=this.barCount}l.length>n.pitchChannelCountMax&&(l.length=n.pitchChannelCountMax),h.length>n.noiseChannelCountMax&&(h.length=n.noiseChannelCountMax),c.length>n.modChannelCountMax&&(c.length=n.modChannelCountMax),this.pitchChannelCount=l.length,this.noiseChannelCount=h.length,this.modChannelCount=c.length,this.channels.length=0,Array.prototype.push.apply(this.channels,l),Array.prototype.push.apply(this.channels,h),Array.prototype.push.apply(this.channels,c)}getPattern(t,e){if(e<0||e>=this.barCount)return null;const n=this.channels[t].bars[e];return 0==n?null:this.channels[t].patterns[n-1]}getBeatsPerMinute(){return this.tempo}static getNeededBits(t){return 32-Math.clz32(Math.ceil(t+1)-1)}restoreLimiterDefaults(){this.compressionRatio=1,this.limitRatio=1,this.limitRise=4e3,this.limitDecay=4,this.limitThreshold=1,this.compressionThreshold=1,this.masterGain=1}}X.N="BeepBox",X.O=2,X.q=9,X.L=1,X.R=5,X.H=1,X.P=4,X.I=103;class tt{constructor(){this.delayLine=null,this.reset()}reset(){this.delayIndex=-1,this.allPassSample=0,this.allPassPrevInput=0,this.shelfSample=0,this.shelfPrevInput=0,this.fractionalDelaySample=0,this.prevDelayLength=-1,this.delayResetOffset=0}}class et{constructor(){this.noteSecondsStart=0,this.noteSecondsEnd=0,this.noteTicksStart=0,this.noteTicksEnd=0,this.noteSizeStart=n.noteSizeMax,this.noteSizeEnd=n.noteSizeMax,this.prevNoteSize=n.noteSizeMax,this.nextNoteSize=n.noteSizeMax,this.V=n.noteSizeMax,this.prevNoteSecondsStart=0,this.prevNoteSecondsEnd=0,this.prevNoteTicksStart=0,this.prevNoteTicksEnd=0,this.$=n.noteSizeMax,this.prevSlideStart=!1,this.prevSlideEnd=!1,this.nextSlideStart=!1,this.nextSlideEnd=!1,this.prevSlideRatioStart=0,this.prevSlideRatioEnd=0,this.nextSlideRatioStart=0,this.nextSlideRatioEnd=0,this.envelopeStarts=[],this.envelopeEnds=[],this.lowpassCutoffDecayVolumeCompensation=1;for(let t=0;t<33;t++)this.envelopeStarts[t]=1,this.envelopeEnds[t]=1;this.reset()}reset(){this.noteSecondsEnd=0,this.noteTicksEnd=0,this.V=n.noteSizeMax,this.prevNoteSecondsEnd=0,this.prevNoteTicksEnd=0,this.$=n.noteSizeMax}computeEnvelopes(t,e,i,s,a,r){const o=t.getTransition();null==r||!r.atNoteStart||o.continues||r.forceContinueAtStart||(this.prevNoteSecondsEnd=this.noteSecondsEnd,this.prevNoteTicksEnd=this.noteTicksEnd,this.$=this.V,this.noteSecondsEnd=0,this.noteTicksEnd=0),null!=r&&(null!=r.note?this.V=r.note.pins[r.note.pins.length-1].size:this.V=n.noteSizeMax);const l=s-i,h=this.noteSecondsEnd,c=h+a,u=this.noteTicksEnd,f=u+l,p=this.prevNoteSecondsEnd,d=p+a,m=this.prevNoteTicksEnd,y=m+l,g=1/(n.ticksPerPart*n.partsPerBeat),v=g*i,b=g*s;let M=this.V,S=this.V,w=this.$,k=0,I=!1,F=!1,P=!1,T=!1,q=0,x=0,D=0,O=0;if(null!=r&&null!=r.note&&!r.passedEndOfNote){const t=r.note.getEndPinIndex(e),a=r.note.pins[t-1],l=r.note.pins[t],h=(r.note.start+a.time)*n.ticksPerPart,c=(r.note.start+l.time)*n.ticksPerPart,u=(i-h)/(c-h),f=(s-h)/(c-h);if(M=a.size+(l.size-a.size)*u,S=a.size+(l.size-a.size)*f,o.slides){const t=r.noteStartPart*n.ticksPerPart,e=r.noteEndPart*n.ticksPerPart,a=.5*(e-t),l=Math.min(a,o.slideTicks);null==r.prevNote||r.forceContinueAtStart||(i-t<l&&(I=!0,q=.5*(1-(i-t)/l)),s-t<l&&(F=!0,x=.5*(1-(s-t)/l))),null==r.nextNote||r.forceContinueAtEnd||(k=r.nextNote.pins[0].size,e-i<l&&(P=!0,D=.5*(1-(e-i)/l)),e-s<l&&(T=!0,O=.5*(1-(e-s)/l)))}}let R=1,E=!1;for(let e=0;e<=t.envelopeCount;e++){let i,s,a;if(e==t.envelopeCount){if(E)break;i=n.instrumentAutomationTargets.dictionary.noteVolume,s=0,a=n.envelopes.dictionary["note size"]}else{let r=t.envelopes[e];i=n.instrumentAutomationTargets[r.target],s=r.index,a=n.envelopes[r.envelope],0==a.type&&(E=!0)}if(null!=i.computeIndex){const e=i.computeIndex+s;let n=et.computeEnvelope(a,h,v,M),r=et.computeEnvelope(a,c,b,S);if(I){n+=(et.computeEnvelope(a,p,v,w)-n)*q}if(F){r+=(et.computeEnvelope(a,d,b,w)-r)*x}if(P){n+=(et.computeEnvelope(a,0,v,k)-n)*D}if(T){r+=(et.computeEnvelope(a,0,b,k)-r)*O}if(this.envelopeStarts[e]*=n,this.envelopeEnds[e]*=r,i.isFilter){const e=null!=t.tmpNoteFilterStart?t.tmpNoteFilterStart:t.noteFilter;e.controlPointCount>s&&0==e.controlPoints[s].type&&(R=Math.max(R,et.getLowpassCutoffDecayVolumeCompensation(a)))}}}this.noteSecondsStart=h,this.noteSecondsEnd=c,this.noteTicksStart=u,this.noteTicksEnd=f,this.prevNoteSecondsStart=p,this.prevNoteSecondsEnd=d,this.prevNoteTicksStart=m,this.prevNoteTicksEnd=y,this.prevNoteSize=w,this.nextNoteSize=k,this.noteSizeStart=M,this.noteSizeEnd=S,this.prevSlideStart=I,this.prevSlideEnd=F,this.nextSlideStart=P,this.nextSlideEnd=T,this.prevSlideRatioStart=q,this.prevSlideRatioEnd=x,this.nextSlideRatioStart=D,this.nextSlideRatioEnd=O,this.lowpassCutoffDecayVolumeCompensation=R}clearEnvelopes(t){for(let e=0;e<t.envelopeCount;e++){const i=t.envelopes[e],s=n.instrumentAutomationTargets[i.target];if(null!=s.computeIndex){const t=s.computeIndex+i.index;this.envelopeStarts[t]=1,this.envelopeEnds[t]=1}}this.envelopeStarts[0]=1,this.envelopeEnds[0]=1}static computeEnvelope(t,e,n,i){switch(t.type){case 0:return at.noteSizeToVolumeMult(i);case 1:return 1;case 4:return 1/(1+e*t.speed);case 5:return 1-1/(1+e*t.speed);case 6:return.5-.5*Math.cos(2*n*Math.PI*t.speed);case 7:return.75-.25*Math.cos(2*n*Math.PI*t.speed);case 2:return Math.max(1,2-10*e);case 3:const s=.25/Math.sqrt(t.speed);return e<s?e/s:1/(1+(e-s)*t.speed);case 8:return Math.pow(2,-t.speed*e);case 9:let a=.5-.5*Math.cos(n*t.speed);return a=1/(1+e*(t.speed-a/(1.5/t.speed))),a=a>0?a:0,a;case 11:{let n=1-e/(16/t.speed);return n=n>0?n:0,n}case 12:{let n=e/(16/t.speed);return n=n<1?n:1,n}default:throw new Error("Unrecognized operator envelope type.")}}static getLowpassCutoffDecayVolumeCompensation(t){return 8==t.type?1.25+.025*t.speed:4==t.type?1+.02*t.speed:1}}class nt{constructor(){this.pitches=Array(n.maxChordSize+2).fill(0),this.pitchCount=0,this.chordSize=0,this.drumsetPitch=null,this.note=null,this.prevNote=null,this.nextNote=null,this.prevNotePitchIndex=0,this.nextNotePitchIndex=0,this.freshlyAllocated=!0,this.atNoteStart=!1,this.isOnLastTick=!1,this.passedEndOfNote=!1,this.forceContinueAtStart=!1,this.forceContinueAtEnd=!1,this.noteStartPart=0,this.noteEndPart=0,this.ticksSinceReleased=0,this.liveInputSamplesHeld=0,this.lastInterval=0,this.sample=0,this.stringSustainStart=0,this.stringSustainEnd=0,this.phases=[],this.phaseDeltas=[],this.expressionStarts=[],this.expressionDeltas=[],this.phaseDeltaScales=[],this.prevVibrato=null,this.pulseWidth=0,this.pulseWidthDelta=0,this.pickedStrings=[],this.noteFilters=[],this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.specialIntervalMult=0,this.specialIntervalExpressionMult=1,this.feedbackOutputs=[],this.feedbackMult=0,this.feedbackDelta=0,this.stereoVolumeLStart=0,this.stereoVolumeRStart=0,this.stereoVolumeLDelta=0,this.stereoVolumeRDelta=0,this.stereoDelayStart=0,this.stereoDelayEnd=0,this.stereoDelayDelta=0,this.customVolumeStart=0,this.customVolumeEnd=0,this.filterResonanceStart=0,this.filterResonanceDelta=0,this.isFirstOrder=!1,this.envelopeComputer=new et,this.reset()}reset(){this.sample=0;const t=Math.max(n.maxChordSize,n.operatorCount+2);for(let e=0;e<t;e++)this.phases[e]=0,this.feedbackOutputs[e]=0;for(let t=0;t<this.noteFilterCount;t++)this.noteFilters[t].resetOutput();this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.liveInputSamplesHeld=0;for(const t of this.pickedStrings)t.reset();this.envelopeComputer.reset(),this.prevVibrato=null,this.drumsetPitch=null}}class it{constructor(){this.awake=!1,this.computed=!1,this.tonesAddedInThisTick=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0,this.activeTones=new q,this.activeModTones=new q,this.releasedTones=new q,this.liveInputTones=new q,this.eqFilterVolumeStart=1,this.eqFilterVolumeDelta=0,this.mixVolumeStart=1,this.mixVolumeDelta=0,this.delayInputMultStart=0,this.delayInputMultDelta=0,this.distortionStart=0,this.distortionEnd=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1,this.bitcrusherPhaseDelta=0,this.bitcrusherPhaseDeltaScale=1,this.bitcrusherScale=1,this.bitcrusherScaleScale=1,this.bitcrusherFoldLevel=1,this.bitcrusherFoldLevelScale=1,this.eqFilters=[],this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.panningDelayLine=null,this.panningDelayPos=0,this.panningVolumeStartL=0,this.panningVolumeStartR=0,this.panningVolumeDeltaL=0,this.panningVolumeDeltaR=0,this.panningOffsetStartL=0,this.panningOffsetStartR=0,this.panningOffsetDeltaL=0,this.panningOffsetDeltaR=0,this.chorusDelayLineL=null,this.chorusDelayLineR=null,this.chorusDelayLineDirty=!1,this.chorusDelayPos=0,this.chorusPhase=0,this.chorusStart=0,this.chorusEnd=0,this.echoDelayLineL=null,this.echoDelayLineR=null,this.echoDelayLineDirty=!1,this.echoDelayPos=0,this.echoDelayOffsetStart=0,this.echoDelayOffsetEnd=0,this.echoDelayOffsetLastTick=0,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=0,this.echoDelayOffsetLastTickIsComputed=!1,this.echoMultStart=0,this.echoMultDelta=0,this.echoShelfA1=0,this.echoShelfB0=0,this.echoShelfB1=0,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbDelayLine=null,this.reverbDelayLineDirty=!1,this.reverbDelayPos=0,this.reverbMultStart=0,this.reverbMultDelta=0,this.reverbShelfA1=0,this.reverbShelfB0=0,this.reverbShelfB1=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0}allocateNecessaryBuffers(t,e,i){if(M(e.effects)&&(null==this.panningDelayLine||this.panningDelayLine.length<t.panningDelayBufferSize)&&(this.panningDelayLine=new Float32Array(t.panningDelayBufferSize)),S(e.effects)&&((null==this.chorusDelayLineL||this.chorusDelayLineL.length<t.chorusDelayBufferSize)&&(this.chorusDelayLineL=new Float32Array(t.chorusDelayBufferSize)),(null==this.chorusDelayLineR||this.chorusDelayLineR.length<t.chorusDelayBufferSize)&&(this.chorusDelayLineR=new Float32Array(t.chorusDelayBufferSize))),w(e.effects)){const t=Math.max(n.echoDelayRange>>1,e.echoDelay+1),s=2*at.fittingPowerOfTwo(t*n.echoDelayStepTicks*i);if(null==this.echoDelayLineL||null==this.echoDelayLineR)this.echoDelayLineL=new Float32Array(s),this.echoDelayLineR=new Float32Array(s);else if(this.echoDelayLineL.length<s||this.echoDelayLineR.length<s){const t=new Float32Array(s),e=new Float32Array(s),n=this.echoDelayLineL.length-1;for(let i=0;i<this.echoDelayLineL.length;i++)t[i]=this.echoDelayLineL[this.echoDelayPos+i&n],e[i]=this.echoDelayLineL[this.echoDelayPos+i&n];this.echoDelayPos=this.echoDelayLineL.length,this.echoDelayLineL=t,this.echoDelayLineR=e}}k(e.effects)&&null==this.reverbDelayLine&&(this.reverbDelayLine=new Float32Array(n.reverbDelayBufferSize))}deactivate(){this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1;for(let t=0;t<this.eqFilterCount;t++)this.eqFilters[t].resetOutput();if(this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.panningDelayPos=0,null!=this.panningDelayLine)for(let t=0;t<this.panningDelayLine.length;t++)this.panningDelayLine[t]=0;this.echoDelayOffsetLastTickIsComputed=!1,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.awake=!1,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0}resetAllEffects(){if(this.deactivate(),this.chorusDelayLineDirty){for(let t=0;t<this.chorusDelayLineL.length;t++)this.chorusDelayLineL[t]=0;for(let t=0;t<this.chorusDelayLineR.length;t++)this.chorusDelayLineR[t]=0}if(this.echoDelayLineDirty){for(let t=0;t<this.echoDelayLineL.length;t++)this.echoDelayLineL[t]=0;for(let t=0;t<this.echoDelayLineR.length;t++)this.echoDelayLineR[t]=0}if(this.reverbDelayLineDirty)for(let t=0;t<this.reverbDelayLine.length;t++)this.reverbDelayLine[t]=0;this.chorusPhase=0}compute(t,e,i,s,a,r,o){this.computed=!0,this.allocateNecessaryBuffers(t,e,i);const l=t.samplesPerSecond,h=t.tickSampleCountdown,c=h/i,u=(h-s)/i,f=v(e.effects),p=b(e.effects),d=M(e.effects),m=S(e.effects),y=w(e.effects),g=k(e.effects);if(f){let i=e.distortion,s=e.distortion;t.isModActive(n.modulators.dictionary.distortion.index,r,o)&&(i=t.getModValue(n.modulators.dictionary.distortion.index,r,o,!1),s=t.getModValue(n.modulators.dictionary.distortion.index,r,o,!0)),this.distortionStart=Math.min(1,i/(n.distortionRange-1)),this.distortionEnd=Math.min(1,s/(n.distortionRange-1))}if(p){let i=e.bitcrusherFreq,a=e.bitcrusherFreq;t.isModActive(n.modulators.dictionary["freq crush"].index,r,o)&&(i=t.getModValue(n.modulators.dictionary["freq crush"].index,r,o,!1),a=t.getModValue(n.modulators.dictionary["freq crush"].index,r,o,!0));let h=e.bitcrusherQuantization,c=e.bitcrusherQuantization;t.isModActive(n.modulators.dictionary["bit crush"].index,r,o)&&(h=t.getModValue(n.modulators.dictionary["bit crush"].index,r,o,!1),c=t.getModValue(n.modulators.dictionary["bit crush"].index,r,o,!0));const u=n.keys[t.song.key].basePitch,f=Z.frequencyFromPitch(u+60)*Math.pow(2,(n.bitcrusherFreqRange-1-i)*n.bitcrusherOctaveStep),p=Z.frequencyFromPitch(u+60)*Math.pow(2,(n.bitcrusherFreqRange-1-a)*n.bitcrusherOctaveStep),d=Math.min(1,f/l),m=Math.min(1,p/l);this.bitcrusherPhaseDelta=d,this.bitcrusherPhaseDeltaScale=Math.pow(m/d,1/s);const y=2*n.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(n.bitcrusherQuantizationRange-1-h))),g=2*n.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(n.bitcrusherQuantizationRange-1-c)));this.bitcrusherScale=y,this.bitcrusherScaleScale=Math.pow(g/y,1/s);const v=2*n.bitcrusherBaseVolume*Math.pow(1.5,n.bitcrusherQuantizationRange-1-h),b=2*n.bitcrusherBaseVolume*Math.pow(1.5,n.bitcrusherQuantizationRange-1-c);this.bitcrusherFoldLevel=v,this.bitcrusherFoldLevelScale=Math.pow(b/v,1/s)}let I=1;if(e.eqFilterType){const i=e.eqFilter;null==e.eqSubFilters[1]&&(e.eqSubFilters[1]=new Q);const a=e.eqSubFilters[1];let h,c=e.eqFilterSimpleCut,u=e.eqFilterSimplePeak,f=e.eqFilterSimpleCut,p=e.eqFilterSimplePeak,d=!1;if(t.isModActive(n.modulators.dictionary["eq filt cut"].index,r,o)&&(c=t.getModValue(n.modulators.dictionary["eq filt cut"].index,r,o,!1),f=t.getModValue(n.modulators.dictionary["eq filt cut"].index,r,o,!0),d=!0),t.isModActive(n.modulators.dictionary["eq filt peak"].index,r,o)&&(u=t.getModValue(n.modulators.dictionary["eq filt peak"].index,r,o,!1),p=t.getModValue(n.modulators.dictionary["eq filt peak"].index,r,o,!0),d=!0),d){i.convertLegacySettingsForSynth(c,u),a.convertLegacySettingsForSynth(f,p),h=i.controlPoints[0];let t=a.controlPoints[0];h.toCoefficients(at.tempFilterStartCoefficients,l,1,1),t.toCoefficients(at.tempFilterEndCoefficients,l,1,1),this.eqFilters.length<1&&(this.eqFilters[0]=new R),this.eqFilters[0].loadCoefficientsWithGradient(at.tempFilterStartCoefficients,at.tempFilterEndCoefficients,1/s,0==h.type)}else i.convertLegacySettingsForSynth(c,u,!0),h=i.controlPoints[0],h.toCoefficients(at.tempFilterStartCoefficients,l,1,1),this.eqFilters.length<1&&(this.eqFilters[0]=new R),this.eqFilters[0].loadCoefficientsWithGradient(at.tempFilterStartCoefficients,at.tempFilterStartCoefficients,1/s,0==h.type);I*=h.getVolumeCompensationMult(),this.eqFilterCount=1,I=Math.min(3,I)}else{const t=null!=e.tmpEqFilterStart?e.tmpEqFilterStart:e.eqFilter;for(let n=0;n<t.controlPointCount;n++){let i=t.controlPoints[n],a=null!=e.tmpEqFilterEnd&&null!=e.tmpEqFilterEnd.controlPoints[n]?e.tmpEqFilterEnd.controlPoints[n]:t.controlPoints[n];i.type!=a.type&&(i=a),i.toCoefficients(at.tempFilterStartCoefficients,l,1,1),a.toCoefficients(at.tempFilterEndCoefficients,l,1,1),this.eqFilters.length<=n&&(this.eqFilters[n]=new R),this.eqFilters[n].loadCoefficientsWithGradient(at.tempFilterStartCoefficients,at.tempFilterEndCoefficients,1/s,0==i.type),I*=i.getVolumeCompensationMult()}this.eqFilterCount=t.controlPointCount,I=Math.min(3,I)}const F=at.instrumentVolumeToVolumeMult(e.volume);this.mixVolumeStart=F;let P=F;if(t.isModActive(n.modulators.dictionary["mix volume"].index,r,o)){const e=t.getModValue(n.modulators.dictionary["mix volume"].index,r,o,!1),i=t.getModValue(n.modulators.dictionary["mix volume"].index,r,o,!0);this.mixVolumeStart*=e<=0?(e+n.volumeRange/2)/(n.volumeRange/2):at.instrumentVolumeToVolumeMult(e),P*=i<=0?(i+n.volumeRange/2)/(n.volumeRange/2):at.instrumentVolumeToVolumeMult(i)}t.isModActive(n.modulators.dictionary["song volume"].index)&&(this.mixVolumeStart*=t.getModValue(n.modulators.dictionary["song volume"].index,void 0,void 0,!1)/100,P*=t.getModValue(n.modulators.dictionary["song volume"].index,void 0,void 0,!0)/100),this.mixVolumeDelta=(P-this.mixVolumeStart)/s;let T=I,q=I,x=1,D=1;if(d){let i=e.pan,a=e.pan;t.isModActive(n.modulators.dictionary.pan.index,r,o)&&(i=t.getModValue(n.modulators.dictionary.pan.index,r,o,!1),a=t.getModValue(n.modulators.dictionary.pan.index,r,o,!0));let h=Math.max(-1,Math.min(1,(i-n.panCenter)/n.panCenter)),c=Math.max(-1,Math.min(1,(a-n.panCenter)/n.panCenter));const u=1.414*Math.cos((1+h)*Math.PI*.25),f=1.414*Math.cos((1-h)*Math.PI*.25),p=1.414*Math.cos((1+c)*Math.PI*.25),d=1.414*Math.cos((1-c)*Math.PI*.25),m=l*n.panDelaySecondsMax;let y=e.panDelay,g=e.panDelay;t.isModActive(n.modulators.dictionary["pan delay"].index,r,o)&&(y=t.getModValue(n.modulators.dictionary["pan delay"].index,r,o,!1),g=t.getModValue(n.modulators.dictionary["pan delay"].index,r,o,!0));const v=h*y*m/10,b=c*g*m/10,M=Math.max(0,v),S=Math.max(0,-v),w=Math.max(0,b),k=Math.max(0,-b);this.panningVolumeStartL=u,this.panningVolumeStartR=f,this.panningVolumeDeltaL=(p-u)/s,this.panningVolumeDeltaR=(d-f)/s,this.panningOffsetStartL=M,this.panningOffsetStartR=S,this.panningOffsetDeltaL=(w-M)/s,this.panningOffsetDeltaR=(k-S)/s}if(m){let i=e.chorus,s=e.chorus;t.isModActive(n.modulators.dictionary.chorus.index,r,o)&&(i=t.getModValue(n.modulators.dictionary.chorus.index,r,o,!1),s=t.getModValue(n.modulators.dictionary.chorus.index,r,o,!0));const a=Math.min(1,i/(n.chorusRange-1)),l=Math.min(1,s/(n.chorusRange-1));this.chorusStart=.6*a+.4*Math.pow(a,6),this.chorusEnd=.6*l+.4*Math.pow(l,6)}let O=0;if(y){let a=e.echoSustain,l=e.echoSustain;t.isModActive(n.modulators.dictionary.echo.index,r,o)&&(a=t.getModValue(n.modulators.dictionary.echo.index,r,o,!1),l=t.getModValue(n.modulators.dictionary.echo.index,r,o,!0));const h=.9*Math.min(1,Math.pow(a/n.echoSustainRange,1.1)),f=.9*Math.min(1,Math.pow(l/n.echoSustainRange,1.1));this.echoMultStart=h,this.echoMultDelta=(f-h)/s,O=Math.max(h,f);let p=e.echoDelay,d=e.echoDelay,m=!1;t.isModActive(n.modulators.dictionary["echo delay"].index,r,o)&&(p=t.getModValue(n.modulators.dictionary["echo delay"].index,r,o,!1),d=t.getModValue(n.modulators.dictionary["echo delay"].index,r,o,!0),m=!0);const y=Math.round((p+1)*n.echoDelayStepTicks*i),g=Math.round((d+1)*n.echoDelayStepTicks*i);this.echoDelayOffsetLastTickIsComputed&&!m?this.echoDelayOffsetStart=this.echoDelayOffsetLastTick:this.echoDelayOffsetStart=y,t.isAtEndOfTick&&!m&&(this.echoDelayOffsetLastTick=g,this.echoDelayOffsetLastTickIsComputed=!0),this.echoDelayOffsetEnd=g,this.echoDelayOffsetRatio=1-c,this.echoDelayOffsetRatioDelta=(c-u)/s;const v=2*Math.PI*n.echoShelfHz/t.samplesPerSecond;at.tempFilterStartCoefficients.highShelf1stOrder(v,n.echoShelfGain),this.echoShelfA1=at.tempFilterStartCoefficients.a[1],this.echoShelfB0=at.tempFilterStartCoefficients.b[0],this.echoShelfB1=at.tempFilterStartCoefficients.b[1]}let E=0;if(g){let i=e.reverb,a=e.reverb;t.isModActive(n.modulators.dictionary.reverb.index,r,o)&&(i=t.getModValue(n.modulators.dictionary.reverb.index,r,o,!1),a=t.getModValue(n.modulators.dictionary.reverb.index,r,o,!0)),t.isModActive(n.modulators.dictionary["song reverb"].index,r,o)&&(i*=(t.getModValue(n.modulators.dictionary["song reverb"].index,void 0,void 0,!1)-n.modulators.dictionary["song reverb"].convertRealFactor)/n.reverbRange,a*=(t.getModValue(n.modulators.dictionary["song reverb"].index,void 0,void 0,!0)-n.modulators.dictionary["song reverb"].convertRealFactor)/n.reverbRange);const l=.425*Math.min(1,Math.pow(i/n.reverbRange,.667)),h=.425*Math.min(1,Math.pow(a/n.reverbRange,.667));this.reverbMultStart=l,this.reverbMultDelta=(h-l)/s,E=Math.max(l,h);const c=2*Math.PI*n.reverbShelfHz/t.samplesPerSecond;at.tempFilterStartCoefficients.highShelf1stOrder(c,n.reverbShelfGain),this.reverbShelfA1=at.tempFilterStartCoefficients.a[1],this.reverbShelfB0=at.tempFilterStartCoefficients.b[0],this.reverbShelfB1=at.tempFilterStartCoefficients.b[1]}if(this.tonesAddedInThisTick)this.attentuationProgress=0,this.flushedSamples=0,this.flushingDelayLines=!1;else if(this.flushingDelayLines){T=0,q=0,x=0,D=0;let e=0;m&&(e+=t.chorusDelayBufferSize),y&&(e+=this.echoDelayLineL.length),g&&(e+=n.reverbDelayBufferSize),this.flushedSamples+=s,this.flushedSamples>=e&&(this.deactivateAfterThisTick=!0)}else{0==this.attentuationProgress?(T*=c,q*=u):(T=0,q=0);const e=1/256,s=-Math.log2(e);let a=0;if(m&&(a+=n.chorusMaxDelay),y){const t=.5*(this.echoDelayOffsetStart+this.echoDelayOffsetEnd)/l,e=Math.pow(O,1/t);a+=-1/Math.log2(e)*s}if(g){const t=2*E,e=n.reverbDelayBufferSize/4/l,i=Math.pow(t,1/e);a+=-1/Math.log2(i)*s}const r=i/l/a,o=this.attentuationProgress+r;o>=1&&(x*=c,D*=u),t.isAtEndOfTick&&(this.attentuationProgress=o,this.attentuationProgress>=1&&(this.flushingDelayLines=!0))}this.eqFilterVolumeStart=T,this.eqFilterVolumeDelta=(q-T)/s,this.delayInputMultStart=x,this.delayInputMultDelta=(D-x)/s}}class st{constructor(){this.instruments=[],this.muted=!1,this.singleSeamlessInstrument=null}}class at{constructor(t=null){this.samplesPerSecond=44100,this.song=null,this.liveInputDuration=0,this.liveInputStarted=!1,this.liveInputPitches=[],this.liveInputChannel=0,this.liveInputInstruments=[],this.loopRepeatCount=-1,this.volume=1,this.exposedBuffer=[],this.reloadbuffer=!0,this.copybroken=!1,this.copybuffertimer=0,this.renderingSong=!1,this.wantToSkip=!1,this.playheadInternal=0,this.bar=0,this.prevBar=null,this.nextBar=null,this.beat=0,this.part=0,this.tick=0,this.isAtStartOfTick=!0,this.isAtEndOfTick=!0,this.tickSampleCountdown=0,this.modValues=[],this.modInsValues=[],this.nextModValues=[],this.nextModInsValues=[],this.isPlayingSong=!1,this.liveInputEndTime=0,this.browserAutomaticallyClearsAudioBuffer=!0,this.tempDrumSetControlPoint=new J,this.tempFrequencyResponse=new O,this.channels=[],this.tonePool=new q,this.tempMatchedPitchTones=Array(n.maxChordSize).fill(null),this.limit=0,this.tempMonoInstrumentSampleBuffer=null,this.audioCtx=null,this.scriptNode=null,this.audioProcessCallback=t=>{const e=t.outputBuffer,n=e.getChannelData(0),i=e.getChannelData(1);if(!this.browserAutomaticallyClearsAudioBuffer||0==n[0]&&0==i[0]&&0==n[e.length-1]&&0==i[e.length-1]||(this.browserAutomaticallyClearsAudioBuffer=!1),!this.browserAutomaticallyClearsAudioBuffer){const t=e.length;for(let e=0;e<t;e++)n[e]=0,i[e]=0}performance.now()<this.liveInputEndTime||this.isPlayingSong?(this.synthesize(n,i,e.length,this.isPlayingSong),this.reloadbuffer&&(this.exposedBuffer[0]=e.getChannelData(0),this.exposedBuffer[1]=e.getChannelData(1),this.reloadbuffer=!1),0==this.exposedBuffer[0].length&&(this.exposedBuffer[0]=new Float32Array(144),this.exposedBuffer[1]=new Float32Array(144),this.copybroken=!0),this.copybroken&&this.copybuffertimer<=0?(x.raise("oscillascopeUpdate",n,i),this.copybuffertimer=2):this.copybroken&&this.copybuffertimer--):this.deactivateAudio()},this.computeDelayBufferSizes(),null!=t&&this.setSong(t)}syncSongState(){const t=this.song.getChannelCount();for(let e=this.channels.length;e<t;e++)this.channels[e]=new st;this.channels.length=t;for(let e=0;e<t;e++){const t=this.song.channels[e],n=this.channels[e];for(let e=n.instruments.length;e<t.instruments.length;e++)n.instruments[e]=new it;if(n.instruments.length=t.instruments.length,n.muted!=t.muted&&(n.muted=t.muted,n.muted))for(const t of n.instruments)t.resetAllEffects()}}warmUpSynthesizer(t){if(null!=t){this.syncSongState();const e=this.getSamplesPerTick();for(let n=0;n<t.getChannelCount();n++)for(let i=0;i<t.channels[n].instruments.length;i++){const s=t.channels[n].instruments[i],a=this.channels[n].instruments[i];at.getInstrumentSynthFunction(s),s.warmUp(this.samplesPerSecond),a.allocateNecessaryBuffers(this,s,e)}}}computeLatestModValues(){if(null!=this.song&&this.song.modChannelCount>0){let t=[],e=[];this.modValues=[],this.nextModValues=[],this.modInsValues=[],this.nextModInsValues=[];for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++){e[t]=[],this.modInsValues[t]=[],this.nextModInsValues[t]=[];for(let n=0;n<this.song.channels[t].instruments.length;n++)this.modInsValues[t][n]=[],this.nextModInsValues[t][n]=[],e[t][n]=[]}let i=this.beat*n.partsPerBeat+this.part;for(let s=this.song.pitchChannelCount+this.song.noiseChannelCount;s<this.song.getChannelCount();s++)if(!this.song.channels[s].muted){let a;for(let r=this.bar;r>=0;r--)if(a=this.song.getPattern(s,r),null!=a){let o=a.instruments[0],l=this.song.channels[s].instruments[o],h=[],c=[],u=r==this.bar?i:this.findPartsInBar(r);for(const t of a.notes)if(t.start<u&&(null==h[n.modCount-1-t.pitches[0]]||t.end>h[n.modCount-1-t.pitches[0]]))if(t.end<=u)h[n.modCount-1-t.pitches[0]]=t.end,c[n.modCount-1-t.pitches[0]]=t.pins[t.pins.length-1].size;else{h[n.modCount-1-t.pitches[0]]=u;for(let e=0;e<t.pins.length;e++)if(t.pins[e].time+t.start>u){const i=t.pins[e].time-t.pins[e-1].time,s=u-t.start-t.pins[e-1].time,a=t.pins[e].size-t.pins[e-1].size;c[n.modCount-1-t.pitches[0]]=Math.round(t.pins[e-1].size+a*s/i),e=t.pins.length}}for(let i=0;i<n.modCount;i++)if(null!=h[i])if(n.modulators[l.modulators[i]].forSong)(null==t[l.modulators[i]]||r*n.partsPerBeat*this.song.beatsPerBar+h[i]>t[l.modulators[i]])&&(this.setModValue(c[i],c[i],i,l.modChannels[i],l.modInstruments[i],l.modulators[i]),t[l.modulators[i]]=r*n.partsPerBeat*this.song.beatsPerBar+h[i]);else{let t=[];if(l.modInstruments[i]==this.channels[l.modChannels[i]].instruments.length)for(let e=0;e<this.channels[l.modChannels[i]].instruments.length;e++)t.push(e);else if(l.modInstruments[i]>this.channels[l.modChannels[i]].instruments.length){const e=this.song.getPattern(l.modChannels[i],r);null!=e&&(t=e.instruments)}else t.push(l.modInstruments[i]);for(let s=0;s<t.length;s++){const a=l.modulators[i]==n.modulators.dictionary["eq filter"].index,o=l.modulators[i]==n.modulators.dictionary["note filter"].index;let u=l.modulators[i];if(a?u=n.modulators.length+l.modFilterTypes[i]:o&&(u=n.modulators.length+1+2*n.filterMaxPoints+l.modFilterTypes[i]),null==e[l.modChannels[i]][t[s]][u]||r*n.partsPerBeat*this.song.beatsPerBar+h[i]>e[l.modChannels[i]][s][u]){if(a){let e=this.song.channels[l.modChannels[i]].instruments[t[s]];if(0==l.modFilterTypes[i])e.tmpEqFilterStart=e.eqSubFilters[c[i]];else{for(let t=0;t<n.filterMorphCount;t++)e.tmpEqFilterStart==e.eqSubFilters[t]&&(e.tmpEqFilterStart=new Q,e.tmpEqFilterStart.fromJsonObject(e.eqSubFilters[t].toJsonObject()),t=n.filterMorphCount);Math.floor((l.modFilterTypes[i]-1)/2)<e.tmpEqFilterStart.controlPointCount&&(l.modFilterTypes[i]%2?e.tmpEqFilterStart.controlPoints[Math.floor((l.modFilterTypes[i]-1)/2)].freq=c[i]:e.tmpEqFilterStart.controlPoints[Math.floor((l.modFilterTypes[i]-1)/2)].gain=c[i])}e.tmpEqFilterEnd=e.tmpEqFilterStart}else if(o){let e=this.song.channels[l.modChannels[i]].instruments[t[s]];if(0==l.modFilterTypes[i])e.tmpNoteFilterStart=e.noteSubFilters[c[i]];else{for(let t=0;t<n.filterMorphCount;t++)e.tmpNoteFilterStart==e.noteSubFilters[t]&&(e.tmpNoteFilterStart=new Q,e.tmpNoteFilterStart.fromJsonObject(e.noteSubFilters[t].toJsonObject()),t=n.filterMorphCount);Math.floor((l.modFilterTypes[i]-1)/2)<e.tmpNoteFilterStart.controlPointCount&&(l.modFilterTypes[i]%2?e.tmpNoteFilterStart.controlPoints[Math.floor((l.modFilterTypes[i]-1)/2)].freq=c[i]:e.tmpNoteFilterStart.controlPoints[Math.floor((l.modFilterTypes[i]-1)/2)].gain=c[i])}e.tmpNoteFilterEnd=e.tmpNoteFilterStart}else this.setModValue(c[i],c[i],i,l.modChannels[i],t[s],u);e[l.modChannels[i]][t[s]][u]=r*n.partsPerBeat*this.song.beatsPerBar+h[i]}}}}}}}determineInvalidModulators(t){if(null!=this.song)for(let e=0;e<n.modCount;e++){if(t.invalidModulators[e]=!0,-1==t.modChannels[e]){0!=t.modulators[e]&&(t.invalidModulators[e]=!1);continue}const i=this.song.channels[t.modChannels[e]];if(null==i)continue;let s=[];s=t.modInstruments[e]>=i.instruments.length?i.instruments:[i.instruments[t.modInstruments[e]]];for(let i=0;i<s.length;i++){const a=s[i];if(null==a)continue;const r=n.modulators[t.modulators[e]].name;12!=n.modulators[t.modulators[e]].associatedEffect&&!(a.effects&1<<n.modulators[t.modulators[e]].associatedEffect)||1!=a.type&&("fm slider 1"==r||"fm slider 2"==r||"fm slider 3"==r||"fm slider 4"==r||"fm feedback"==r)||6!=a.type&&"pulse width"==r||!a.getChord().arpeggiates&&("arp speed"==r||"reset arp"==r)||a.eqFilterType&&"eq filter"==r||!a.eqFilterType&&("eq filt cut"==r||"eq filt peak"==r)||"eq filter"==r&&Math.floor((t.modFilterTypes[e]+1)/2)>a.eqFilter.controlPointCount||a.noteFilterType&&"note filter"==r||!a.noteFilterType&&("note filt cut"==r||"note filt peak"==r)||"note filter"==r&&Math.floor((t.modFilterTypes[e]+1)/2)>a.noteFilter.controlPointCount||(t.invalidModulators[e]=!1,i=s.length)}}}static operatorAmplitudeCurve(t){return(Math.pow(16,t/15)-1)/15}get playing(){return this.isPlayingSong}get playhead(){return this.playheadInternal}set playhead(t){if(null!=this.song){this.playheadInternal=Math.max(0,Math.min(this.song.barCount,t));let e=this.playheadInternal;this.bar=Math.floor(e),e=this.song.beatsPerBar*(e-this.bar),this.beat=Math.floor(e),e=n.partsPerBeat*(e-this.beat),this.part=Math.floor(e),e=n.ticksPerPart*(e-this.part),this.tick=Math.floor(e);const i=this.getSamplesPerTick();e=i*(e-this.tick),this.tickSampleCountdown=i-e,this.prevBar=null}}getSamplesPerBar(){if(null==this.song)throw new Error;return this.getSamplesPerTick()*n.ticksPerPart*n.partsPerBeat*this.song.beatsPerBar}getTicksIntoBar(){return(this.beat*n.partsPerBeat+this.part)*n.ticksPerPart+this.tick}getCurrentPart(){return this.beat*n.partsPerBeat+this.part}findPartsInBar(t){if(null==this.song)return 0;let e=n.partsPerBeat*this.song.beatsPerBar;for(let i=this.song.pitchChannelCount+this.song.noiseChannelCount;i<this.song.getChannelCount();i++){let s=this.song.getPattern(i,t);if(null!=s){let t=this.song.channels[i].instruments[s.instruments[0]];for(let i=0;i<n.modCount;i++)if(t.modulators[i]==n.modulators.dictionary["next bar"].index)for(const t of s.notes)t.pitches[0]==n.modCount-1-i&&e>t.start&&(e=t.start)}}return e}getTotalSamples(t,e,i){if(null==this.song)return-1;let s=t?0:this.song.loopStart,a=e?this.song.barCount:this.song.loopStart+this.song.loopLength,r=!1,o=!1,l=this.song.tempo;for(let t=this.song.pitchChannelCount+this.song.noiseChannelCount;t<this.song.getChannelCount();t++)for(let e=s;e<a;e++){let i=this.song.getPattern(t,e);if(null!=i){let e=this.song.channels[t].instruments[i.instruments[0]];for(let t=0;t<n.modCount;t++)e.modulators[t]==n.modulators.dictionary.tempo.index&&(r=!0),e.modulators[t]==n.modulators.dictionary["next bar"].index&&(o=!0)}}if(s>0){let t=null,e=0;for(let i=s-1;i>=0;i--){for(let s=this.song.pitchChannelCount+this.song.noiseChannelCount;s<this.song.getChannelCount();s++){let a=this.song.getPattern(s,i);if(null!=a){let r=a.instruments[0],o=this.song.channels[s].instruments[r],l=this.findPartsInBar(i);for(const i of a.notes)if(o.modulators[n.modCount-1-i.pitches[0]]==n.modulators.dictionary.tempo.index&&i.start<l&&(null==t||i.end>t))if(i.end<=l)t=i.end,e=i.pins[i.pins.length-1].size;else{t=l;for(let t=0;t<i.pins.length;t++)if(i.pins[t].time+i.start>l){const n=i.pins[t].time-i.pins[t-1].time,s=l-i.start-i.pins[t-1].time,a=i.pins[t].size-i.pins[t-1].size;e=Math.round(i.pins[t-1].size+a*s/n),t=i.pins.length}}}}null!=t&&(l=e+n.modulators.dictionary.tempo.convertRealFactor,i=-1)}}if(r||o){let t=s,e=!1,h=0;for(;!e;){let s=n.partsPerBeat*this.song.beatsPerBar,c=0;if(o&&(s=this.findPartsInBar(t)),r){let e=!1;for(let i=this.song.pitchChannelCount+this.song.noiseChannelCount;i<this.song.getChannelCount();i++)if(0==e){let a=this.song.getPattern(i,t);if(null!=a){let t=this.song.channels[i].instruments[a.instruments[0]];for(let i=0;i<n.modCount;i++)if(0==e&&t.modulators[i]==n.modulators.dictionary.tempo.index&&a.notes.find((t=>t.pitches[0]==n.modCount-1-i))){e=!0,a.notes.sort((function(t,e){return t.start==e.start?t.pitches[0]-e.pitches[0]:t.start-e.start}));for(const t of a.notes)if(t.pitches[0]==n.modCount-1-i&&(h+=Math.min(s-c,t.start-c)*n.ticksPerPart*this.getSamplesPerTickSpecificBPM(l),t.start<s))for(let e=1;e<t.pins.length;e++){if(t.pins[e-1].time+t.start<=s){const i=n.ticksPerPart*Math.min(s-(t.start+t.pins[e-1].time),t.pins[e].time-t.pins[e-1].time),a=t.pins[e-1].size+n.modulators.dictionary.tempo.convertRealFactor;let r=t.pins[e].size+n.modulators.dictionary.tempo.convertRealFactor;t.pins[e].time+t.start>s&&(r=t.pins[e-1].size+(t.pins[e].size-t.pins[e-1].size)*(s-(t.start+t.pins[e-1].time))/(t.pins[e].time-t.pins[e-1].time)+n.modulators.dictionary.tempo.convertRealFactor);let o=n.partsPerBeat*n.ticksPerPart/60;h+=r!=a?-this.samplesPerSecond*i*(Math.log(o*r*i)-Math.log(o*a*i))/(o*(a-r)):i*this.getSamplesPerTickSpecificBPM(r),l=r}c=Math.min(t.start+t.pins[e].time,s)}}}}}h+=(s-c)*n.ticksPerPart*this.getSamplesPerTickSpecificBPM(l),t++,0!=i&&t==this.song.loopStart+this.song.loopLength&&(t=this.song.loopStart,i>0&&i--),t>=a&&(e=!0)}return Math.ceil(h)}return this.getSamplesPerBar()*this.getTotalBars(t,e,i)}getTotalBars(t,e,n=this.loopRepeatCount){if(null==this.song)throw new Error;let i=this.song.loopLength*(n+1);return t&&(i+=this.song.loopStart),e&&(i+=this.song.barCount-(this.song.loopStart+this.song.loopLength)),i}setSong(t){"string"==typeof t?this.song=new X(t):t instanceof X&&(this.song=t),this.prevBar=null}computeDelayBufferSizes(){this.panningDelayBufferSize=at.fittingPowerOfTwo(this.samplesPerSecond*n.panDelaySecondsMax),this.panningDelayBufferMask=this.panningDelayBufferSize-1,this.chorusDelayBufferSize=at.fittingPowerOfTwo(this.samplesPerSecond*n.chorusMaxDelay),this.chorusDelayBufferMask=this.chorusDelayBufferSize-1}activateAudio(){null!=this.audioCtx&&null!=this.scriptNode||(this.audioCtx=this.audioCtx||new(window.AudioContext||window.webkitAudioContext),this.samplesPerSecond=this.audioCtx.sampleRate,this.scriptNode=this.audioCtx.createScriptProcessor?this.audioCtx.createScriptProcessor(2048,0,2):this.audioCtx.createJavaScriptNode(2048,0,2),this.scriptNode.onaudioprocess=this.audioProcessCallback,this.scriptNode.channelCountMode="explicit",this.scriptNode.channelInterpretation="speakers",this.scriptNode.connect(this.audioCtx.destination),this.reloadbuffer=!0,this.computeDelayBufferSizes()),this.audioCtx.resume()}deactivateAudio(){null!=this.audioCtx&&null!=this.scriptNode&&(this.scriptNode.disconnect(this.audioCtx.destination),this.scriptNode=null,this.audioCtx.close&&this.audioCtx.close(),this.audioCtx=null)}maintainLiveInput(){this.activateAudio(),this.liveInputEndTime=performance.now()+1e4}play(){this.isPlayingSong||(this.isPlayingSong=!0,this.activateAudio(),this.warmUpSynthesizer(this.song),this.computeLatestModValues())}pause(){if(this.isPlayingSong&&(this.isPlayingSong=!1,this.modValues=[],this.nextModValues=[],null!=this.song)){this.song.inVolumeCap=0,this.song.outVolumeCap=0;for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++)this.modInsValues[t]=[],this.nextModInsValues[t]=[]}}resetEffects(){if(this.limit=0,this.freeAllTones(),null!=this.song)for(const t of this.channels)for(const e of t.instruments)e.resetAllEffects()}setModValue(t,e,i,s,a,r){let o=t+n.modulators[r].convertRealFactor,l=e+n.modulators[r].convertRealFactor;return n.modulators[r].forSong?null!=this.modValues[r]&&this.modValues[r]==o&&this.nextModValues[r]==l||(this.modValues[r]=o,this.nextModValues[r]=l):null!=this.modInsValues[s][a][r]&&this.modInsValues[s][a][r]==o&&this.nextModInsValues[s][a][r]==l||(this.modInsValues[s][a][r]=o,this.nextModInsValues[s][a][r]=l),o}getModValue(t,e,i,s){if(n.modulators[t].forSong){if(null!=this.modValues[t]&&null!=this.nextModValues[t])return s?this.nextModValues[t]:this.modValues[t]}else if(null!=e&&null!=i&&null!=this.modInsValues[e][i][t]&&null!=this.nextModInsValues[e][i][t])return s?this.nextModInsValues[e][i][t]:this.modInsValues[e][i][t];return-1}isAnyModActive(t,e){for(let i=0;i<n.modulators.length;i++)if(null!=this.modValues&&null!=this.modValues[i]||null!=this.modInsValues&&null!=this.modInsValues[t]&&null!=this.modInsValues[t][e]&&null!=this.modInsValues[t][e][i])return!0;return!1}unsetMod(t,e,n){(this.isModActive(t)||null!=e&&null!=n&&this.isModActive(t,e,n))&&(this.modValues[t]=null,this.nextModValues[t]=null,null!=e&&null!=n&&(this.modInsValues[e][n][t]=null,this.nextModInsValues[e][n][t]=null))}isFilterModActive(t,e,n){const i=this.song.channels[e].instruments[n];if(t){if(i.noteFilterType)return!1;if(null!=i.tmpNoteFilterEnd)return!0}else{if(i.eqFilterType)return!1;if(null!=i.tmpEqFilterEnd)return!0}return!1}isModActive(t,e,i){return n.modulators[t].forSong?null!=this.modValues&&null!=this.modValues[t]:null!=e&&null!=i&&null!=this.modInsValues&&null!=this.modInsValues[e]&&null!=this.modInsValues[e][i]&&null!=this.modInsValues[e][i][t]}snapToStart(){this.bar=0,this.resetEffects(),this.snapToBar()}goToBar(t){this.bar=t,this.resetEffects(),this.playheadInternal=this.bar}snapToBar(){this.playheadInternal=this.bar,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=0}jumpIntoLoop(){if(this.song&&(this.bar<this.song.loopStart||this.bar>=this.song.loopStart+this.song.loopLength)){const t=this.bar;this.bar=this.song.loopStart,this.playheadInternal+=this.bar-t,this.playing&&this.computeLatestModValues()}}goToNextBar(){if(!this.song)return;this.prevBar=this.bar;const t=this.bar;this.bar++,this.bar>=this.song.barCount&&(this.bar=0),this.playheadInternal+=this.bar-t,this.playing&&this.computeLatestModValues()}goToPrevBar(){if(!this.song)return;this.prevBar=null;const t=this.bar;this.bar--,(this.bar<0||this.bar>=this.song.barCount)&&(this.bar=this.song.barCount-1),this.playheadInternal+=this.bar-t,this.playing&&this.computeLatestModValues()}skipBar(){if(!this.song)return;const t=this.getSamplesPerTick();this.bar++,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=t,0!=this.loopRepeatCount&&this.bar==this.song.loopStart+this.song.loopLength&&(this.bar=this.song.loopStart,this.loopRepeatCount>0&&this.loopRepeatCount--)}synthesize(t,e,i,s=!0){if(null==this.song){for(let n=0;n<i;n++)t[n]=0,e[n]=0;return void this.deactivateAudio()}const a=this.song;this.song.inVolumeCap=0,this.song.outVolumeCap=0;let r=this.getSamplesPerTick(),o=!1;for(;this.tickSampleCountdown<=0;)this.tickSampleCountdown+=r;this.tickSampleCountdown>r&&(this.tickSampleCountdown=r),s&&(this.beat>=a.beatsPerBar&&(this.bar++,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=r,0!=this.loopRepeatCount&&this.bar==a.loopStart+a.loopLength&&(this.bar=a.loopStart,this.loopRepeatCount>0&&this.loopRepeatCount--)),this.bar>=a.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(o=!0,this.pause()))),this.syncSongState(),(null==this.tempMonoInstrumentSampleBuffer||this.tempMonoInstrumentSampleBuffer.length<i)&&(this.tempMonoInstrumentSampleBuffer=new Float32Array(i));const l=+this.volume,h=1-Math.pow(.5,4/this.samplesPerSecond),c=1-Math.pow(.5,4e3/this.samplesPerSecond);let u=+this.limit,f=0;for(;f<i&&!o;){this.nextBar=this.bar+1,0!=this.loopRepeatCount&&this.nextBar==a.loopStart+a.loopLength&&(this.nextBar=a.loopStart),this.nextBar>=a.barCount&&(this.nextBar=null);const p=i-f,d=Math.ceil(this.tickSampleCountdown),m=Math.min(d,p);if(this.isAtEndOfTick=m>=this.tickSampleCountdown,this.isPlayingSong||this.renderingSong)for(let t=a.pitchChannelCount+a.noiseChannelCount;t<a.getChannelCount();t++){const e=a.channels[t],n=this.channels[t];this.determineCurrentActiveTones(a,t,s);for(let i=0;i<e.instruments.length;i++){const e=n.instruments[i];for(let n=0;n<e.activeModTones.count();n++){const i=e.activeModTones.get(n);this.playModTone(a,t,r,f,m,i,!1,!1)}}}this.wantToSkip&&(this.wantToSkip=!1,this.skipBar());for(let i=0;i<a.pitchChannelCount+a.noiseChannelCount;i++){const o=a.channels[i],l=this.channels[i];this.determineCurrentActiveTones(a,i,s),this.determineLiveInputTones(a,i);for(let s=0;s<o.instruments.length;s++){const h=o.instruments[s],c=l.instruments[s];let u=0;for(let t=0;t<c.activeTones.count();t++){const e=c.activeTones.get(t);this.playTone(a,i,r,f,m,e,!1,!1),u++}for(let t=0;t<c.liveInputTones.count();t++){const e=c.liveInputTones.get(t);this.playTone(a,i,r,f,m,e,!1,!1),u++}for(let t=0;t<c.releasedTones.count();t++){const e=c.releasedTones.get(t);if(e.ticksSinceReleased>=Math.abs(h.getFadeOutTicks())){this.freeReleasedTone(c,t),t--;continue}const s=u>=n.maximumTonesPerChannel;this.playTone(a,i,r,f,m,e,!0,s),u++}c.awake&&(c.computed||c.compute(this,h,r,m,null,i,s),at.effectsSynth(this,t,e,f,m,h,c),c.computed=!1);const p=this.tickSampleCountdown,d=1-p/r,y=1-(p-m)/r,g=(this.beat*n.partsPerBeat+this.part)*n.ticksPerPart+this.tick,v=g/n.ticksPerPart,b=(g+1)/n.ticksPerPart,M=v+(b-v)*d,S=v+(b-v)*y;let w=h.vibratoSpeed;h.LFOtime=h.nextLFOtime,this.isModActive(n.modulators.dictionary["vibrato speed"].index,i,s)&&(w=this.getModValue(n.modulators.dictionary["vibrato speed"].index,i,s)),0==w?(h.LFOtime=0,h.nextLFOtime=0):h.nextLFOtime+=.1*w*(S-M)}}const y=f+m;for(let n=f;n<y;n++){const i=t[n]*a.masterGain*a.masterGain,s=e[n]*a.masterGain*a.masterGain,r=i<0?-i:i,o=s<0?-s:s,f=r>o?r:o;this.song.inVolumeCap=this.song.inVolumeCap>f?this.song.inVolumeCap:f;const p=+(f>a.compressionThreshold)+ +(f>a.limitThreshold),d=+(0==p)*((.8*(f+1-a.compressionThreshold)+.25)*a.compressionRatio+1.05*(1-a.compressionRatio))+1.05*+(1==p)+ +(2==p)*(1.05*((f+1-a.limitThreshold)*a.limitRatio+(1-a.limitThreshold)));u+=(d-u)*(u<d?c:h);const m=l/(u>=1?1.05*u:.8*u+.25);t[n]=i*m,e[n]=s*m,this.song.outVolumeCap=this.song.outVolumeCap>f*m?this.song.outVolumeCap:f*m}if(f+=m,this.isAtStartOfTick=!1,this.tickSampleCountdown-=m,this.tickSampleCountdown<=0){this.isAtStartOfTick=!0;for(const t of this.channels)for(const e of t.instruments){for(let t=0;t<e.releasedTones.count();t++){const n=e.releasedTones.get(t);n.isOnLastTick?(this.freeReleasedTone(e,t),t--):n.ticksSinceReleased++}e.deactivateAfterThisTick&&e.deactivate(),e.tonesAddedInThisTick=!1}for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++)for(let e=0;e<this.song.channels[t].instruments.length;e++){let i=this.song.channels[t].instruments[e],s=i.arpeggioSpeed;this.isModActive(n.modulators.dictionary["arp speed"].index,t,e)?(s=this.getModValue(n.modulators.dictionary["arp speed"].index,t,e,!1),Number.isInteger(s)?i.arpTime+=n.arpSpeedScale[s]:i.arpTime+=(1-s%1)*n.arpSpeedScale[Math.floor(s)]+s%1*n.arpSpeedScale[Math.ceil(s)]):i.arpTime+=n.arpSpeedScale[s]}for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++)for(let e=0;e<this.song.channels[t].instruments.length;e++){let n=this.song.channels[t].instruments[e];null!=n.tmpEqFilterEnd?n.tmpEqFilterStart=n.tmpEqFilterEnd:n.tmpEqFilterStart=n.eqFilter,null!=n.tmpNoteFilterEnd?n.tmpNoteFilterStart=n.tmpNoteFilterEnd:n.tmpNoteFilterStart=n.noteFilter}this.tick++,this.tickSampleCountdown+=r,this.tick==n.ticksPerPart&&(this.tick=0,this.part++,this.liveInputDuration--,this.part==n.partsPerBeat&&(this.part=0,s&&(this.beat++,this.beat==a.beatsPerBar&&(this.beat=0,this.prevBar=this.bar,this.bar++,0!=this.loopRepeatCount&&this.bar==a.loopStart+a.loopLength&&(this.bar=a.loopStart,this.loopRepeatCount>0&&this.loopRepeatCount--),this.bar>=a.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(o=!0,this.resetEffects(),this.pause()))))))}for(let t=0;t<n.modulators.length;t++)null!=this.nextModValues&&null!=this.nextModValues[t]&&(this.modValues[t]=this.nextModValues[t]);this.isModActive(n.modulators.dictionary.tempo.index)&&(r=this.getSamplesPerTick(),this.tickSampleCountdown=Math.min(this.tickSampleCountdown,r));for(let t=0;t<this.song.pitchChannelCount;t++)for(let e of this.song.channels[t].instruments)e.nextLFOtime=e.nextLFOtime%(n.vibratoTypes[e.vibratoType].period/(n.ticksPerPart*r/this.samplesPerSecond)),e.arpTime=e.arpTime%(2520*n.ticksPerArpeggio);for(let t=0;t<n.modulators.length;t++)for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)for(let n=0;n<this.song.getMaxInstrumentsPerChannel();n++)null!=this.nextModInsValues&&null!=this.nextModInsValues[e]&&null!=this.nextModInsValues[e][n]&&null!=this.nextModInsValues[e][n][t]&&(this.modInsValues[e][n][t]=this.nextModInsValues[e][n][t])}(!Number.isFinite(u)||Math.abs(u)<E)&&(u=0),this.limit=u,s&&(this.playheadInternal=(((this.tick+1-this.tickSampleCountdown/r)/2+this.part)/n.partsPerBeat+this.beat)/a.beatsPerBar+this.bar)}freeTone(t){this.tonePool.pushBack(t)}newTone(){if(this.tonePool.count()>0){const t=this.tonePool.popBack();return t.freshlyAllocated=!0,t}return new nt}releaseTone(t,e){t.releasedTones.pushFront(e),e.atNoteStart=!1,e.passedEndOfNote=!0}freeReleasedTone(t,e){this.freeTone(t.releasedTones.get(e)),t.releasedTones.remove(e)}freeAllTones(){for(const t of this.channels)for(const e of t.instruments){for(;e.activeTones.count()>0;)this.freeTone(e.activeTones.popBack());for(;e.activeModTones.count()>0;)this.freeTone(e.activeModTones.popBack());for(;e.releasedTones.count()>0;)this.freeTone(e.releasedTones.popBack());for(;e.liveInputTones.count()>0;)this.freeTone(e.liveInputTones.popBack())}}determineLiveInputTones(t,e){const n=t.channels[e],i=this.channels[e],s=this.liveInputPitches;for(let t=0;t<n.instruments.length;t++){const a=i.instruments[t],r=a.liveInputTones;let o=0;if(this.liveInputDuration>0&&e==this.liveInputChannel&&s.length>0&&-1!=this.liveInputInstruments.indexOf(t)){const e=n.instruments[t];if(e.getChord().singleTone){let n;r.count()<=o?(n=this.newTone(),r.pushBack(n)):!e.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(a,r.get(o)),n=this.newTone(),r.set(o,n)):n=r.get(o),o++;for(let t=0;t<s.length;t++)n.pitches[t]=s[t];n.pitchCount=s.length,n.chordSize=1,n.instrumentIndex=t,n.note=n.prevNote=n.nextNote=null,n.atNoteStart=this.liveInputStarted,n.forceContinueAtStart=!1,n.forceContinueAtEnd=!1}else for(let n=0;n<s.length;n++){let i;r.count()<=o?(i=this.newTone(),r.pushBack(i)):!e.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(a,r.get(o)),i=this.newTone(),r.set(o,i)):i=r.get(o),o++,i.pitches[0]=s[n],i.pitchCount=1,i.chordSize=s.length,i.instrumentIndex=t,i.note=i.prevNote=i.nextNote=null,i.atNoteStart=this.liveInputStarted,i.forceContinueAtStart=!1,i.forceContinueAtEnd=!1}}for(;r.count()>o;)this.releaseTone(a,r.popBack())}this.liveInputStarted=!1}adjacentPatternHasCompatibleInstrumentTransition(t,e,n,i,s,a,r,o,l,h){if(t.patternInstruments&&-1==i.instruments.indexOf(s)){if(n.instruments.length>1||i.instruments.length>1)return null;const t=e.instruments[i.instruments[0]];if(h)return t.getChord();const s=t.getTransition();return a.includeAdjacentPatterns&&s.includeAdjacentPatterns&&s.slides==a.slides?t.getChord():null}return h||a.includeAdjacentPatterns?r:null}static adjacentNotesHaveMatchingPitches(t,e){if(t.pitches.length!=e.pitches.length)return!1;const n=t.pins[t.pins.length-1].interval;for(const i of t.pitches)if(-1==e.pitches.indexOf(i+n))return!1;return!0}determineCurrentActiveTones(t,e,i){const s=t.channels[e],a=this.channels[e],r=t.getPattern(e,this.bar),o=this.getCurrentPart(),l=this.tick+n.ticksPerPart*o;if(i&&t.getChannelIsMod(e)){let i=[],h=[],c=[],u=n.modCount;for(;u--;)i.push(null),h.push(null),c.push(null);if(null!=r&&!s.muted)for(let t=0;t<r.notes.length;t++)r.notes[t].end<=o?(null==h[r.notes[t].pitches[0]]||r.notes[t].end>h[r.notes[t].pitches[0]].start)&&(h[r.notes[t].pitches[0]]=r.notes[t]):r.notes[t].start<=o&&r.notes[t].end>o?i[r.notes[t].pitches[0]]=r.notes[t]:r.notes[t].start>o&&(null==c[r.notes[t].pitches[0]]||r.notes[t].start<c[r.notes[t].pitches[0]].start)&&(c[r.notes[t].pitches[0]]=r.notes[t]);let f=0;const p=t.patternInstruments&&null!=r?r.instruments[0]:0,d=a.instruments[p],m=d.activeModTones;for(let t=0;t<n.modCount;t++){if(null!=i[t]&&(null!=h[t]&&h[t].end!=i[t].start&&(h[t]=null),null!=c[t]&&c[t].start!=i[t].end&&(c[t]=null)),null!=a.singleSeamlessInstrument&&a.singleSeamlessInstrument!=p&&a.singleSeamlessInstrument<a.instruments.length){const t=a.instruments[a.singleSeamlessInstrument],e=a.instruments[p];for(;t.activeModTones.count()>0;)e.activeModTones.pushFront(t.activeModTones.popBack())}if(a.singleSeamlessInstrument=p,null!=i[t]){let e=h[t],s=c[t],a=!1,r=!1;const o=n.ticksPerPart*i[t].start==l&&this.isAtStartOfTick;let u;if(m.count()<=f)u=this.newTone(),m.pushBack(u);else if(o&&null==e){const t=m.get(f);t.isOnLastTick?this.freeTone(t):this.releaseTone(d,t),u=this.newTone(),m.set(f,u)}else u=m.get(f);f++;for(let e=0;e<i[t].pitches.length;e++)u.pitches[e]=i[t].pitches[e];u.pitchCount=i[t].pitches.length,u.chordSize=1,u.instrumentIndex=p,u.note=i[t],u.noteStartPart=i[t].start,u.noteEndPart=i[t].end,u.prevNote=e,u.nextNote=s,u.prevNotePitchIndex=0,u.nextNotePitchIndex=0,u.atNoteStart=o,u.passedEndOfNote=!1,u.forceContinueAtStart=a,u.forceContinueAtEnd=r}}for(;m.count()>f;){const n=m.popBack(),i=t.channels[e];if(n.instrumentIndex<i.instruments.length&&!n.isOnLastTick){const t=this.channels[e].instruments[n.instrumentIndex];this.releaseTone(t,n)}else this.freeTone(n)}}else if(!t.getChannelIsMod(e)){let h=null,c=null,u=null;if(i&&null!=r&&!s.muted){for(let t=0;t<r.notes.length;t++)if(r.notes[t].end<=o)c=r.notes[t];else if(r.notes[t].start<=o&&r.notes[t].end>o)h=r.notes[t];else if(r.notes[t].start>o){u=r.notes[t];break}null!=h&&(null!=c&&c.end!=h.start&&(c=null),null!=u&&u.start!=h.end&&(u=null))}if(null!=r&&(!t.layeredInstruments||1==s.instruments.length||t.patternInstruments&&1==r.instruments.length)){const e=t.patternInstruments?r.instruments[0]:0;if(null!=a.singleSeamlessInstrument&&a.singleSeamlessInstrument!=e&&a.singleSeamlessInstrument<a.instruments.length){const t=a.instruments[a.singleSeamlessInstrument],n=a.instruments[e];for(;t.activeTones.count()>0;)n.activeTones.pushFront(t.activeTones.popBack())}a.singleSeamlessInstrument=e}else a.singleSeamlessInstrument=null;for(let i=0;i<s.instruments.length;i++){const f=a.instruments[i],p=f.activeTones;let d=0;if(null!=h&&(!t.patternInstruments||-1!=r.instruments.indexOf(i))){const a=s.instruments[i];let m=c,y=u;const g=n.partsPerBeat*t.beatsPerBar,v=a.getTransition(),b=a.getChord();let M=!1,S=!1,w=0,k=0;if(0==h.start){let n=null==this.prevBar?null:t.getPattern(e,this.prevBar);if(null!=n){const e=n.notes.length<=0?null:n.notes[n.notes.length-1];if(null!=e&&e.end==g){const a=h.continuesLastPattern&&at.adjacentNotesHaveMatchingPitches(e,h),o=this.adjacentPatternHasCompatibleInstrumentTransition(t,s,r,n,i,v,b,h,e,a);null!=o&&(m=e,w=o.singleTone?1:m.pitches.length,M=a)}}}else null!=m&&(w=b.singleTone?1:m.pitches.length);if(h.end==g){let n=null==this.nextBar?null:t.getPattern(e,this.nextBar);if(null!=n){const e=n.notes.length<=0?null:n.notes[0];if(null!=e&&0==e.start){const a=e.continuesLastPattern&&at.adjacentNotesHaveMatchingPitches(h,e),o=this.adjacentPatternHasCompatibleInstrumentTransition(t,s,r,n,i,v,b,h,e,a);null!=o&&(y=e,k=o.singleTone?1:y.pitches.length,S=a)}}}else null!=y&&(k=b.singleTone?1:y.pitches.length);if(b.singleTone){const t=n.ticksPerPart*h.start==l&&this.isAtStartOfTick;let e;if(p.count()<=d)e=this.newTone(),p.pushBack(e);else if(!t||(v.isSeamless||a.clicklessTransition||M)&&null!=m)e=p.get(d);else{const t=p.get(d);t.isOnLastTick?this.freeTone(t):this.releaseTone(f,t),e=this.newTone(),p.set(d,e)}d++;for(let t=0;t<h.pitches.length;t++)e.pitches[t]=h.pitches[t];e.pitchCount=h.pitches.length,e.chordSize=1,e.instrumentIndex=i,e.note=h,e.noteStartPart=h.start,e.noteEndPart=h.end,e.prevNote=m,e.nextNote=y,e.prevNotePitchIndex=0,e.nextNotePitchIndex=0,e.atNoteStart=t,e.passedEndOfNote=!1,e.forceContinueAtStart=M,e.forceContinueAtEnd=S}else{const t=a.getTransition();if((t.isSeamless&&!t.slides&&0==b.strumParts||M)&&n.ticksPerPart*h.start==l&&this.isAtStartOfTick&&null!=m){for(let t=0;t<p.count();t++){const e=p.get(t),n=e.pitches[0]+e.lastInterval;for(let i=0;i<h.pitches.length;i++)if(h.pitches[i]==n){this.tempMatchedPitchTones[i]=e,p.remove(t),t--;break}}for(;p.count()>0;){const t=p.popFront();for(let e=0;e<this.tempMatchedPitchTones.length;e++)if(null==this.tempMatchedPitchTones[e]){this.tempMatchedPitchTones[e]=t;break}}}let e=0;for(let s=0;s<h.pitches.length;s++){let a=w>s?m:null,r=h,c=k>s?y:null,u=r.start+e,g=!1;if(u>o){if(!(p.count()>s&&(t.isSeamless||M)&&null!=a))break;c=r,r=a,a=null,u=r.start+e,g=!0}let v=r.end;(t.isSeamless||M)&&null!=c&&(v=Math.min(n.partsPerBeat*this.song.beatsPerBar,v+e)),(t.continues||M)&&null!=a||(e+=b.strumParts);const I=n.ticksPerPart*u==l&&this.isAtStartOfTick;let F;if(null!=this.tempMatchedPitchTones[d])F=this.tempMatchedPitchTones[d],this.tempMatchedPitchTones[d]=null,p.pushBack(F);else if(p.count()<=d)F=this.newTone(),p.pushBack(F);else if(!I||(t.isSeamless||M)&&null!=a)F=p.get(d);else{const t=p.get(d);t.isOnLastTick?this.freeTone(t):this.releaseTone(f,t),F=this.newTone(),p.set(d,F)}d++,F.pitches[0]=r.pitches[s],F.pitchCount=1,F.chordSize=r.pitches.length,F.instrumentIndex=i,F.note=r,F.noteStartPart=u,F.noteEndPart=v,F.prevNote=a,F.nextNote=c,F.prevNotePitchIndex=s,F.nextNotePitchIndex=s,F.atNoteStart=I,F.passedEndOfNote=g,F.forceContinueAtStart=M&&null!=a,F.forceContinueAtEnd=S&&null!=c}}}for(;p.count()>d;){const n=p.popBack(),i=t.channels[e];if(n.instrumentIndex<i.instruments.length&&!n.isOnLastTick){const t=this.channels[e].instruments[n.instrumentIndex];this.releaseTone(t,n)}else this.freeTone(n)}for(let t=d;t<this.tempMatchedPitchTones.length;t++){const e=this.tempMatchedPitchTones[t];null!=e&&(e.isOnLastTick?this.freeTone(e):this.releaseTone(f,e),this.tempMatchedPitchTones[t]=null)}}}}playTone(t,e,n,i,s,a,r,o){const l=t.channels[e],h=this.channels[e],c=l.instruments[a.instrumentIndex],u=h.instruments[a.instrumentIndex];u.awake=!0,u.tonesAddedInThisTick=!0,u.computed||u.compute(this,c,n,s,a,e,a.instrumentIndex),at.computeTone(this,t,e,n,s,a,r,o);at.getInstrumentSynthFunction(c)(this,i,s,a,c),a.envelopeComputer.clearEnvelopes(c)}playModTone(t,e,i,s,a,r,o,l){const h=t.channels[e].instruments[r.instrumentIndex];if(null!=r.note){const t=this.getTicksIntoBar(),e=t/n.ticksPerPart,o=(t+1)/n.ticksPerPart,l=this.tickSampleCountdown,c=e+(o-e)*(1-l/i),u=e+(o-e)*(1-(l-a)/i),f=n.ticksPerPart*c,p=n.ticksPerPart*u,d=r.note.getEndPinIndex(this.getCurrentPart()),m=r.note.pins[d-1],y=r.note.pins[d],g=(r.note.start+m.time)*n.ticksPerPart,v=(r.note.start+y.time)*n.ticksPerPart,b=(f-g)/(v-g),M=(p-g)/(v-g);r.expressionStarts[0]=m.size+(y.size-m.size)*b,r.expressionDeltas[0]=m.size+(y.size-m.size)*M-r.expressionStarts[0],at.modSynth(this,s,a,r,h)}}static computeChordExpression(t){return 1/(.25*(t-1)+1)}static computeTone(t,e,i,s,a,r,o,l){const h=e.channels[i].instruments[r.instrumentIndex],u=h.getTransition(),f=h.getChord(),p=f.singleTone?1:at.computeChordExpression(r.chordSize),v=e.getChannelIsNoise(i),b=v?n.noiseInterval:1,M=n.ticksPerPart*s/t.samplesPerSecond,S=1/t.samplesPerSecond,w=1/n.partsPerBeat,k=t.tickSampleCountdown,I=1-k/s,F=1-(k-a)/s,P=t.getTicksIntoBar(),T=P/n.ticksPerPart,q=(P+1)/n.ticksPerPart,x=T+(q-T)*I,D=T+(q-T)*F,O=t.getCurrentPart();r.specialIntervalMult=1,r.specialIntervalExpressionMult=1;let E=l,C=0,A=0,L=1,z=1,H=p,N=p,G=16,V=n.keys[e.key].basePitch,B=1,$=48;if(3==h.type)B=n.spectrumBaseExpression,v&&(V=n.spectrumBasePitch,B*=2),G=n.spectrumBasePitch,$=28;else if(4==h.type)V=n.spectrumBasePitch,B=n.drumsetBaseExpression,G=V;else if(2==h.type)V=n.chipNoises[h.chipNoise].basePitch,B=n.noiseBaseExpression,G=V,$=n.chipNoises[h.chipNoise].isSoft?24:60;else if(1==h.type||10==h.type)B=n.fmBaseExpression;else if(0==h.type||8==h.type)B=n.chipBaseExpression;else if(5==h.type)B=n.harmonicsBaseExpression;else if(6==h.type)B=n.pwmBaseExpression;else if(7==h.type)B=n.pickedStringBaseExpression;else{if(9!=h.type)throw new Error("Unknown instrument type in computeTone.");B=1,G=0,$=1,V=0}(r.atNoteStart&&!u.isSeamless&&!r.forceContinueAtStart||r.freshlyAllocated)&&r.reset(),r.freshlyAllocated=!1;const W=Math.max(n.maxChordSize,n.operatorCount+2);for(let t=0;t<W;t++)r.phaseDeltas[t]=0,r.expressionStarts[t]=0,r.expressionDeltas[t]=0,r.phaseDeltaScales[t]=0;if(o){const t=r.ticksSinceReleased+I,e=r.ticksSinceReleased+F;C=A=r.lastInterval;const i=Math.abs(h.getFadeOutTicks());L=at.noteSizeToVolumeMult((1-t/i)*n.noteSizeMax),z=at.noteSizeToVolumeMult((1-e/i)*n.noteSizeMax),l&&(L*=1-I,z*=1-F),r.ticksSinceReleased+1>=i&&(E=!0)}else if(null==r.note)L=z=1,r.lastInterval=0,r.ticksSinceReleased=0,r.liveInputSamplesHeld+=a;else{const e=r.note,i=r.nextNote,s=r.noteStartPart,a=r.noteEndPart,o=e.getEndPinIndex(O),l=e.pins[o-1],c=e.pins[o],f=s*n.ticksPerPart,p=a*n.ticksPerPart,d=(e.start+l.time)*n.ticksPerPart,m=(e.start+c.time)*n.ticksPerPart;r.ticksSinceReleased=0;const y=O*n.ticksPerPart+t.tick,g=O*n.ticksPerPart+t.tick+1,v=y-f,b=g-f,M=Math.min(1,(y-d)/(m-d)),S=Math.min(1,(g-d)/(m-d));let w=1,k=1,P=l.interval+(c.interval-l.interval)*M,T=l.interval+(c.interval-l.interval)*S;if(r.lastInterval=T,!u.isSeamless&&!r.forceContinueAtEnd||null==i){const t=-h.getFadeOutTicks();if(t>0){const e=p-f;w*=Math.min(1,(e-v)/t),k*=Math.min(1,(e-b)/t),g>=f+e&&(E=!0)}}C=P+(T-P)*I,A=P+(T-P)*F,L=w+(k-w)*I,z=w+(k-w)*F}r.isOnLastTick=E;let j,U,K=h.noteFilter;if(h.noteFilterType){const e=h.noteFilter;null==h.noteSubFilters[1]&&(h.noteSubFilters[1]=new Q);const s=h.noteSubFilters[1];let a=h.noteFilterSimpleCut,o=h.noteFilterSimplePeak,l=h.noteFilterSimpleCut,c=h.noteFilterSimplePeak,u=!1;t.isModActive(n.modulators.dictionary["note filt cut"].index,i,r.instrumentIndex)&&(a=t.getModValue(n.modulators.dictionary["note filt cut"].index,i,r.instrumentIndex,!1),l=t.getModValue(n.modulators.dictionary["note filt cut"].index,i,r.instrumentIndex,!0),u=!0),t.isModActive(n.modulators.dictionary["note filt peak"].index,i,r.instrumentIndex)&&(o=t.getModValue(n.modulators.dictionary["note filt peak"].index,i,r.instrumentIndex,!1),c=t.getModValue(n.modulators.dictionary["note filt peak"].index,i,r.instrumentIndex,!0),u=!0),e.convertLegacySettingsForSynth(a,o,!u),s.convertLegacySettingsForSynth(l,c,!u),j=e.controlPoints[0],U=s.controlPoints[0],h.noteFilter=e,h.tmpNoteFilterStart=e}const _=r.envelopeComputer;_.computeEnvelopes(h,O,n.ticksPerPart*x,n.ticksPerPart*D,M*(D-x),r);const Y=r.envelopeComputer.envelopeStarts,X=r.envelopeComputer.envelopeEnds;if(h.noteFilter=K,null!=r.note&&u.slides){const t=r.prevNote,e=r.nextNote;if(null!=t){const e=t.pitches[r.prevNotePitchIndex]+t.pins[t.pins.length-1].interval-r.pitches[0];if(_.prevSlideStart&&(C+=e*_.prevSlideRatioStart),_.prevSlideEnd&&(A+=e*_.prevSlideRatioEnd),!f.singleTone){const e=t.pitches.length-r.chordSize;_.prevSlideStart&&(H=at.computeChordExpression(r.chordSize+e*_.prevSlideRatioStart)),_.prevSlideEnd&&(N=at.computeChordExpression(r.chordSize+e*_.prevSlideRatioEnd))}}if(null!=e){const t=e.pitches[r.nextNotePitchIndex]-(r.pitches[0]+r.note.pins[r.note.pins.length-1].interval);if(_.nextSlideStart&&(C+=t*_.nextSlideRatioStart),_.nextSlideEnd&&(A+=t*_.nextSlideRatioEnd),!f.singleTone){const t=e.pitches.length-r.chordSize;_.nextSlideStart&&(H=at.computeChordExpression(r.chordSize+t*_.nextSlideRatioStart)),_.nextSlideEnd&&(N=at.computeChordExpression(r.chordSize+t*_.nextSlideRatioEnd))}}}if(d(h.effects)){let e=n.justIntonationSemitones[h.pitchShift]/b,s=1,a=1;t.isModActive(n.modulators.dictionary["pitch shift"].index,i,r.instrumentIndex)&&(e=n.justIntonationSemitones[n.justIntonationSemitones.length-1],s=t.getModValue(n.modulators.dictionary["pitch shift"].index,i,r.instrumentIndex,!1)/n.pitchShiftCenter,a=t.getModValue(n.modulators.dictionary["pitch shift"].index,i,r.instrumentIndex,!0)/n.pitchShiftCenter);C+=e*Y[14]*s,A+=e*X[14]*a}if(m(h.effects)||t.isModActive(n.modulators.dictionary["song detune"].index,i,r.instrumentIndex)){const e=Y[15],s=X[15];let a=h.detune,o=h.detune;t.isModActive(n.modulators.dictionary.detune.index,i,r.instrumentIndex)&&(a=t.getModValue(n.modulators.dictionary.detune.index,i,r.instrumentIndex,!1)+n.detuneCenter,o=t.getModValue(n.modulators.dictionary.detune.index,i,r.instrumentIndex,!0)+n.detuneCenter),t.isModActive(n.modulators.dictionary["song detune"].index,i,r.instrumentIndex)&&(a+=4*t.getModValue(n.modulators.dictionary["song detune"].index,i,r.instrumentIndex,!1),o+=4*t.getModValue(n.modulators.dictionary["song detune"].index,i,r.instrumentIndex,!0)),C+=at.detuneToCents(a*e)*n.pitchesPerOctave/1200,A+=at.detuneToCents(o*s)*n.pitchesPerOctave/1200}if(y(h.effects)){let e,s,a,o;if(h.vibrato==n.vibratos.length?(e=2*h.vibratoDelay,h.vibratoDelay==n.modulators.dictionary["vibrato delay"].maxRawVol&&(e=Number.POSITIVE_INFINITY),s=h.vibratoDepth,a=s):(e=n.vibratos[h.vibrato].delayTicks,s=n.vibratos[h.vibrato].amplitude,a=s),t.isModActive(n.modulators.dictionary["vibrato delay"].index,i,r.instrumentIndex)&&(e=2*t.getModValue(n.modulators.dictionary["vibrato delay"].index,i,r.instrumentIndex,!1),e==2*n.modulators.dictionary["vibrato delay"].maxRawVol&&(e=Number.POSITIVE_INFINITY)),t.isModActive(n.modulators.dictionary["vibrato depth"].index,i,r.instrumentIndex)&&(s=t.getModValue(n.modulators.dictionary["vibrato depth"].index,i,r.instrumentIndex,!1)/25,a=t.getModValue(n.modulators.dictionary["vibrato depth"].index,i,r.instrumentIndex,!0)/25),null!=r.prevVibrato)o=r.prevVibrato;else{if(o=s*at.getLFOAmplitude(h,M*h.LFOtime)*Y[16],e>0){const t=e-_.noteTicksStart;o*=Math.max(0,Math.min(1,1-t/2))}}let l=at.getLFOAmplitude(h,M*h.nextLFOtime);const c=X[16];if(9!=h.type){let t=a*l*c;if(e>0){const n=e-_.noteTicksEnd;t*=Math.max(0,Math.min(1,1-n/2))}r.prevVibrato=t,C+=o,A+=t}}if(!u.isSeamless&&!r.forceContinueAtStart||null==r.prevNote){const t=h.getFadeInSeconds();t>0&&(L*=Math.min(1,_.noteSecondsStart/t),z*=Math.min(1,_.noteSecondsEnd/t))}4==h.type&&null==r.drumsetPitch&&(r.drumsetPitch=r.pitches[0],null!=r.note&&(r.drumsetPitch+=r.note.pickMainInterval()),r.drumsetPitch=Math.max(0,Math.min(n.drumCount-1,r.drumsetPitch)));let nt=_.lowpassCutoffDecayVolumeCompensation;if(g(h.effects)){const e=Y[1],n=X[1];if(h.noteFilterType){const i=Y[17],s=X[17],o=Y[25],l=X[25];j.toCoefficients(at.tempFilterStartCoefficients,t.samplesPerSecond,e*i,o),U.toCoefficients(at.tempFilterEndCoefficients,t.samplesPerSecond,n*s,l),r.noteFilters.length<1&&(r.noteFilters[0]=new R),r.noteFilters[0].loadCoefficientsWithGradient(at.tempFilterStartCoefficients,at.tempFilterEndCoefficients,1/a,0==j.type),nt*=j.getVolumeCompensationMult(),r.noteFilterCount=1}else{const i=null!=h.tmpNoteFilterStart?h.tmpNoteFilterStart:h.noteFilter;for(let s=0;s<i.controlPointCount;s++){const o=Y[17+s],l=X[17+s],c=Y[25+s],u=X[25+s];let f=i.controlPoints[s];const p=null!=h.tmpNoteFilterEnd&&null!=h.tmpNoteFilterEnd.controlPoints[s]?h.tmpNoteFilterEnd.controlPoints[s]:i.controlPoints[s];f.type!=p.type&&(f=p),f.toCoefficients(at.tempFilterStartCoefficients,t.samplesPerSecond,e*o,c),p.toCoefficients(at.tempFilterEndCoefficients,t.samplesPerSecond,n*l,u),r.noteFilters.length<=s&&(r.noteFilters[s]=new R),r.noteFilters[s].loadCoefficientsWithGradient(at.tempFilterStartCoefficients,at.tempFilterEndCoefficients,1/a,0==f.type),nt*=f.getVolumeCompensationMult()}r.noteFilterCount=i.controlPointCount}}else r.noteFilterCount=0;if(4==h.type){const e=h.getDrumsetEnvelope(r.drumsetPitch);nt*=et.getLowpassCutoffDecayVolumeCompensation(e);let n=et.computeEnvelope(e,_.noteSecondsStart,w*x,_.noteSizeStart),i=et.computeEnvelope(e,_.noteSecondsEnd,w*D,_.noteSizeEnd);if(_.prevSlideStart){n+=(et.computeEnvelope(e,_.prevNoteSecondsStart,w*x,_.prevNoteSize)-n)*_.prevSlideRatioStart}if(_.prevSlideEnd){i+=(et.computeEnvelope(e,_.prevNoteSecondsEnd,w*D,_.prevNoteSize)-i)*_.prevSlideRatioEnd}if(_.nextSlideStart){n+=(et.computeEnvelope(e,0,w*x,_.nextNoteSize)-n)*_.nextSlideRatioStart}if(_.nextSlideEnd){i+=(et.computeEnvelope(e,0,w*D,_.nextNoteSize)-i)*_.nextSlideRatioEnd}const s=t.tempDrumSetControlPoint;s.type=0,s.gain=J.getRoundedSettingValueFromLinearGain(.5),s.freq=J.getRoundedSettingValueFromHz(8e3),s.toCoefficients(at.tempFilterStartCoefficients,t.samplesPerSecond,n*(1+n),1),s.toCoefficients(at.tempFilterEndCoefficients,t.samplesPerSecond,i*(1+i),1),r.noteFilters.length==r.noteFilterCount&&(r.noteFilters[r.noteFilterCount]=new R),r.noteFilters[r.noteFilterCount].loadCoefficientsWithGradient(at.tempFilterStartCoefficients,at.tempFilterEndCoefficients,1/a,!0),r.noteFilterCount++}if(nt=Math.min(3,nt),1==h.type||10==h.type){let e=1,s=0,o=0;const l=f.arpeggiates;if(r.pitchCount>1&&l){const t=Math.floor(h.arpTime/n.ticksPerArpeggio);o=r.pitches[c(r.pitchCount,h.fastTwoNoteArp,t)]-r.pitches[0]}const u=10==h.type?h.customAlgorithm.carrierCount:n.algorithms[h.algorithm].carrierCount;for(let c=0;c<(10==h.type?6:n.operatorCount);c++){const f=10==h.type?h.customAlgorithm.associatedCarrier[c]-1:n.algorithms[h.algorithm].associatedCarrier[c]-1,p=r.pitches[l?0:c<r.pitchCount?c:f<r.pitchCount?f:0],d=n.operatorFrequencies[h.operators[c].frequency].mult,m=n.operatorCarrierInterval[f]+o,y=V+(p+C)*b+m,g=V+(p+A)*b+m,v=Z.frequencyFromPitch(y),M=Z.frequencyFromPitch(g),w=n.operatorFrequencies[h.operators[c].frequency].hzOffset,k=d*v+w,I=d*M+w,F=Y[5+c],P=X[5+c];let T,q;1!=F||1!=P?(T=Math.pow(2,Math.log2(k/v)*F)*v,q=Math.pow(2,Math.log2(I/M)*P)*M):(T=k,q=I),r.phaseDeltas[c]=T*S*n.sineWaveLength,r.phaseDeltaScales[c]=Math.pow(q/T,1/a);let x=h.operators[c].amplitude,D=h.operators[c].amplitude;c<4?t.isModActive(n.modulators.dictionary["fm slider 1"].index+c,i,r.instrumentIndex)&&(x*=t.getModValue(n.modulators.dictionary["fm slider 1"].index+c,i,r.instrumentIndex,!1)/15,D*=t.getModValue(n.modulators.dictionary["fm slider 1"].index+c,i,r.instrumentIndex,!0)/15):t.isModActive(n.modulators.dictionary["fm slider 5"].index+c-4,i,r.instrumentIndex)&&(x*=t.getModValue(n.modulators.dictionary["fm slider 5"].index+c-4,i,r.instrumentIndex,!1)/15,D*=t.getModValue(n.modulators.dictionary["fm slider 5"].index+c-4,i,r.instrumentIndex,!0)/15);const O=at.operatorAmplitudeCurve(x),R=at.operatorAmplitudeCurve(D);let E=O*n.operatorFrequencies[h.operators[c].frequency].amplitudeSign,W=R*n.operatorFrequencies[h.operators[c].frequency].amplitudeSign;if(c<u){const t=Math.pow(2,-(y-G)/$),e=Math.pow(2,-(g-G)/$);E*=B*t*L*nt*H,W*=B*e*z*nt*N,E*=Y[0],W*=X[0],s+=R}else E*=1.5*n.sineWaveLength,W*=1.5*n.sineWaveLength,e*=1-Math.min(1,h.operators[c].amplitude/15);if(E*=Y[9+c],W*=X[9+c],t.isModActive(n.modulators.dictionary["note volume"].index,i,r.instrumentIndex)){const e=t.getModValue(n.modulators.dictionary["note volume"].index,i,r.instrumentIndex,!1),s=t.getModValue(n.modulators.dictionary["note volume"].index,i,r.instrumentIndex,!0);E*=e<=0?(e+n.volumeRange/2)/(n.volumeRange/2):this.instrumentVolumeToVolumeMult(e),W*=s<=0?(s+n.volumeRange/2)/(n.volumeRange/2):this.instrumentVolumeToVolumeMult(s)}r.expressionStarts[c]=E,r.expressionDeltas[c]=(W-E)/a}e*=(Math.pow(2,2-1.4*h.feedbackAmplitude/15)-1)/3,e*=1-Math.min(1,Math.max(0,s-1)/2),e=1+3*e;for(let t=0;t<u;t++)r.expressionStarts[t]*=e,r.expressionDeltas[t]*=e;let p=h.feedbackAmplitude,d=h.feedbackAmplitude;t.isModActive(n.modulators.dictionary["fm feedback"].index,i,r.instrumentIndex)&&(p*=t.getModValue(n.modulators.dictionary["fm feedback"].index,i,r.instrumentIndex,!1)/15,d*=t.getModValue(n.modulators.dictionary["fm feedback"].index,i,r.instrumentIndex,!0)/15);let m=.3*n.sineWaveLength*p/15;const y=.3*n.sineWaveLength*d/15;let g=m*Y[13],v=y*X[13];r.feedbackMult=g,r.feedbackDelta=(v-r.feedbackMult)/a}else{const e=Math.pow(2,(A-C)*b/12/a);let s=r.pitches[0];if(r.pitchCount>1&&(f.arpeggiates||f.customInterval)){const t=Math.floor(h.arpTime/n.ticksPerArpeggio);if(f.customInterval){const e=r.pitches[1+c(r.pitchCount-1,h.fastTwoNoteArp,t)]-r.pitches[0];r.specialIntervalMult=Math.pow(2,e/12),r.specialIntervalExpressionMult=Math.pow(2,-e/$)}else s=r.pitches[c(r.pitchCount,h.fastTwoNoteArp,t)]}const o=V+(s+C)*b,l=V+(s+A)*b;let p=Math.pow(2,-(o-G)/$),d=Math.pow(2,-(l-G)/$),m=B*nt;if(2==h.type&&(m*=n.chipNoises[h.chipNoise].expression),0==h.type&&(m*=n.chipWaves[h.chipWave].expression),6==h.type){const e=h.pulseWidth/(2*n.pulseWidthRange);let s=e,o=e;t.isModActive(n.modulators.dictionary["pulse width"].index,i,r.instrumentIndex)&&(s=t.getModValue(n.modulators.dictionary["pulse width"].index,i,r.instrumentIndex,!1)/(2*n.pulseWidthRange),o=t.getModValue(n.modulators.dictionary["pulse width"].index,i,r.instrumentIndex,!0)/(2*n.pulseWidthRange));const l=s*Y[2],c=o*X[2];r.pulseWidth=l,r.pulseWidthDelta=(c-l)/a}if(7==h.type){let e=h.stringSustain,s=h.stringSustain;t.isModActive(n.modulators.dictionary.sustain.index,i,r.instrumentIndex)&&(e=t.getModValue(n.modulators.dictionary.sustain.index,i,r.instrumentIndex,!1),s=t.getModValue(n.modulators.dictionary.sustain.index,i,r.instrumentIndex,!1)),r.stringSustainStart=e,r.stringSustainEnd=s,m*=Math.pow(2,.7*(1-e/(n.stringSustainRange-1)));const a=n.unisons[h.unison];for(let t=r.pickedStrings.length;t<a.voices;t++)r.pickedStrings[t]=new tt;if(r.atNoteStart&&!u.continues&&!r.forceContinueAtStart)for(const t of r.pickedStrings)t.delayIndex=-1}const y=Z.frequencyFromPitch(o);if(0==h.type||8==h.type||5==h.type||7==h.type){const t=n.unisons[h.unison],i=7==h.type?1:t.voices/2;m*=t.expression*i;const s=Y[4],o=X[4],l=Math.pow(2,(t.offset+t.spread)*s/12),c=Math.pow(2,(t.offset+t.spread)*o/12),u=Math.pow(2,(t.offset-t.spread)*s/12)*r.specialIntervalMult,f=Math.pow(2,(t.offset-t.spread)*o/12)*r.specialIntervalMult;r.phaseDeltas[0]=y*S*l,r.phaseDeltas[1]=y*S*u,r.phaseDeltaScales[0]=e*Math.pow(c/l,1/a),r.phaseDeltaScales[1]=e*Math.pow(f/u,1/a)}else r.phaseDeltas[0]=y*S,r.phaseDeltaScales[0]=e;let g=m*L*H*p*Y[0],v=m*z*N*d*X[0];if(t.isModActive(n.modulators.dictionary["note volume"].index,i,r.instrumentIndex)){const e=t.getModValue(n.modulators.dictionary["note volume"].index,i,r.instrumentIndex,!1),s=t.getModValue(n.modulators.dictionary["note volume"].index,i,r.instrumentIndex,!0);g*=e<=0?(e+n.volumeRange/2)/(n.volumeRange/2):this.instrumentVolumeToVolumeMult(e),v*=s<=0?(s+n.volumeRange/2)/(n.volumeRange/2):this.instrumentVolumeToVolumeMult(s)}r.expressionStarts[0]=g,r.expressionDeltas[0]=(v-g)/a}}static getLFOAmplitude(t,e){let i=0;for(const s of n.vibratoTypes[t.vibratoType].periodsSeconds)i+=Math.sin(2*Math.PI*e/s);return i}static getInstrumentSynthFunction(t){if(1==t.type){const e=t.algorithm+"_"+t.feedbackType;if(null==at.fmSynthFunctionCache[e]){const i=[];for(const e of at.fmSourceTemplate)if(-1!=e.indexOf("// CARRIER OUTPUTS")){const s=[];for(let e=0;e<n.algorithms[t.algorithm].carrierCount;e++)s.push("operator"+e+"Scaled");i.push(e.replace("/*operator#Scaled*/",s.join(" + ")))}else if(-1!=e.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let e=n.operatorCount-1;e>=0;e--)for(const s of at.operatorSourceTemplate)if(-1!=s.indexOf("/* + operator@Scaled*/")){let a="";for(const i of n.algorithms[t.algorithm].modulatedBy[e])a+=" + operator"+(i-1)+"Scaled";const r=n.feedbacks[t.feedbackType].indices[e];if(r.length>0){a+=" + feedbackMult * (";const t=[];for(const e of r)t.push("operator"+(e-1)+"Output");a+=t.join(" + ")+")"}i.push(s.replace(/\#/g,e+"").replace("/* + operator@Scaled*/",a))}else i.push(s.replace(/\#/g,e+""));else if(-1!=e.indexOf("#"))for(let t=0;t<n.operatorCount;t++)i.push(e.replace(/\#/g,t+""));else i.push(e);at.fmSynthFunctionCache[e]=new Function("synth","bufferIndex","runLength","tone","instrument",i.join("\n"))}return at.fmSynthFunctionCache[e]}if(0==t.type)return at.chipSynth;if(8==t.type)return at.chipSynth;if(5==t.type)return at.harmonicsSynth;if(6==t.type)return at.pulseWidthSynth;if(7==t.type)return at.pickedStringSynth;if(2==t.type)return at.noiseSynth;if(3==t.type)return at.spectrumSynth;if(4==t.type)return at.drumsetSynth;if(9==t.type)return at.modSynth;if(10==t.type){const e=t.customAlgorithm.name+"_"+t.customFeedbackType.name;if(null==at.fm6SynthFunctionCache[e]){const i=[];for(const e of at.fmSourceTemplate)if(-1!=e.indexOf("// CARRIER OUTPUTS")){const n=[];for(let e=0;e<t.customAlgorithm.carrierCount;e++)n.push("operator"+e+"Scaled");i.push(e.replace("/*operator#Scaled*/",n.join(" + ")))}else if(-1!=e.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let e=n.operatorCount+2-1;e>=0;e--)for(const n of at.operatorSourceTemplate)if(-1!=n.indexOf("/* + operator@Scaled*/")){let s="";for(const n of t.customAlgorithm.modulatedBy[e])s+=" + operator"+(n-1)+"Scaled";const a=t.customFeedbackType.indices[e];if(a.length>0){s+=" + feedbackMult * (";const t=[];for(const e of a)t.push("operator"+(e-1)+"Output");s+=t.join(" + ")+")"}i.push(n.replace(/\#/g,e+"").replace("/* + operator@Scaled*/",s))}else i.push(n.replace(/\#/g,e+""));else if(-1!=e.indexOf("#"))for(let t=0;t<n.operatorCount+2;t++)i.push(e.replace(/\#/g,t+""));else i.push(e);at.fm6SynthFunctionCache[e]=new Function("synth","bufferIndex","runLength","tone","instrument",i.join("\n"))}return at.fm6SynthFunctionCache[e]}throw new Error("Unrecognized instrument type: "+t.type)}static chipSynth(t,e,i,s,a){const r=v(a.effects)&&a.aliases,o=8==a.type,l=t.tempMonoInstrumentSampleBuffer;var h,c=1;o?r?(h=a.customChipWave,c=.05):(h=a.customChipWaveIntegral,c=.05):h=r?n.rawChipWaves[a.chipWave].samples:n.chipWaves[a.chipWave].samples;const u=h.length-1,f=s.specialIntervalExpressionMult*n.unisons[a.unison].sign;0!=a.unison||a.getChord().customInterval||(s.phases[1]=s.phases[0]);let p=s.phaseDeltas[0]*u,d=s.phaseDeltas[1]*u;const m=+s.phaseDeltaScales[0],y=+s.phaseDeltaScales[1];let g=+s.expressionStarts[0];const b=+s.expressionDeltas[0];let M=s.phases[0]%1*u,S=s.phases[1]%1*u;const w=s.noteFilters,k=0|s.noteFilterCount;let I=+s.initialNoteFilterInput1,F=+s.initialNoteFilterInput2;const P=at.applyFilters;let T=0,q=0;if(!r){const t=0|M,e=0|S,n=t%u,i=e%u,s=M-t,a=S-e;T=+h[n],q=+h[i],T+=(h[n+1]-T)*s,q+=(h[i+1]-q)*a}const x=e+i;for(let t=e;t<x;t++){let e,n,i;if(M+=p,S+=d,r)e=h[(0|M)%u],n=h[(0|S)%u],i=e+n;else{const t=0|M,s=0|S,a=t%u,r=s%u;let o=h[a],l=h[r];const c=M-t,m=S-s;o+=(h[a+1]-o)*c,l+=(h[r+1]-l)*m,e=(o-T)/p,n=(l-q)/d,T=o,q=l,i=e+n*f}const s=P(i,I,F,k,w);F=I,I=i,p*=m,d*=y;const a=s*g*c;g+=b,l[t]+=a}s.phases[0]=M/u,s.phases[1]=S/u,t.sanitizeFilters(w),s.initialNoteFilterInput1=I,s.initialNoteFilterInput2=F}static harmonicsSynth(t,e,i,s,a){const r=t.tempMonoInstrumentSampleBuffer,o=a.harmonicsWave.getCustomWave(a.type),l=o.length-1,h=s.specialIntervalExpressionMult*n.unisons[a.unison].sign;0!=a.unison||a.getChord().customInterval||(s.phases[1]=s.phases[0]);let c=s.phaseDeltas[0]*l,u=s.phaseDeltas[1]*l;const f=+s.phaseDeltaScales[0],p=+s.phaseDeltaScales[1];let d=+s.expressionStarts[0];const m=+s.expressionDeltas[0];let y=s.phases[0]%1*l,g=s.phases[1]%1*l;const v=s.noteFilters,b=0|s.noteFilterCount;let M=+s.initialNoteFilterInput1,S=+s.initialNoteFilterInput2;const w=at.applyFilters,k=0|y,I=0|g,F=k%l,P=I%l,T=y-k,q=g-I;let x=+o[F],D=+o[P];x+=(o[F+1]-x)*T,D+=(o[P+1]-D)*q;const O=e+i;for(let t=e;t<O;t++){y+=c,g+=u;const e=0|y,n=0|g,i=e%l,s=n%l;let a=o[i],k=o[s];const I=y-e,F=g-n;a+=(o[i+1]-a)*I,k+=(o[s+1]-k)*F;const P=(a-x)/c,T=(k-D)/u;x=a,D=k;const q=P+T*h,O=w(q,M,S,b,v);S=M,M=q,c*=f,u*=p;const R=O*d;d+=m,r[t]+=R}s.phases[0]=y/l,s.phases[1]=g/l,t.sanitizeFilters(v),s.initialNoteFilterInput1=M,s.initialNoteFilterInput2=S}static pickedStringSynth(t,e,i,s,a){const r=n.unisons[a.unison].voices;let o=at.pickedStringFunctionCache[r];if(null==o){let t="";t+=`\n\t\t\t\t\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst NoteAutomationStringSustainIndex = 3;\n\t\t\t\tconst voiceCount = ${r};\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tconst sustainEnvelopeStart = tone.envelopeComputer.envelopeStarts[NoteAutomationStringSustainIndex];\n\t\t\t\tconst sustainEnvelopeEnd   = tone.envelopeComputer.envelopeEnds[  NoteAutomationStringSustainIndex];\n\t\t\t\tconst stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\n\t\t\t\tconst stringDecayEnd   = 1.0 - Math.min(1.0, sustainEnvelopeEnd   * tone.stringSustainEnd / (Config.stringSustainRange - 1));\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\t\n\t\t\t\tconst prevDelayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet shelfSample# = +pickedString#.shelfSample;\n\t\t\t\tlet shelfPrevInput# = +pickedString#.shelfPrevInput;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expressionStarts[0];\n\t\t\t\tconst expressionDelta = +tone.expressionDeltas[0];\n\t\t\t\t\n\t\t\t\tconst phaseDeltaStart# = +tone.phaseDeltas[#];\n\t\t\t\tconst phaseDeltaScale# = +tone.phaseDeltaScales[#];\n\t\t\t\tconst phaseDeltaEnd# = phaseDeltaStart# * Math.pow(phaseDeltaScale#, runLength);\n\t\t\t\t\n\t\t\t\tconst radiansPerSampleStart# = Math.PI * 2.0 * phaseDeltaStart#;\n\t\t\t\tconst radiansPerSampleEnd#   = Math.PI * 2.0 * phaseDeltaEnd#;\n\t\t\t\t\n\t\t\t\tconst centerHarmonicStart# = radiansPerSampleStart# * 2.0;\n\t\t\t\tconst centerHarmonicEnd#   = radiansPerSampleEnd# * 2.0;\n\t\t\t\t\n\t\t\t\tconst allPassCenter = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n\t\t\t\tconst allPassRadiansStart# = Math.min(Math.PI, radiansPerSampleStart# * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart#, Config.pickedStringDispersionFreqScale));\n\t\t\t\tconst allPassRadiansEnd# = Math.min(Math.PI, radiansPerSampleEnd# * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd#, Config.pickedStringDispersionFreqScale));\n\t\t\t\t\n\t\t\t\tconst shelfRadians = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n\t\t\t\tconst decayCurveStart = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n\t\t\t\tconst decayCurveEnd   = (Math.pow(100.0, stringDecayEnd  ) - 1.0) / 99.0;\n\t\t\t\tconst decayRateStart# = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart#);\n\t\t\t\tconst decayRateEnd#   = Math.pow(0.5, decayCurveEnd   * shelfRadians / radiansPerSampleEnd#);\n\t\t\t\tconst shelfGainStart# = Math.pow(decayRateStart#, Config.stringDecayRate);\n\t\t\t\tconst shelfGainEnd#   = Math.pow(decayRateEnd#,   Config.stringDecayRate);\n\t\t\t\tconst expressionDecayStart# = Math.pow(decayRateStart#, 0.002);\n\t\t\t\tconst expressionDecayEnd#   = Math.pow(decayRateEnd#,   0.002);`;for(let e=0;e<r;e++)t+="\n\t\t\t\t\n\t\t\t\tSynth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart#);\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart#);\n\t\t\t\tlet allPassG# = +Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\n\t\t\t\tconst allPassPhaseDelayStart# = -synth.tempFrequencyResponse.angle() / centerHarmonicStart#;\n\t\t\t\t\n\t\t\t\tSynth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd#);\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd#);\n\t\t\t\tconst allPassGEnd# = +Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\n\t\t\t\tconst allPassPhaseDelayEnd# = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd#;\n\t\t\t\t\n\t\t\t\tSynth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, shelfGainStart#);\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart#)\n\t\t\t\tlet shelfA1# = +Synth.tempFilterStartCoefficients.a[1]\n\t\t\t\tlet shelfB0# = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart#\n\t\t\t\tlet shelfB1# = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart#\n\t\t\t\tconst shelfPhaseDelayStart# = -synth.tempFrequencyResponse.angle() / centerHarmonicStart#;\n\t\t\t\t\n\t\t\t\tSynth.tempFilterEndCoefficients.highShelf1stOrder(shelfRadians, shelfGainEnd#)\n\t\t\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd#)\n\t\t\t\tconst shelfA1End# = +Synth.tempFilterEndCoefficients.a[1]\n\t\t\t\tconst shelfB0End# = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd#\n\t\t\t\tconst shelfB1End# = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd#\n\t\t\t\tconst shelfPhaseDelayEnd# = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd#;".replace(/\#/g,String(e));t+="\n\t\t\t\t\n\t\t\t\tconst periodLengthStart# = 1.0 / phaseDeltaStart#;\n\t\t\t\tconst periodLengthEnd# = 1.0 / phaseDeltaEnd#;\n\t\t\t\tconst minBufferLength# = Math.ceil(Math.max(periodLengthStart#, periodLengthEnd#) * 2);\n\t\t\t\tlet delayLength# = periodLengthStart# - allPassPhaseDelayStart# - shelfPhaseDelayStart#;\n\t\t\t\tconst delayLengthEnd# = periodLengthEnd# - allPassPhaseDelayEnd# - shelfPhaseDelayEnd#;\n\t\t\t\t\n\t\t\t\tconst delayLengthDelta# = (delayLengthEnd# - delayLength#) / runLength;\n\t\t\t\tconst allPassGDelta# = (allPassGEnd# - allPassG#) / runLength;\n\t\t\t\tconst shelfA1Delta# = (shelfA1End# - shelfA1#) / runLength;\n\t\t\t\tconst shelfB0Delta# = (shelfB0End# - shelfB0#) / runLength;\n\t\t\t\tconst shelfB1Delta# = (shelfB1End# - shelfB1#) / runLength;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst pitchChanged# = Math.abs(Math.log2(delayLength# / prevDelayLength#)) > 0.01;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;";for(let e=0;e<r;e++)t+="\n\t\t\t\t\t\n\t\t\t\tconst reinitializeImpulse# = (delayIndex# == -1 || pitchChanged#);\n\t\t\t\tif (pickedString#.delayLine == null || pickedString#.delayLine.length <= minBufferLength#) {\n\t\t\t\t\t// The delay line buffer will get reused for other tones so might as well\n\t\t\t\t\t// start off with a buffer size that is big enough for most notes.\n\t\t\t\t\tconst likelyMaximumLength = Math.ceil(2 * synth.samplesPerSecond / beepbox.Instrument.frequencyFromPitch(12));\n\t\t\t\t\tconst newDelayLine = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength#)));\n\t\t\t\t\tif (!reinitializeImpulse# && pickedString#.delayLine != null) {\n\t\t\t\t\t\t// If the tone has already started but the buffer needs to be reallocated,\n\t\t\t\t\t\t// transfer the old data to the new buffer.\n\t\t\t\t\t\tconst oldDelayBufferMask = (pickedString#.delayLine.length - 1) >> 0;\n\t\t\t\t\t\tconst startCopyingFromIndex = delayIndex# + pickedString#.delayResetOffset;\n\t\t\t\t\t\tdelayIndex# = pickedString#.delayLine.length - pickedString#.delayResetOffset;\n\t\t\t\t\t\tfor (let i = 0; i < pickedString#.delayLine.length; i++) {\n\t\t\t\t\t\t\tnewDelayLine[i] = pickedString#.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpickedString#.delayLine = newDelayLine;\n\t\t\t\t}\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\n\t\t\t\tif (reinitializeImpulse#) {\n\t\t\t\t\t// -1 delay index means the tone was reset.\n\t\t\t\t\t// Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\n\t\t\t\t\t\n\t\t\t\t\tdelayIndex# = 0;\n\t\t\t\t\tallPassSample# = 0.0;\n\t\t\t\t\tallPassPrevInput# = 0.0;\n\t\t\t\t\tshelfSample# = 0.0;\n\t\t\t\t\tshelfPrevInput# = 0.0;\n\t\t\t\t\tfractionalDelaySample# = 0.0;\n\t\t\t\t\t\n\t\t\t\t\t// Clear away a region of the delay buffer for the new impulse.\n\t\t\t\t\tconst startImpulseFrom = -delayLength#;\n\t\t\t\t\tconst startZerosFrom = Math.floor(startImpulseFrom - periodLengthStart# / 2);\n\t\t\t\t\tconst stopZerosAt = Math.ceil(startZerosFrom + periodLengthStart# * 2);\n\t\t\t\t\tpickedString#.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\n\t\t\t\t\tfor (let i = startZerosFrom; i <= stopZerosAt; i++) {\n\t\t\t\t\t\tdelayLine#[i & delayBufferMask#] = 0.0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst impulseWave = instrument.harmonicsWave.getCustomWave(instrument.type);\n\t\t\t\t\tconst impulseWaveLength = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\t\t\t\t\tconst impulsePhaseDelta = impulseWaveLength / periodLengthStart#;\n\t\t\t\t\t\n\t\t\t\t\tconst fadeDuration = Math.min(periodLengthStart# * 0.2, synth.samplesPerSecond * 0.003);\n\t\t\t\t\tconst startImpulseFromSample = Math.ceil(startImpulseFrom);\n\t\t\t\t\tconst stopImpulseAt = startImpulseFrom + periodLengthStart# + fadeDuration;\n\t\t\t\t\tconst stopImpulseAtSample = stopImpulseAt;\n\t\t\t\t\tlet impulsePhase = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n\t\t\t\t\tlet prevWaveIntegral = 0.0;\n\t\t\t\t\tfor (let i = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n\t\t\t\t\t\tconst impulsePhaseInt = impulsePhase|0;\n\t\t\t\t\t\tconst index = impulsePhaseInt % impulseWaveLength;\n\t\t\t\t\t\tlet nextWaveIntegral = impulseWave[index];\n\t\t\t\t\t\tconst phaseRatio = impulsePhase - impulsePhaseInt;\n\t\t\t\t\t\tnextWaveIntegral += (impulseWave[index+1] - nextWaveIntegral) * phaseRatio;\n\t\t\t\t\t\tconst sample = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n\t\t\t\t\t\tconst fadeIn = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n\t\t\t\t\t\tconst fadeOut = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n\t\t\t\t\t\tconst combinedFade = fadeIn * fadeOut;\n\t\t\t\t\t\tconst curvedFade = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\n\t\t\t\t\t\tdelayLine#[i & delayBufferMask#] += sample * curvedFade;\n\t\t\t\t\t\tprevWaveIntegral = nextWaveIntegral;\n\t\t\t\t\t\timpulsePhase += impulsePhaseDelta;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;".replace(/\#/g,String(e));t+="\n\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * Config.unisons[instrument.unison].sign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n            //const floorStereoDelay: number = absStereoDelay | 0;\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tshelfSample# = shelfB0# * allPassSample# + shelfB1# * shelfPrevInput# - shelfA1# * shelfSample#;\n\t\t\t\t\tshelfPrevInput# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += shelfSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (";const e=[];for(let t=0;t<r;t++)e.push("fractionalDelaySample"+t+(1==t?" * unisonSign":""));t+=e.join(" + "),t+=") * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tshelfA1# += shelfA1Delta#;\n\t\t\t\t\tshelfB0# += shelfB0Delta#;\n\t\t\t\t\tshelfB1# += shelfB1Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(shelfSample#) || Math.abs(shelfSample#) < epsilon) shelfSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(shelfPrevInput#) || Math.abs(shelfPrevInput#) < epsilon) shelfPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.shelfSample = shelfSample#;\n\t\t\t\tpickedString#.shelfPrevInput = shelfPrevInput#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;",t=t.replace(/^.*\#.*$/gm,(t=>{const e=[];for(let n=0;n<r;n++)e.push(t.replace(/\#/g,String(n)));return e.join("\n")})),o=new Function("synth","bufferIndex","runLength","tone","instrument",t),at.pickedStringFunctionCache[r]=o}o(t,e,i,s,a)}static effectsSynth(t,e,n,i,s,a,r){const o=v(a.effects),l=b(a.effects),h=r.eqFilterCount>0,c=M(a.effects),u=S(a.effects),f=w(a.effects),p=k(a.effects);let d=0;o&&(d|=1),d<<=1,l&&(d|=1),d<<=1,h&&(d|=1),d<<=1,c&&(d|=1),d<<=1,u&&(d|=1),d<<=1,f&&(d|=1),d<<=1,p&&(d|=1);let m=at.effectsFunctionCache[d];if(null==m){let t="";const e=u||p||f;t+="\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolumeStart;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;",e&&(t+="\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMultStart;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;"),o&&(t+="\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +beepbox.Config.distortionBaseVolume;\n\t\t\t\tconst distortionStart = +Math.pow(1.0 - 0.895 * (Math.pow(20.0, instrumentState.distortionStart) - 1.0) / 19.0, 2.0)\n\t\t\t\tconst distortionEnd   = +Math.pow(1.0 - 0.895 * (Math.pow(20.0, instrumentState.distortionEnd  ) - 1.0) / 19.0, 2.0)\n\t\t\t\tlet distortion = distortionStart;\n\t\t\t\tconst distortionDelta = (distortionEnd - distortionStart) / runLength;\n\t\t\t\tconst distortionDriveStart = (1.0 + 2.0 * instrumentState.distortionStart) / distortionBaseVolume;\n\t\t\t\tconst distortionDriveEnd   = (1.0 + 2.0 * instrumentState.distortionEnd)   / distortionBaseVolume;\n\t\t\t\tlet distortionDrive = distortionDriveStart;\n\t\t\t\tconst distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / runLength;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;"),l&&(t+="\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;"),h&&(t+="\n\t\t\t\t\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = beepbox.Synth.applyFilters;"),t+="\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolumeStart;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;",c&&(t+="\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeStartL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeStartR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = panningDelayPos - instrumentState.panningOffsetStartL + synth.panningDelayBufferSize;\n\t\t\t\tlet   panningOffsetR      = panningDelayPos - instrumentState.panningOffsetStartR + synth.panningDelayBufferSize;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;"),u&&(t+="\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tconst chorusStart = +instrumentState.chorusStart;\n\t\t\t\tconst chorusEnd   = +instrumentState.chorusEnd;\n\t\t\t\tlet chorusVoiceMult = chorusStart;\n\t\t\t\tconst chorusVoiceMultDelta = (chorusEnd - chorusStart) / runLength;\n\t\t\t\tlet chorusCombinedMult = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n\t\t\t\tconst chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n\t\t\t\tconst chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMult) / runLength;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;"),f&&(t+="\n\t\t\t\t\n\t\t\t\tlet echoMult = +instrumentState.echoMultStart;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;"),p&&(t+="\n\t\t\t\t\n\t\t\t\tconst reverbMask = beepbox.Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMultStart;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;"),t+="\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;",o&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;"),l&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;"),h&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;"),t+="\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;",t+=c?"\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;":"\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;",u&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;"),f&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;"),p&&(t+="\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;"),t+="\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;",e&&(t+="\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;"),t+="\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);",o&&(t+="\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;"),l&&(t+="\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;"),h&&(t+="\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;"),c&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;"),u&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;"),f&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;"),p&&(t+="\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos  = reverbDelayPos;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;"),m=new Function("synth","outputDataL","outputDataR","bufferIndex","runLength","instrument","instrumentState",t),at.effectsFunctionCache[d]=m}m(t,e,n,i,s,a,r)}static pulseWidthSynth(t,e,n,i,s){const a=t.tempMonoInstrumentSampleBuffer;let r=i.phaseDeltas[0];const o=+i.phaseDeltaScales[0];let l=+i.expressionStarts[0];const h=+i.expressionDeltas[0];let c=i.phases[0]%1,u=i.pulseWidth;const f=i.pulseWidthDelta,p=i.noteFilters,d=0|i.noteFilterCount;let m=+i.initialNoteFilterInput1,y=+i.initialNoteFilterInput2;const g=at.applyFilters,v=e+n;for(let t=e;t<v;t++){const e=c%1,n=(c+u)%1;let i=n-e;if(!s.aliases){if(e<r)i+=.5*((b=e/r)+b-b*b-1);else if(e>1-r){i+=.5*((b=(e-1)/r)+b+b*b+1)}if(n<r)i-=.5*((b=n/r)+b-b*b-1);else if(n>1-r){var b;i-=.5*((b=(n-1)/r)+b+b*b+1)}}const v=i,M=g(v,m,y,d,p);y=m,m=v,c+=r,r*=o,u+=f;const S=M*l;l+=h,a[t]+=S}i.phases[0]=c,t.sanitizeFilters(p),i.initialNoteFilterInput1=m,i.initialNoteFilterInput2=y}static noiseSynth(t,e,i,s,a){const r=t.tempMonoInstrumentSampleBuffer;let o=a.getDrumWave(),l=+s.phaseDeltas[0];const h=+s.phaseDeltaScales[0];let c=+s.expressionStarts[0];const u=+s.expressionDeltas[0];let f=s.phases[0]%1*n.chipNoiseLength;0==s.phases[0]&&(f=Math.random()*n.chipNoiseLength);const p=n.chipNoiseLength-1;let d=+s.sample;const m=s.noteFilters,y=0|s.noteFilterCount;let g=+s.initialNoteFilterInput1,v=+s.initialNoteFilterInput2;const b=at.applyFilters,M=Math.min(1,s.phaseDeltas[0]*n.chipNoises[a.chipNoise].pitchFilterMult),S=e+i;for(let t=e;t<S;t++){d+=(o[f&p]-d)*M;const e=d,n=b(e,g,v,y,m);v=g,g=e,f+=l,l*=h;const i=n*c;c+=u,r[t]+=i}s.phases[0]=f/n.chipNoiseLength,s.sample=d,t.sanitizeFilters(m),s.initialNoteFilterInput1=g,s.initialNoteFilterInput2=v}static spectrumSynth(t,e,i,s,a){const r=t.tempMonoInstrumentSampleBuffer;let o=a.getDrumWave(),l=128*s.phaseDeltas[0];const h=+s.phaseDeltaScales[0];let c=+s.expressionStarts[0];const u=+s.expressionDeltas[0];let f=+s.sample;const p=s.noteFilters,d=0|s.noteFilterCount;let m=+s.initialNoteFilterInput1,y=+s.initialNoteFilterInput2;const g=at.applyFilters;let v=s.phases[0]%1*n.spectrumNoiseLength;0==s.phases[0]&&(v=at.findRandomZeroCrossing(o,n.spectrumNoiseLength)+l);const b=n.spectrumNoiseLength-1,M=Math.min(1,l),S=e+i;for(let t=e;t<S;t++){const e=0|v,n=e&b;let i=o[n];const s=v-e;i+=(o[n+1]-i)*s,f+=(i-f)*M;const a=f,S=g(a,m,y,d,p);y=m,m=a,v+=l,l*=h;const w=S*c;c+=u,r[t]+=w}s.phases[0]=v/n.spectrumNoiseLength,s.sample=f,t.sanitizeFilters(p),s.initialNoteFilterInput1=m,s.initialNoteFilterInput2=y}static drumsetSynth(t,e,i,s,a){const r=t.tempMonoInstrumentSampleBuffer;let o=a.getDrumsetWave(s.drumsetPitch),l=s.phaseDeltas[0]/Z.drumsetIndexReferenceDelta(s.drumsetPitch);const h=+s.phaseDeltaScales[0];let c=+s.expressionStarts[0];const u=+s.expressionDeltas[0],f=s.noteFilters,p=0|s.noteFilterCount;let d=+s.initialNoteFilterInput1,m=+s.initialNoteFilterInput2;const y=at.applyFilters;let g=s.phases[0]%1*n.spectrumNoiseLength;0==s.phases[0]&&(g=at.findRandomZeroCrossing(o,n.spectrumNoiseLength)+l);const v=n.spectrumNoiseLength-1,b=e+i;for(let t=e;t<b;t++){const e=0|g,n=e&v;let i=o[n];const s=g-e;i+=(o[n+1]-i)*s;const a=i,b=y(a,d,m,p,f);m=d,d=a,g+=l,l*=h;const M=b*c;c+=u,r[t]+=M}s.phases[0]=g/n.spectrumNoiseLength,t.sanitizeFilters(f),s.initialNoteFilterInput1=d,s.initialNoteFilterInput2=m}static modSynth(t,e,i,s,a){if(!t.song)return;let r=n.modCount-1-s.pitches[0];if(a.invalidModulators[r])return;let o=a.modulators[r],l=[];if(n.modulators[a.modulators[r]].forSong)l.push(0);else if(a.modInstruments[r]==t.song.channels[a.modChannels[r]].instruments.length)for(let e=0;e<t.song.channels[a.modChannels[r]].instruments.length;e++)l.push(e);else a.modInstruments[r]>t.song.channels[a.modChannels[r]].instruments.length?null!=t.song.getPattern(a.modChannels[r],t.bar)&&(l=t.song.getPattern(a.modChannels[r],t.bar).instruments):l.push(a.modInstruments[r]);for(let e=0;e<l.length;e++)if(t.setModValue(s.expressionStarts[0],s.expressionStarts[0]+s.expressionDeltas[0],r,a.modChannels[r],l[e],o),o==n.modulators.dictionary["reset arp"].index&&0==t.tick&&s.noteStartPart==t.beat*n.partsPerBeat+t.part)t.song.channels[a.modChannels[r]].instruments[l[e]].arpTime=0;else if(o==n.modulators.dictionary["next bar"].index)t.wantToSkip=!0;else if(o==n.modulators.dictionary["eq filter"].index){const o=t.song.channels[a.modChannels[r]].instruments[l[e]];if(!o.eqFilterType){let e=0|a.modFilterTypes[r];if(0==e){let e=0;const a=t.getTicksIntoBar()/n.ticksPerPart;for(;s.note.start+s.note.pins[e].time<=a;)e++;let r=(a-s.note.start+i/(t.getSamplesPerTick()*n.ticksPerPart)*n.ticksPerPart-s.note.pins[e-1].time)/(s.note.pins[e].time-s.note.pins[e-1].time);null!=o.eqSubFilters[s.note.pins[e-1].size]||null!=o.eqSubFilters[s.note.pins[e].size]?o.tmpEqFilterEnd=Q.lerpFilters(o.eqSubFilters[s.note.pins[e-1].size],o.eqSubFilters[s.note.pins[e].size],r):o.tmpEqFilterEnd=o.eqFilter}else{for(let t=0;t<n.filterMorphCount;t++)o.tmpEqFilterEnd==o.eqSubFilters[t]&&null!=o.tmpEqFilterEnd&&(o.tmpEqFilterEnd=new Q,o.tmpEqFilterEnd.fromJsonObject(o.eqSubFilters[t].toJsonObject()));null==o.tmpEqFilterEnd&&(o.tmpEqFilterEnd=new Q,o.tmpEqFilterEnd.fromJsonObject(o.eqFilter.toJsonObject())),o.tmpEqFilterEnd.controlPointCount>Math.floor((e-1)/2)&&(e%2?o.tmpEqFilterEnd.controlPoints[Math.floor((e-1)/2)].freq=s.expressionStarts[0]+s.expressionDeltas[0]:o.tmpEqFilterEnd.controlPoints[Math.floor((e-1)/2)].gain=s.expressionStarts[0]+s.expressionDeltas[0])}}}else if(o==n.modulators.dictionary["note filter"].index){const o=t.song.channels[a.modChannels[r]].instruments[l[e]];if(!o.noteFilterType){let e=0|a.modFilterTypes[r];if(0==e){let e=0;const a=t.getTicksIntoBar()/n.ticksPerPart;for(;s.note.start+s.note.pins[e].time<=a;)e++;let r=(a-s.note.start+i/(t.getSamplesPerTick()*n.ticksPerPart)*n.ticksPerPart-s.note.pins[e-1].time)/(s.note.pins[e].time-s.note.pins[e-1].time);null!=o.noteSubFilters[s.note.pins[e-1].size]||null!=o.noteSubFilters[s.note.pins[e].size]?o.tmpNoteFilterEnd=Q.lerpFilters(o.noteSubFilters[s.note.pins[e-1].size],o.noteSubFilters[s.note.pins[e].size],r):o.tmpNoteFilterEnd=o.noteFilter}else{for(let t=0;t<n.filterMorphCount;t++)o.tmpNoteFilterEnd==o.noteSubFilters[t]&&null!=o.tmpNoteFilterEnd&&(o.tmpNoteFilterEnd=new Q,o.tmpNoteFilterEnd.fromJsonObject(o.noteSubFilters[t].toJsonObject()));null==o.tmpNoteFilterEnd&&(o.tmpNoteFilterEnd=new Q,o.tmpNoteFilterEnd.fromJsonObject(o.noteFilter.toJsonObject())),o.tmpNoteFilterEnd.controlPointCount>Math.floor((e-1)/2)&&(e%2?o.tmpNoteFilterEnd.controlPoints[Math.floor((e-1)/2)].freq=s.expressionStarts[0]+s.expressionDeltas[0]:o.tmpNoteFilterEnd.controlPoints[Math.floor((e-1)/2)].gain=s.expressionStarts[0]+s.expressionDeltas[0])}}}}static findRandomZeroCrossing(t,e){let n=Math.random()*e;const i=e-1;let s=n&i,a=t[s];for(let r=128;r>0;r--){const r=s+16&i,o=t[r];if(a*o<=0){for(let r=0;r<16;r++){const r=s+1&i,o=t[r];if(a*o<=0){const t=o-a;n=s,Math.abs(t)>1e-8&&(n+=-a/t),n=Math.max(0,n)%e;break}s=r,a=o}break}s=r,a=o}return n}static instrumentVolumeToVolumeMult(t){return t==-n.volumeRange/2?0:Math.pow(2,n.volumeLogScale*t)}static volumeMultToInstrumentVolume(t){return t<=0?-n.volumeRange/2:Math.min(n.volumeRange,Math.log(t)/Math.LN2/n.volumeLogScale)}static noteSizeToVolumeMult(t){return Math.pow(Math.max(0,t)/n.noteSizeMax,1.5)}static volumeMultToNoteSize(t){return Math.pow(Math.max(0,t),1/1.5)*n.noteSizeMax}static fadeInSettingToSeconds(t){return.0125*(.95*t+.05*t*t)}static secondsToFadeInSetting(t){return N(0,n.fadeInRange,Math.round((-.95+Math.sqrt(.9025+.2*t/.0125))/.1))}static fadeOutSettingToTicks(t){return n.fadeOutTicks[t]}static ticksToFadeOutSetting(t){let e=n.fadeOutTicks[0];if(t<=e)return 0;for(let i=1;i<n.fadeOutTicks.length;i++){let s=n.fadeOutTicks[i];if(t<=s)return t<(e+s)/2?i-1:i;e=s}return n.fadeOutTicks.length-1}static detuneToCents(t){return t-n.detuneCenter}static centsToDetune(t){return t+n.detuneCenter}static getOperatorWave(t,e){return 2!=t?n.operatorWaves[t]:n.pwmOperatorWaves[e]}getSamplesPerTick(){if(null==this.song)return 0;let t=this.song.getBeatsPerMinute();return this.isModActive(n.modulators.dictionary.tempo.index)&&(t=this.getModValue(n.modulators.dictionary.tempo.index)),this.getSamplesPerTickSpecificBPM(t)}getSamplesPerTickSpecificBPM(t){const e=t/60,i=n.partsPerBeat*e,s=n.ticksPerPart*i;return this.samplesPerSecond/s}static fittingPowerOfTwo(t){return 1<<32-Math.clz32(Math.ceil(t)-1)}sanitizeFilters(t){let e=!1;for(const n of t){const t=Math.abs(n.output1),i=Math.abs(n.output2);if(!(t<100&&i<100)){e=!0;break}t<E&&(n.output1=0),i<E&&(n.output2=0)}if(e)for(const e of t)e.output1=0,e.output2=0}static sanitizeDelayLine(t,e,n){for(;;){const i=--e&n,s=Math.abs(t[i]);if(Number.isFinite(s)&&(0==s||s>=E))break;t[i]=0}}static applyFilters(t,e,n,i,s){for(let a=0;a<i;a++){const i=s[a],r=i.output1,o=i.output2,l=i.a1,h=i.a2,c=i.b0,u=i.b1,f=i.b2;t=c*t+u*e+f*n-l*r-h*o,i.a1=l+i.a1Delta,i.a2=h+i.a2Delta,i.useMultiplicativeInputCoefficients?(i.b0=c*i.b0Delta,i.b1=u*i.b1Delta,i.b2=f*i.b2Delta):(i.b0=c+i.b0Delta,i.b1=u+i.b1Delta,i.b2=f+i.b2Delta),i.output2=r,i.output1=t,n=o,e=r}return t}}return at.tempFilterStartCoefficients=new D,at.tempFilterEndCoefficients=new D,at.fmSynthFunctionCache={},at.fm6SynthFunctionCache={},at.effectsFunctionCache=Array(128).fill(void 0),at.pickedStringFunctionCache=Array(3).fill(void 0),at.fmSourceTemplate=("\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\tconst sineWave = beepbox.Config.sineWave;\n\t\t\t\n\t\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\n\t\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#];\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.expressionStarts[#];\n\t\tconst operator#OutputDelta = +tone.expressionDeltas[#];\n\t\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n\t\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\t\tconst feedbackDelta        = +tone.feedbackDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = beepbox.Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + runLength;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\t\t\n//const absStereoDelay: number = Math.abs(stereoDelay);\n//const fracStereoDelay: number = absStereoDelay % 1;\n//const floorStereoDelay: number = absStereoDelay | 0;\n\n//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\n\n// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\n\t\t\tdata[sampleIndex] += sample;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / "+n.sineWaveLength+";\n\t\t\ttone.feedbackOutputs[#] = operator#Output;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t").split("\n"),at.operatorSourceTemplate=("\nconst operator#Wave     = beepbox.Synth.getOperatorWave(instrument.operators[#].waveform, instrument.operators[#].pulseWidth).samples;\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & "+n.sineWaveMask+";\nconst operator#Sample   = operator#Wave[operator#Index];\noperator#Output       = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t").split("\n"),t.Channel=Y,t.Config=n,t.CustomAlgorithm=W,t.CustomFeedBack=j,t.EnvelopeSettings=_,t.FilterControlPoint=J,t.FilterSettings=Q,t.HarmonicsWave=K,t.Instrument=Z,t.Note=V,t.Operator=$,t.Pattern=B,t.Song=X,t.SpectrumWave=U,t.Synth=at,t.clamp=N,t.makeNotePin=H,Object.defineProperty(t,"W",{value:!0}),t}({});
//# sourceMappingURL=beepbox_synth.min.js.map